<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuYang&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/a2b2e91fc3b2fce1b054fb5c8a17e2fa</icon>
  <subtitle>探索，分享，创新——追求卓越</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://handsomeliuyang.github.io/"/>
  <updated>2019-05-11T06:09:19.789Z</updated>
  <id>https://handsomeliuyang.github.io/</id>
  
  <author>
    <name>刘阳</name>
    <email>40610243@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin学习笔记</title>
    <link href="https://handsomeliuyang.github.io/2019/05/07/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://handsomeliuyang.github.io/2019/05/07/Kotlin学习笔记/</id>
    <published>2019-05-07T06:47:09.000Z</published>
    <updated>2019-05-11T06:09:19.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin优势"><a href="#Kotlin优势" class="headerlink" title="Kotlin优势"></a>Kotlin优势</h1><ol><li>更安全，避免NPE（NullPointerException），强制判断再使用</li><li>更多的语言特性（如java8新特性，类扩展等等），使用代码更简洁</li><li>与Java互调，能使用Java所有的工具库（<font color="#ff0000">原因：</font>Kotlin编译为JVM上运行的字节码，与java的原生字节码基本一致，部份情况下，性能更强）</li></ol><h1 id="Kotlin基础类型"><a href="#Kotlin基础类型" class="headerlink" title="Kotlin基础类型"></a>Kotlin基础类型</h1><p>Kotlin是强类型语言，即确定类型后，就不能再修改其类型。JavaScript就是弱类型语言</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>抛弃了Java的基本类型，都是引用类型：</p><ol><li>整数：Byte-1, Short-2, Int-4, Long-8</li><li>浮点型：Float-4, Double-8</li><li>字符型：Char，’a’</li><li>Boolean类型：Boolean</li><li>字符串：String，”abc”</li><li><font color="#ff0000">字符串模板：</font>”图书价格是: ${bookPrice }”</li><li><font color="#ff0000">类型别名：</font>typealias 类型别名=已有类型</li></ol><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>语法：var|val 变量名[:类型] [= 初始值]<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读写变量</span></div><div class="line"><span class="keyword">var</span> name: String = <span class="string">"ly"</span></div><div class="line"><span class="comment">// 只读变量</span></div><div class="line"><span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">18</span></div></pre></td></tr></table></figure></p><p>val表示只读变量，不同的变量类型，其初始值有一定的区别：</p><ol><li>局部变量：只要在第一次使用之前初始化值就行</li><li>类属性：可以声明时，或构造函数里初始化</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span> <span class="comment">// = 18</span></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">        <span class="keyword">val</span> tempVar: String</div><div class="line">        ...</div><div class="line">        tempVar = <span class="string">"初始值"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Null安全"><a href="#Null安全" class="headerlink" title="Null安全"></a>Null安全</h2><p>通过如下语法保证Null安全：</p><ol><li>类属性没有默认值，强制设置初始值</li><li>var a:String 不支持null值</li><li>var a:String? 支持null值，但不能直接调用其方法与属性</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> a:String = <span class="literal">null</span> <span class="comment">// 编译报错</span></div><div class="line">        <span class="keyword">var</span> a:String? = <span class="literal">null</span> <span class="comment">// 编译通过</span></div><div class="line">        <span class="keyword">if</span>(savedInstanceState != <span class="literal">null</span>) &#123;</div><div class="line">            a = <span class="string">"HelloWorld"</span></div><div class="line">        &#125;</div><div class="line">        Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;a.length&#125;</span>"</span>) <span class="comment">// 编译报错</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>可空变量使用姿式：</strong></p><ol><li><p>先判空再使用</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a != <span class="literal">null</span>)&#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123; a.length &#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>安全调用</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123; a?.length &#125;</span>"</span>) <span class="comment">// 当a==null时，返回null</span></div></pre></td></tr></table></figure></li><li><p>Elvis运算，对安全调用的补充，允许修改为null时的返回值</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123; a?.length ?: "" &#125;</span>"</span>)</div></pre></td></tr></table></figure></li><li><p>强制调用，可能引发NPE异常 — <font color="#ff0000">不推荐</font></p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123; a!!.length &#125;</span>"</span>)</div></pre></td></tr></table></figure></li></ol><h1 id="Kotlin运算符"><a href="#Kotlin运算符" class="headerlink" title="Kotlin运算符"></a>Kotlin运算符</h1><p>两个关键点：</p><ol><li>运算符通过方法实现，即运算符都是编译时使用，编译后都是方法</li><li>支持运算符重载</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name: String</div><div class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></div><div class="line">    init &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 运算符重载</span></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</div><div class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> animal: Animal = Animal(<span class="string">"animal"</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> animal2: Animal = Animal(<span class="string">"animal2"</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> animal3: Animal</div><div class="line"><span class="comment">// 下面两个写法是一样的</span></div><div class="line">animal3 = animal.plus(animal2);</div><div class="line">animal3 = animal + animal2 <span class="comment">// 编译为字节码的代码：animal.plus(animal2);</span></div></pre></td></tr></table></figure><p><strong>常用运算符对应表</strong></p><table><thead><tr><th>运算符</th><th>对应方法</th></tr></thead><tbody><tr><td>a - b</td><td>a.minus(b)</td></tr><tr><td>a + b</td><td>a.plus(b)</td></tr><tr><td>a * b</td><td>a.times(b)</td></tr><tr><td>a / b</td><td>a.div(b)</td></tr><tr><td>a[i]</td><td>a.get(i)</td></tr><tr><td>a[i]=b</td><td>a.set(i, b)</td></tr><tr><td><font color="#ff0000">a == b</font></td><td>a?.equals(b) ?: (b === null)</td></tr><tr><td>a != b</td><td>!(a?.equals(b) ?: (b === null)))</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr><tr><td>a !in b</td><td>!b.minus(a)</td></tr></tbody></table><p><strong>三个等号===</strong></p><p>=== 三个等号的意思，则比较的是内存地址，如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"字符串"</span></div><div class="line"><span class="keyword">var</span> b = a</div><div class="line"><span class="keyword">var</span> c = a</div><div class="line">print(b === c) <span class="comment">// 结果为true</span></div></pre></td></tr></table></figure></p><p>但对于Int类型的变量有差异，有兴趣的同学可以进一步再了解</p><h1 id="Kotlin流程控制"><a href="#Kotlin流程控制" class="headerlink" title="Kotlin流程控制"></a>Kotlin流程控制</h1><p>关键点：</p><ol><li><p>没有三目运算符，if表达式支持返回值</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不支持三目运算符</span></div><div class="line"><span class="comment">// min = (a &gt; b) ? a : b</span></div><div class="line"></div><div class="line"><span class="comment">// 通过if替换</span></div><div class="line">min = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div></pre></td></tr></table></figure></li><li><p>when 替换 switch</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> score = <span class="string">'B'</span></div><div class="line"><span class="keyword">when</span> (score)&#123;</div><div class="line">    <span class="string">'A'</span> -&gt; println(<span class="string">"优秀"</span>)</div><div class="line">    <span class="string">'B'</span> -&gt; println(<span class="string">"良好"</span>)</div><div class="line">    <span class="string">'C'</span> -&gt; println(<span class="string">"中"</span>)</div><div class="line">    <span class="string">'D'</span> -&gt; println(<span class="string">"及格"</span>)</div><div class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">"不及格"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>for的语法：for (常量名 in 对象) {}</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历1-5</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>)&#123;</div><div class="line">    println(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> list: Array&lt;String&gt; = arrayOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> list)&#123;</div><div class="line">    println(<span class="string">"<span class="subst">$&#123;key&#125;</span>"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//下面的写法不支持</span></div><div class="line"><span class="comment">//for(int i=0; i&lt;list.length; i++)&#123;</span></div><div class="line"><span class="comment">//    println("$&#123;list[i]&#125;");</span></div><div class="line"><span class="comment">//&#125;</span></div></pre></td></tr></table></figure></li></ol><h1 id="Kotlin的数组和集合"><a href="#Kotlin的数组和集合" class="headerlink" title="Kotlin的数组和集合"></a>Kotlin的数组和集合</h1><h2 id="Array，Set，List"><a href="#Array，Set，List" class="headerlink" title="Array，Set，List"></a>Array，Set，List</h2><ol><li>创建对象<ol><li>xxxOf(参数) — 长度固定</li><li>mutableXXXOf(参数) — 长度可变（Array除外）</li></ol></li><li>常用功能<ol><li>长度：xxx.size属性</li><li>包含：”java” in xxx 对应方法：xxx.contains(“java”)</li><li>…</li></ol></li><li>遍历<ol><li>遍历值：for (book in books) { }</li><li>遍历下标：for (i in books.indices) {}</li><li>遍历下标与值：for ( (index, value) in books.withindex() ) { }</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建数组</span></div><div class="line"><span class="keyword">var</span> array: Array&lt;String&gt;</div><div class="line">array = arrayOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">array = Array&lt;String&gt;(<span class="number">3</span>, &#123;index-&gt; <span class="string">"a<span class="subst">$&#123;index&#125;</span>"</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 创建List</span></div><div class="line"><span class="keyword">var</span> list: List&lt;String&gt;</div><div class="line">list = listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)        <span class="comment">// 长度不可变</span></div><div class="line">list.add(<span class="string">"d"</span>) <span class="comment">// 无此方法，编译报错</span></div><div class="line">list = mutableListOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>) <span class="comment">// 长度可变</span></div><div class="line">list.add(<span class="string">"d"</span>) <span class="comment">// 编译成功</span></div><div class="line">list = arrayListOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)   <span class="comment">// ArrayList</span></div><div class="line"></div><div class="line"><span class="comment">// 创建Set</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">set</span>: Set&lt;String&gt;</div><div class="line"><span class="keyword">set</span> = setOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)          <span class="comment">// 长度不可变</span></div><div class="line"><span class="keyword">set</span>.add(<span class="string">"d"</span>) <span class="comment">// 无此方法，编译报错</span></div><div class="line"><span class="keyword">set</span> = mutableSetOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)   <span class="comment">// 长度可变</span></div><div class="line"><span class="keyword">set</span>.add(<span class="string">"d"</span>) <span class="comment">// 编译成功</span></div><div class="line"><span class="keyword">set</span> = hashSetOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)      <span class="comment">// HashSet</span></div><div class="line"><span class="keyword">set</span> = linkedSetOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)    <span class="comment">// LinkedHashSet</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历值</span></div><div class="line"><span class="keyword">for</span> (value <span class="keyword">in</span> array) &#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;value&#125;</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 遍历下标</span></div><div class="line"><span class="keyword">for</span> (index <span class="keyword">in</span> array.indices)&#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;array[index]&#125;</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 遍历下标与值</span></div><div class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex())&#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;index&#125;</span>,<span class="subst">$&#123;value&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ol><li>创建对象<ol><li>mapOf(”Java” to 86, “xxx” to xx) — 长度固定</li><li>mutableMapOf(”Java” to 86, “xxx” to xx) — 长度可变</li></ol></li><li>常用功能<ol><li>长度：map.size属性</li><li>包含：key in map 对应方法：map.contains(key)</li></ol></li><li>遍历<ol><li>遍历Entry：for (en in map.entries) { en.key  en.value}</li><li>解构遍历key，value：for ( (key, value) in map) {}</li><li>遍历key：for (key in map.keys ) {}</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建Map</span></div><div class="line"><span class="keyword">var</span> map: Map&lt;String, <span class="built_in">Int</span>&gt;</div><div class="line">map = mapOf(<span class="string">"Java"</span> to <span class="number">86</span>, <span class="string">"Kotlin"</span> to <span class="number">87</span>)         <span class="comment">// 长度不可变</span></div><div class="line"><span class="comment">// map.put("Flutter", 88) // 无此方法，编译报错</span></div><div class="line">map = mutableMapOf(<span class="string">"Java"</span> to <span class="number">86</span>, <span class="string">"Kotlin"</span> to <span class="number">87</span>)  <span class="comment">// 长度可变</span></div><div class="line">map.put(<span class="string">"Flutter"</span>, <span class="number">88</span>) <span class="comment">// 编译成功</span></div><div class="line">map = hashMapOf(<span class="string">"Java"</span> to <span class="number">86</span>, <span class="string">"Kotlin"</span> to <span class="number">87</span>)     <span class="comment">// HashMap</span></div><div class="line">map = linkedMapOf(<span class="string">"Java"</span> to <span class="number">86</span>, <span class="string">"Kotlin"</span> to <span class="number">87</span>)   <span class="comment">// LinkedHashMap</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历Entry</span></div><div class="line"><span class="keyword">for</span> (en <span class="keyword">in</span> map.entries) &#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;en.key&#125;</span>,<span class="subst">$&#123;en.value&#125;</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 解构遍历key，value</span></div><div class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;key&#125;</span>,<span class="subst">$&#123;value&#125;</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 遍历key</span></div><div class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> map.keys) &#123;</div><div class="line">    Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;key&#125;</span>,<span class="subst">$&#123;map[key]&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Kotlin的函数或方法"><a href="#Kotlin的函数或方法" class="headerlink" title="Kotlin的函数或方法"></a>Kotlin的函数或方法</h1><p>关键点：</p><ol><li>独立存在称为函数（function），存在类里的称为方法（method）</li><li><p><font color="#ff0000">语法：</font></p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> 函数名<span class="params">(参数名 : 参数类型)</span></span>[:返回值类型]&#123;</div><div class="line">    <span class="comment">// 函数体</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">注意：</div><div class="line"><span class="number">1.</span> 无法返回值：省略 或 :<span class="built_in">Unit</span>（相当于Java的void）</div><div class="line"><span class="number">2.</span> 参数：支持命名参数，默认值，可变参数(<span class="keyword">vararg</span>)</div></pre></td></tr></table></figure></li><li><p>函数可当变量的类型：var myfun : (Int , Int) -&gt; Int = ::pow</p></li><li>函数在字节码里，通过类来实现</li><li>匿名函数的语法：fun(参数名 : 参数类型)[:返回值类型]{ }</li><li>内联函数：<ol><li>语法：inline fun 函数名(参数名:参数类型)[:返回值类型]{ }</li><li>意义：提升代码量很少，但调用很频繁的函数开销</li><li>原理：增加代码来减少函数调用的时间开销，适用于代码量非常少的函数，如单表达式</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数调用</span></div><div class="line"><span class="keyword">var</span> c: <span class="built_in">Int</span> = add(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">var</span> d: <span class="built_in">Int</span> = add( b = <span class="number">1</span>, a = <span class="number">2</span>)</div><div class="line"><span class="comment">// 创建一个函数类型</span></div><div class="line"><span class="keyword">var</span> e: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = ::add</div><div class="line"><span class="keyword">var</span> f: <span class="built_in">Int</span> = e(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">//var g: Int = e(a=1, b=2) // 编译不通过</span></div></pre></td></tr></table></figure><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>关键点</p><ol><li><p>语法：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; 参数名 : 参数类型 -&gt;  函数体 &#125;</div><div class="line"></div><div class="line">注意：</div><div class="line"><span class="number">1.</span> 最后一行默认<span class="keyword">return</span></div><div class="line"><span class="number">2.</span> 如果只有一个参数，可以省略参数，使用it代替</div><div class="line"><span class="number">3.</span> 显示添加<span class="keyword">return</span>语句，不是返回其本身，而是返回其所在的函数</div></pre></td></tr></table></figure></li><li><p>意义：</p><ol><li>简化局部函数</li><li>简化函数式接口（函数式接口：只包含一个抽象方法的接口）</li></ol></li><li>使用注意点：<ol><li>方法的参数是函数或函数式接口时：<ol><li>只一个参数：可省略括号</li><li>最后一参数时：Lambda表达式可写在圆括号外面</li></ol></li><li>与局部函数或匿名内部类一样，可以访问所在函数的局部变量 — 注意：是变量的副本</li><li>支持解构，括号里的参数表示是解析的变量，如下两种写法：<ol><li>map.mapValues { entry -&gt;”${entry.key}-${entry.value}!”} // 正常参数</li><li>map.mapValues { (key, value) -&gt; ”${key}-${value}!” } // 解构</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> clickTime: <span class="built_in">Int</span> = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> text: TextView = findViewById(R.id.textView2)</div><div class="line">        <span class="keyword">var</span> btn: Button = findViewById(R.id.btn)</div><div class="line"></div><div class="line">        <span class="comment">// OnClickListener是一个函数式接口（只有onClick(View)的方法）</span></div><div class="line">        <span class="comment">// setOnClickListener(OnClickListener) 此方法只有一个函数式接口参数，可省略括号</span></div><div class="line">        btn.setOnClickListener &#123; view -&gt;</div><div class="line">            text.setText(<span class="string">"<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// postDelayed(Runnable, long) 有两个参数，且Runnable参数不在最后，不能省略</span></div><div class="line">        btn.postDelayed(&#123;</div><div class="line">            text.setText(<span class="string">"<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>"</span>)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Kotlin的面向对象：类"><a href="#Kotlin的面向对象：类" class="headerlink" title="Kotlin的面向对象：类"></a>Kotlin的面向对象：类</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>关键点：</p><ol><li><p>分为主构造器与次构造器，互为重载方法，其语法如下：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主构造器，可以省略constructor</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name: String</div><div class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></div><div class="line"></div><div class="line">    <span class="comment">// 初始化块，相当于主构造器的函数体，注意：可以有多个初始化块</span></div><div class="line">    init &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></div><div class="line">    <span class="keyword">constructor</span>() :<span class="keyword">this</span>(<span class="string">""</span>, <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></div><div class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></div><div class="line">    <span class="keyword">constructor</span>(age: <span class="built_in">Int</span>): <span class="keyword">this</span>(<span class="string">""</span>, age) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</div><div class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>主构造器的参数使用var|val修饰时，即表示形参，也表示类的属性</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主构造器，可以省略constructor</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>) &#123;</div><div class="line"><span class="comment">//    var name: String</span></div><div class="line"><span class="comment">//    var age: Int</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    init &#123;</span></div><div class="line"><span class="comment">//        this.name = name</span></div><div class="line"><span class="comment">//        this.age = age;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</div><div class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>意义：把构造器中相同的逻辑放在初始化块中，个性化的放在次构造器中</p></li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>关键点：</p><ol><li>语法与变量一样</li><li>对属性，默认生成getter，setter方法（val属性只提供getter），编译为字节码后生成如下成员：<ol><li>backing field： xxx属性</li><li>getter方法：    getXXX()</li><li>setter方法：    setXXX()</li></ol></li><li>getter,setter方法可重载，在重载方法里，通过field访问backing field（为防止死循环）</li><li>注意：<ol><li>val属性会出现两种情况：— 判断依据：getter方法里没有调用field，就是计算属性<ol><li>只有getter方法 — 称为计算属性</li><li>backing field 和 getter方法 — 只读属性</li></ol></li><li>private属性，默认不会生成getter, setter方法，但如果重写getter，setter方法后，会生成</li></ol></li><li>意义：很方便实现数据监听机制，类型Vue的MVVM框架</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只读属性</span></div><div class="line"><span class="keyword">val</span> fur: String = <span class="string">"red"</span></div><div class="line">    <span class="keyword">get</span>() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"fur=<span class="subst">$&#123;field&#125;</span>"</span> <span class="comment">// 拦截fur变量，添加前缀</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 计算属性</span></div><div class="line"><span class="keyword">val</span> nameAndAge: String</div><div class="line">    <span class="keyword">get</span>()&#123;</div><div class="line">        <span class="comment">// 没有使用field属性，所以不会生成backing field</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><p>方法与函数基本一致，略</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>关键点：</p><ol><li>创建对象省略new关键字，如：var animal: Animal = Animal()</li><li><p>访问属性，本质是调用getter，setter方法：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal: Animal = Animal()</div><div class="line"><span class="keyword">var</span> name: String = animal.name <span class="comment">// 实现是调用animal.getName()</span></div><div class="line">animal.age = <span class="number">3</span> <span class="comment">// 实际是调用animal.setAge(3)</span></div></pre></td></tr></table></figure></li><li><p>支持解构：（解构：相当于一个运算符，通过operator重载）</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Animal通过重载，支持解构</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name: String</div><div class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></div><div class="line">    init &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 重载解构</span></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component1</span><span class="params">()</span></span>: String&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 重载解构</span></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component2</span><span class="params">()</span></span>: <span class="built_in">Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</div><div class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用场景1</span></div><div class="line"><span class="keyword">var</span> animal: Animal = Animal(<span class="string">""</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">var</span> (name, age) = animal</div><div class="line"></div><div class="line"><span class="comment">// 使用场景2</span></div><div class="line"><span class="keyword">var</span> list:List&lt;Animal&gt; = mutableListOf();</div><div class="line"><span class="keyword">for</span>((name, age) <span class="keyword">in</span> list)&#123;</div><div class="line">    printlin(<span class="string">"<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;age&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>数据类：</p><ol><li>语法：data class XXX()</li><li>意义：用于替换Java的Bean，自动提供解构方法，使用很方便<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过数据类定义Animal</span></div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</div><div class="line"></div><div class="line"><span class="comment">// 自动支持解构</span></div><div class="line"><span class="keyword">var</span> animal:Animal = Animal(<span class="string">""</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">var</span> (name, age) = animal</div></pre></td></tr></table></figure></li></ol></li><li><p>import支持起别名</p><ol><li>意义：方便包名不同，名称相同的类的使用</li><li>语法：import xxx as 别名</li></ol></li></ol><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>关键点：</p><ol><li>类，方法，属性默认情况下：final public，通过open修饰后，才能被继承与重写</li><li>注意：在Kotlin里，final表示的含义与java有区别，只表示不能继承与重写，不表示只读，只读与常量的写法：<ol><li>只读：val 变量名 —》java里的final 变量名</li><li>常量：const val 变量名 —》java里的static final 变量名   //同时只能定义在top-level，属于文件，不属于类</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义常量，需处于top-level</span></div><div class="line"><span class="comment">// 相当于java里的：static final String TAG = "liuyang"</span></div><div class="line">const <span class="keyword">val</span> TAG: String = <span class="string">"liuyang"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="comment">// 只读属性</span></div><div class="line">    <span class="comment">// 相当于java里的：final String description = "Animal Class"</span></div><div class="line">    <span class="keyword">val</span> description: String = <span class="string">"Animal Class"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><p>关键点：</p><ol><li>继承：<ol><li>语法：class SubClass : Superclass {}</li><li>顶级父类是Any，不是Object，区别：方法较少</li><li>构造器的执行顺序：<ol><li>父类的主构造器（即初始化块）</li><li>父类的次构造器（前题是子类调了相应的次构造器）</li><li>子类的主构造器（即初始化块）</li><li>子类的次构造器</li></ol></li></ol></li><li>重写（方法和属性）<ol><li>方法重写：override fun xxx() {}</li><li>属性重写：override var xxx: String = “图片”</li></ol></li><li>使用：<ol><li>类型判断：is 或 !is —&gt;java里的instanceOf</li><li>强制转换：<ol><li>xxx as 类：强制转换，可能崩溃</li><li>xxx as? 类：安全的强制转换，转换失败返回null</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: String</div><div class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></div><div class="line">    init &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDescription</span><span class="params">()</span></span>: String&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Animal description is <span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 继承Animal，并调用其主构造器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>(age: <span class="built_in">Int</span>): Animal(<span class="string">"dog"</span>, age) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 重写父类的showDescription()方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDescription</span><span class="params">()</span></span>: String &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Dog description is <span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="keyword">var</span> animal: Animal = Dog(<span class="number">3</span>)</div><div class="line">        </div><div class="line"><span class="comment">// 按java的思路的写法，不然会崩溃</span></div><div class="line"><span class="keyword">if</span>(animal <span class="keyword">is</span> Dog) &#123;</div><div class="line">    <span class="keyword">var</span> dog: Dog = animal <span class="keyword">as</span> Dog</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更简单写法</span></div><div class="line"><span class="keyword">var</span> dog: Dog? = animal <span class="keyword">as</span>? Dog</div></pre></td></tr></table></figure><h2 id="类的扩展"><a href="#类的扩展" class="headerlink" title="类的扩展"></a>类的扩展</h2><p>关键点：</p><ol><li>语法：<ol><li>方法扩展：fun Raw.info() { }</li><li>属性扩展：var Raw.fullName: String get(){} – <font color="#ff0000">注意：</font>由于只是添加了getter，setter方法，没有backing field，所以只能是计算属性</li></ol></li><li>扩展的意义：<ol><li>扩展可动态地为己有的类添加方法或属性，方式不在限定于继承或动态代理来实现</li><li>扩展能以更好的形式组织一些工具方法，更好的面向对象的代码风格，如Collections.sort()，应该是list.sort()</li></ol></li><li>扩展的实现机制：Java是静态语言，类定义后，不支持扩展，kotlin的扩展不是真正的修改类，而是创建了一个函数，通过编译时，进行替换为调用对应的函数实现</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list: List&lt;<span class="built_in">Int</span>&gt; = mutableListOf(<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 给List类扩展sort排序方法</span></div><div class="line"><span class="function"><span class="keyword">fun</span> List<span class="type">&lt;Int&gt;</span>.<span class="title">sort</span><span class="params">()</span></span>&#123;</div><div class="line">    Collections.sort(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line">list.sort()</div><div class="line"></div><div class="line">Log.d(<span class="string">"liuyang"</span>, <span class="string">"<span class="subst">$&#123;list&#125;</span>"</span>) <span class="comment">// 输出结果为：[1, 2, 4, 5]</span></div></pre></td></tr></table></figure><h2 id="抽象与接口"><a href="#抽象与接口" class="headerlink" title="抽象与接口"></a>抽象与接口</h2><p>关键点：</p><ol><li>抽象类：通过abstract修饰的类</li><li>接口：<ol><li>语法：interface修饰，没有构造器与初始化块</li><li>方法：除了抽象方法外，还可包含有非抽象方法</li><li>属性：没有backing field，无法保存数据，默认都是抽象属性，但通过提供getter方法，可以改为非抽象属性</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</div><div class="line">    <span class="comment">// 只读属性定义了 getter 方法，非抽象属性</span></div><div class="line">    <span class="keyword">val</span> description: String</div><div class="line">        <span class="keyword">get</span>() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 读写属性没有定义 getter、setter 方法，抽象属性</span></div><div class="line">    <span class="keyword">var</span> name: String</div><div class="line"></div><div class="line">    <span class="comment">// 抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">(food: <span class="type">String</span>)</span></span></div><div class="line"></div><div class="line">    <span class="comment">// 非抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">(<span class="keyword">vararg</span> msgs: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> (msg <span class="keyword">in</span> msgs) &#123;</div><div class="line">            println(msg)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对象表达式-amp-amp-对象声明-amp-amp-伴生对象"><a href="#对象表达式-amp-amp-对象声明-amp-amp-伴生对象" class="headerlink" title="对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象"></a>对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象</h2><p>关键点：</p><ol><li>对象表达式：<ol><li>作用：用于创建匿名内部类（区别在于：可以实现多个接口）</li><li>语法：object[: 0~N 个父类型] { //对象表达式的类体部分 }</li><li>注意：接口是函数式接口时，可以使用Lambda表达式，进一步简写，不一定要用对象表达式</li></ol></li><li>对象声明：<ol><li>作用：用于创建单例，无法再创建新的对象</li><li>语法：object ObjectName[: 0咽个父类型]{ } ObjectName是单例的名称</li></ol></li><li>伴生对象<ol><li>作用：用于实现Java里的静态成员，Kotlin为了保证面向对象的纯度，通过对象来实现静态成员的能力</li><li>语法：在类中定义的对象声明，可使用 companion修饰，这样该对象就变成了伴生对象</li><li>注意：<ol><li>一个类只能定义一个伴生对象</li><li>伴生对象的对象名称可以省略</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn: Button = findViewById(R.id.btn)</div><div class="line"><span class="comment">// 对象表达式实现匿名内部类</span></div><div class="line">btn.setOnClickListener(<span class="keyword">object</span>: View.OnClickListener &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</div><div class="line">        text.setText(<span class="string">"<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// OnClickListener是函数式接口，可使用Lambda表达式</span></div><div class="line">btn.setOnClickListener &#123; view -&gt;</div><div class="line">    text.setText(<span class="string">"<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 对象志明---单例</span></div><div class="line"><span class="keyword">object</span> FoodManager &#123;</div><div class="line">    <span class="keyword">var</span> foods: MutableList&lt;String&gt;</div><div class="line">    init&#123;</div><div class="line">        foods = mutableListOf&lt;String&gt;()</div><div class="line"></div><div class="line">        <span class="comment">// 初始化食物池</span></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.9</span>) &#123;</div><div class="line">            foods.add(<span class="string">"food<span class="subst">$&#123;i&#125;</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> foods = FoodManager.foods <span class="comment">// 使用对象声明</span></div><div class="line"></div><div class="line"><span class="comment">// 伴生对象---静态成员</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Outputable</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</div><div class="line">    <span class="comment">// 定义的MyClass的伴生对象</span></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>: Outputable&#123;</div><div class="line">        <span class="keyword">val</span> name = ”name属性值” </div><div class="line">        </div><div class="line">        <span class="comment">//重写父接口中的抽象方法</span></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</div><div class="line">            <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.6</span>)&#123;</div><div class="line">                println (”&lt;h$(i&#125;&gt;$&#123; msg&#125;&lt;/h$&#123;i&#125;&gt;”)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="comment">// 调用伴生对象里的方法与属性，与调用静态成员一样</span></div><div class="line">    MyClass.output(<span class="string">"fkit.org"</span>)</div><div class="line">    println(MyClass.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类委托-amp-amp-属性委托"><a href="#类委托-amp-amp-属性委托" class="headerlink" title="类委托 &amp;&amp; 属性委托"></a>类委托 &amp;&amp; 属性委托</h2><p>关键点：</p><ol><li>类委托<ol><li>用处：让多个对象共享同一个委托对象，代理模式的应用，继承的一种替代，让本类需要实现的部分方法委托给其他对象</li><li>语法：接口 by 对象</li></ol></li><li>属性委托<ol><li>用处：多个类的类似属性统一交给委托对象集中实现</li><li>语法：var属性名:属性类型 by 对象</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Outputable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> type: String</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 定义一个DefaultOutput类实现Outputable接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultOutput</span>: <span class="type">Outputable &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> type: String = <span class="string">"输出设备"</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.6</span>)&#123;</div><div class="line">            println(<span class="string">"&lt;h<span class="subst">$&#123;i&#125;</span>&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/h<span class="subst">$&#123;i&#125;</span>&gt;"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 指定b为委托对象，也可以通过继承DefaultOutput来实现，java里还可以通过Proxy来实现</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span></span>(b: DefaultOutput): Outputable <span class="keyword">by</span> b</div><div class="line"><span class="comment">// 接口被委托后，还可以重写方法，重写后，就会调用自己重新的方法了</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span></span>(b: DefaultOutput): Outputable <span class="keyword">by</span> b &#123;</div><div class="line">    <span class="comment">// 重写被委托的方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        javax.swing.JOptionPane . showMessageDialog(<span class="literal">null</span>, msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 属性委托</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyDelegation</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: String <span class="keyword">by</span> MyDelegation()</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegation</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _backValue = <span class="string">"默认值"</span></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">PropertyDelegation</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</div><div class="line">        println(<span class="string">"<span class="subst">$&#123;thisRef&#125;</span>的<span class="subst">$&#123;property.name&#125;</span>属性执行getter方法"</span>)</div><div class="line">        <span class="keyword">return</span> _backValue</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">PropertyDelegation</span>, property: <span class="type">KProperty</span>&lt;*&gt;, newValue: <span class="type">String</span>)</span></span>&#123;</div><div class="line">        println(<span class="string">"<span class="subst">$&#123;thisRef&#125;</span>的<span class="subst">$&#123;property.name&#125;</span>属性执行setter方法"</span>)</div><div class="line">        _backValue = newValue</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Kotlin的异常处理"><a href="#Kotlin的异常处理" class="headerlink" title="Kotlin的异常处理"></a>Kotlin的异常处理</h1><p>关键点：</p><ol><li>与java的区别：Kotlin抛弃了checked异常，所有异常都是runtime异常，可捕获也可不捕获</li><li>finally块里的return语句会导致try catch里的return语句失效</li></ol><h1 id="Kotlin的泛型"><a href="#Kotlin的泛型" class="headerlink" title="Kotlin的泛型"></a>Kotlin的泛型</h1><p>关键点：</p><ol><li>泛型的语法与Java的类似：open class Apple<t>{ }</t></li><li>型变：<ol><li>用处：当实际类型是泛型的子类时，Kotlin使用型变替换了Java的通配符</li><li>分为：声明处型变，类型投影等等，就不详细介绍了，网上有很多资源</li></ol></li></ol><p><strong>与Java的泛型的对比</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java的基本泛型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T</span>&gt; </span>&#123;&#125;</div><div class="line"><span class="comment">// 对应Kotlin的写法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T</span>&gt; </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Java的通配符</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T extends View</span>&gt; </span>&#123;&#125;</div><div class="line"><span class="comment">// 对应Kotlin的写法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">out T: View</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure><h1 id="Kotlin的注解"><a href="#Kotlin的注解" class="headerlink" title="Kotlin的注解"></a>Kotlin的注解</h1><p>流程与Java类似，三个过程：</p><ol><li>注解定义：annotation class Test(val name: String)</li><li>注解使用：@Test(name=“xx”) class MyClass{ } — 注意：属性名为value时，可以省略属性名value</li><li>读取注解：val anArr = Test: :info .annotations</li></ol><p><strong>修饰注解：元注解</strong></p><ol><li>@Retention：注解的保留时间，SOURCE，BINARY，RUNTIME</li><li>@Target：修饰哪些程序单元，即范围。CLASS，FUNCTION，FIELD</li><li>@MustBeDocumented：此注解将会被提取到Api文档里</li><li>@Repeatable：可重复注解</li></ol><h1 id="Kotlin与Java互调的注意点"><a href="#Kotlin与Java互调的注意点" class="headerlink" title="Kotlin与Java互调的注意点"></a>Kotlin与Java互调的注意点</h1><p>看如下例子：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> static String format(String text) &#123;</div><div class="line">        <span class="keyword">return</span> text.isEmpty() ? <span class="literal">null</span> : text;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// kotlin调用此java类的三种方式</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSth</span><span class="params">(text: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    <span class="comment">// 方式一：指定为不为null类型</span></div><div class="line">    <span class="keyword">val</span> f: String = Utils.format(text) <span class="comment">// 能通过编译</span></div><div class="line">    println (<span class="string">"f.len : <span class="subst">$&#123;f.length&#125;</span>"</span>) <span class="comment">// 运行时可能会报错</span></div><div class="line">    </div><div class="line">    <span class="comment">// 方式二：不指定类型，让其做类型推断</span></div><div class="line">    <span class="keyword">val</span> f = Utils.format(text) <span class="comment">// 能通过编译</span></div><div class="line">    println (<span class="string">"f.len : <span class="subst">$&#123;f.length&#125;</span>"</span>) <span class="comment">// 运行时可能会报错</span></div><div class="line">    </div><div class="line">    <span class="comment">// 方式三：指定为可null类型</span></div><div class="line">    <span class="keyword">val</span> f: String? = Utils.format(text) <span class="comment">// 能通过编译</span></div><div class="line">    println (<span class="string">"f.len : <span class="subst">$&#123;f.length&#125;</span>"</span>) <span class="comment">// 编译报错</span></div><div class="line">    println (<span class="string">"f.len : <span class="subst">$&#123;f?.length&#125;</span>"</span>) <span class="comment">// 编译成功，运行时不会报错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>调用方法的正确姿势：（应该养成如下编译习惯）</p><ol><li>了解方法的返回值文档，了解其是否会返回null — 不管是调用Java方法还是Kotlin方法</li><li>变量指定类型，而不是使用推断类型（推断有时不是那么的智能）</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>书籍：疯狂Kotlin讲义</li><li><a href="https://kotlinlang.org/docs/reference/basic-types.html" target="_blank" rel="noopener">Kotlin官方文档</a></li><li><a href="http://blog.oneapm.com/apm-tech/226.html" target="_blank" rel="noopener">深入浅出 Java 8 Lambda 表达式</a></li><li><a href="https://blog.csdn.net/csdnnews/article/details/80746096" target="_blank" rel="noopener">抛弃 Java 改用 Kotlin 的六个月后，我后悔了</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin优势&quot;&gt;&lt;a href=&quot;#Kotlin优势&quot; class=&quot;headerlink&quot; title=&quot;Kotlin优势&quot;&gt;&lt;/a&gt;Kotlin优势&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;更安全，避免NPE（NullPointerException），强制判断再使用&lt;
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://handsomeliuyang.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Largest Number</title>
    <link href="https://handsomeliuyang.github.io/2019/04/26/LeetCodeLargestNumber/"/>
    <id>https://handsomeliuyang.github.io/2019/04/26/LeetCodeLargestNumber/</id>
    <published>2019-04-26T00:42:51.000Z</published>
    <updated>2019-05-05T07:23:51.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a list of non negative integers, arrange them such that they form the largest number.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [10,2]</div><div class="line">Output: &quot;210&quot;</div></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [3,30,34,5,9]</div><div class="line">Output: &quot;9534330&quot;</div></pre></td></tr></table></figure></p><p>Note: The result may be very large, so you need to return a string instead of an integer.</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>看到此题目后的直接思路是：按位排序，再合并为字符串，如[3,30,34,5,9]</p><ol><li>先按首位3, 3, 3, 5, 9排序：[9,5,3,30,34]</li><li>再排序3, 30, 34, 取其第二位排序（如没有第二位，假定与第一位一样）：[34, 3, 30]</li><li>最后的排序结果：[9, 5, 34, 3, 30]</li></ol><p>实现代码的思路: 此思路与基数排序的过程类似，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// 思路：利用基数排序类似的思想排序</span></div><div class="line">        </div><div class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</div><div class="line">            array.add(nums[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ArrayList&lt;Integer&gt; result = RadixSort(array, <span class="number">1</span>);</div><div class="line">        </div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=result.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            buffer.append(result.get(i));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">RadixSort</span><span class="params">(ArrayList&lt;Integer&gt; array, <span class="keyword">int</span> digit)</span></span>&#123;</div><div class="line">        <span class="comment">// 分配桶</span></div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucket = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++)&#123;</div><div class="line">            bucket.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 入桶</span></div><div class="line">        <span class="keyword">int</span> div = <span class="number">10</span> ^ digit;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++)&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> value = array.get(i);</div><div class="line">            <span class="keyword">while</span>(value &gt;= div)&#123;</div><div class="line">                value = value / div;</div><div class="line">            &#125;</div><div class="line">            value = value % <span class="number">10</span>;</div><div class="line">            </div><div class="line">            bucket.get(value).add(array.get(i));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bucket.size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> size = bucket.get(i).size();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">1</span>)&#123;</div><div class="line">                result.add(bucket.get(i).get(<span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">boolean</span> isFinish = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bucket.get(i).size(); j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(bucket.get(i).get(j) &gt; div)&#123;</div><div class="line">                        isFinish = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(isFinish) &#123;</div><div class="line">                    result.addAll(bucket.get(i));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 先递归排序</span></div><div class="line">                    ArrayList&lt;Integer&gt; sorted = RadixSort(bucket.get(i), digit+<span class="number">1</span>);</div><div class="line">                    result.addAll(sorted);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此算法的问题是：无法处理大数据，计算int div = 10 ^ digit;时，很容易出现div越界的问题，虽然也能解决，但复杂程序太大了。</p><p>优化两个数字的比较过程：</p><ol><li>如数字int a, int b</li><li>先转换为String：String aStr, String bStr</li><li>比较：aStrbStr, bStraStr</li></ol><p>剩下的就是一个排序的过程了，有很多排序算法可以选择，这里直接使用Java的Arrays.sort()方法，其里使用快速排序与归并排序，时间复杂度为O(n*logn)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LargestNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span></span>&#123;</div><div class="line">            String order1 = str1+str2;</div><div class="line">            String order2 = str2 + str1;</div><div class="line">            <span class="keyword">return</span> order2.compareTo(order1); <span class="comment">// 此处是重点，要理解compareTo()方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 转换为字符串数组</span></div><div class="line">        String[] numStrs = <span class="keyword">new</span> String[nums.length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</div><div class="line">            numStrs[i] = String.valueOf(nums[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 对字符串数组进行排序</span></div><div class="line">        Arrays.sort(numStrs, <span class="keyword">new</span> LargestNumberComparator());</div><div class="line">        </div><div class="line">        <span class="comment">// 特例：全为0的情况</span></div><div class="line">        <span class="keyword">if</span>(numStrs[<span class="number">0</span>].equals(<span class="string">"0"</span>))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 拼接为字符串输出</span></div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numStrs.length; i++)&#123;</div><div class="line">            buffer.append(numStrs[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given a list of non negative integers, arrange them such that they for
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Flutter在58App上的深度调研</title>
    <link href="https://handsomeliuyang.github.io/2019/04/16/Flutter%E5%9C%A858App%E4%B8%8A%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%B0%83%E7%A0%94/"/>
    <id>https://handsomeliuyang.github.io/2019/04/16/Flutter在58App上的深度调研/</id>
    <published>2019-04-16T03:23:34.000Z</published>
    <updated>2019-04-23T03:18:12.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现在跨平台的框架主要有如下几种：</p><ol><li>ReactNative，Weex</li><li>kotlin-native</li><li>Flutter</li><li>小程序</li><li>Hybrid</li></ol><p>长期来看，跨平台开发一定会是一个趋势，因为其能带来如下好处：</p><ol><li>减少开发成本，提升开发效率</li><li>动态部署，不依赖发版</li></ol><p>但现阶段，框架很多，各有各的优缺点，对于应用开发的RD来说，面临一个框架如何选择的难题。在行业趋势没有真正出现之前，RD应该要勇于去学习，去尝试新框架，学习其设计思想，体验其优势与劣势，找到最适合自己的框架。</p><p>之前对Flutter做过简单应用的尝试（<a href="https://handsomeliuyang.github.io/2018/10/30/Flutter%E5%AE%9E%E7%8E%B0Git%E6%9D%83%E9%99%90%E5%88%86%E9%85%8D%E5%B7%A5%E5%85%B7%E4%B9%8B%E6%97%85/">Flutter实现Git权限分配工具之旅</a>），但不够深入，任何一个框架在没有真正进行深入实践时，根本无法判断其优缺点，为了不浮于表面，人云亦云的去判定Flutter框架，才有了这次的调研：基于Flutter实现58App的首页功能（首页模块是58App相对比较复杂的模块）</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="首页tab框架"><a href="#首页tab框架" class="headerlink" title="首页tab框架"></a>首页tab框架</h2><p><strong>实现效果</strong></p><iframe height="520" width="100%" src="/2019/04/16/Flutter在58App上的深度调研/首页tab框架.gif" frameborder="0" allowfullscreen></iframe><p>在Flutter的Material Widget里，有BottomNavigationBar和TabBar两个类似的效果，但都无法直接使用，改造成本非常的大，最终选择自定义实现底部栏。</p><h3 id="自定义ImageButton-Widget"><a href="#自定义ImageButton-Widget" class="headerlink" title="自定义ImageButton Widget"></a>自定义ImageButton Widget</h3><p>ImageButton的要求：</p><ol><li>支持图片与文本</li><li>支持两种状态：default，active</li><li>不同状态有不同的图片，不同的文本颜色</li></ol><p>实现思路：</p><ol><li>InkResponse Widget实现处理点击事件</li><li>Column布局</li><li>StatelessWidget，通过props来修改状态</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="built_in">double</span> width;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">double</span> height;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> imageAssetName;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> activeImageAssetName;</div><div class="line">    <span class="keyword">final</span> GestureTapCallback onTap;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> text;</div><div class="line">    <span class="keyword">final</span> Color textColor;</div><div class="line">    <span class="keyword">final</span> Color activeTextColor;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> isActive;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> ImageButton(&#123;Key key,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.width,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.height,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.imageAssetName,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.activeImageAssetName,</div><div class="line">        <span class="keyword">this</span>.text,</div><div class="line">        <span class="keyword">this</span>.textColor,</div><div class="line">        <span class="keyword">this</span>.activeTextColor,</div><div class="line">        <span class="keyword">this</span>.onTap,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.isActive</div><div class="line">    &#125;) : <span class="keyword">super</span>(key: key);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> InkResponse(</div><div class="line">            child: Column(</div><div class="line">                mainAxisAlignment: MainAxisAlignment.center,</div><div class="line">                children: &lt;Widget&gt;[</div><div class="line">                    Image.asset(</div><div class="line">                        <span class="keyword">this</span>.isActive ? <span class="keyword">this</span>.activeImageAssetName : <span class="keyword">this</span>.imageAssetName,</div><div class="line">                        width: width,</div><div class="line">                        height: height,</div><div class="line">                        fit: BoxFit.contain</div><div class="line">                    ),</div><div class="line">                    Text(</div><div class="line">                        <span class="keyword">this</span>.text,</div><div class="line">                        style: TextStyle(color: <span class="keyword">this</span>.isActive ? <span class="keyword">this</span>.activeTextColor : <span class="keyword">this</span>.textColor),</div><div class="line">                    )</div><div class="line">                ],</div><div class="line">            ),</div><div class="line">            onTap: onTap,</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="自定义HomeBottomNavigationBar-Widget"><a href="#自定义HomeBottomNavigationBar-Widget" class="headerlink" title="自定义HomeBottomNavigationBar Widget"></a>自定义HomeBottomNavigationBar Widget</h3><p>要求：</p><ol><li>tabItem数量为奇数，中间的发布大小凸出来</li><li>能与TabBarView联动</li></ol><p>实现思路：</p><ol><li>Container Widget设置高度，背景</li><li>Row，Expanded做等分</li><li>Padding设置每个tabItem的paddingTop</li><li>通过TabController实现与TabBarView联动<ol><li>tabController 继承 ChangeNotifier，ChangeNotifier是用于通知观察机制</li><li>_controller.addListener()来监听TabBarView的切换</li><li>_controller.animateTo(i)来通知tab的切换</li></ol></li></ol><p>代码如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter_gallery/wuba_demo/home/publish/publish_home.dart'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'../wuba_ui/button/image_button.dart'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationItem</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> title;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> icon;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">String</span> activeIcon;</div><div class="line"></div><div class="line">    NavigationItem(&#123;</div><div class="line">        <span class="keyword">this</span>.title,</div><div class="line">        <span class="keyword">this</span>.icon,</div><div class="line">        <span class="keyword">this</span>.activeIcon</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeBottomNavigationBar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;NavigationItem&gt; items;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> onTap;</div><div class="line">    <span class="keyword">final</span> TabController controller;</div><div class="line">    <span class="keyword">final</span> Color defaultColor;</div><div class="line">    <span class="keyword">final</span> Color selectColor;</div><div class="line"></div><div class="line">    HomeBottomNavigationBar(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.items,</div><div class="line">        <span class="keyword">this</span>.onTap,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.controller,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.defaultColor,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.selectColor</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    _HomeBottomNavigationBarState createState() =&gt; _HomeBottomNavigationBarState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomeBottomNavigationBarState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomeBottomNavigationBar</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">int</span> _currentIndex;</div><div class="line">    TabController _controller;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line">        _updateTabController();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> didUpdateWidget(HomeBottomNavigationBar oldWidget) &#123;</div><div class="line">        <span class="keyword">super</span>.didUpdateWidget(oldWidget);</div><div class="line">        _updateTabController();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> dispose() &#123;</div><div class="line">        <span class="keyword">if</span> (_controller != <span class="keyword">null</span>) &#123;</div><div class="line">            _controller.removeListener(_handleTabControllerTick);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.dispose();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _handleTabControllerTick() &#123;</div><div class="line">        debugPrint(<span class="string">'_handleTabControllerTick <span class="subst">$&#123;_controller.index&#125;</span>'</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._currentIndex != _controller.index) &#123;</div><div class="line">            setState(() &#123;</div><div class="line">                <span class="keyword">this</span>._currentIndex = _controller.index;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _updateTabController() &#123;</div><div class="line">        <span class="keyword">if</span> (widget.controller == _controller) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 移除老的controller的listener</span></div><div class="line">        <span class="keyword">if</span> (_controller != <span class="keyword">null</span>) &#123;</div><div class="line">            _controller.removeListener(_handleTabControllerTick);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        _controller = widget.controller;</div><div class="line">        <span class="keyword">if</span> (_controller != <span class="keyword">null</span>) &#123;</div><div class="line">            _controller.addListener(_handleTabControllerTick);</div><div class="line">            _currentIndex = _controller.index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">var</span> children = &lt;Widget&gt;[];</div><div class="line">        <span class="comment">// 添加正常的tab选项</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; widget.items.length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> navigationItem = widget.items[i];</div><div class="line">            children.add(Expanded(</div><div class="line">                flex: <span class="number">1</span>,</div><div class="line">                child: Padding(</div><div class="line">                    padding: EdgeInsets.only(top: <span class="number">15</span>),</div><div class="line">                    child: ImageButton(</div><div class="line">                        width: <span class="number">23</span>,</div><div class="line">                        height: <span class="number">23</span>,</div><div class="line">                        imageAssetName: navigationItem.icon,</div><div class="line">                        activeImageAssetName: navigationItem.activeIcon,</div><div class="line">                        text: navigationItem.title,</div><div class="line">                        textColor: widget.defaultColor,</div><div class="line">                        activeTextColor: widget.selectColor,</div><div class="line">                        isActive: <span class="keyword">this</span>._currentIndex == i,</div><div class="line">                        onTap:  () &#123;</div><div class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>._controller != <span class="keyword">null</span>) &#123;</div><div class="line">                                <span class="keyword">this</span>._controller.animateTo(i);</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (widget.onTap != <span class="keyword">null</span>) &#123;</div><div class="line">                                widget.onTap(i);</div><div class="line">                            &#125;</div><div class="line">                        &#125;,</div><div class="line">                    ),</div><div class="line">                )</div><div class="line">            ));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 添加发布item</span></div><div class="line">        children.insert(<span class="number">2</span>, Expanded(</div><div class="line">            flex: <span class="number">1</span>,</div><div class="line">            child: ImageButton(</div><div class="line">                width: <span class="number">40</span>,</div><div class="line">                height: <span class="number">40</span>,</div><div class="line">                imageAssetName: <span class="string">'assets/images/home/wb_home_tab_publish_img.png'</span>,</div><div class="line">                activeImageAssetName: <span class="string">''</span>,</div><div class="line">                text: <span class="string">'发布'</span>,</div><div class="line">                textColor: widget.defaultColor,</div><div class="line">                isActive: <span class="keyword">false</span>,</div><div class="line">                onTap: ()&#123;</div><div class="line">                    Navigator.push(context, PageRouteBuilder(</div><div class="line">                        transitionDuration: <span class="built_in">Duration</span>(),</div><div class="line">                        pageBuilder: (BuildContext context, Animation&lt;<span class="built_in">double</span>&gt; animation, Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation)&#123;</div><div class="line">                            <span class="keyword">return</span> PublishHome();</div><div class="line">                        &#125;</div><div class="line">                    ));</div><div class="line">                &#125;,</div><div class="line">            ),</div><div class="line">        ));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Container(</div><div class="line">            height: <span class="number">63</span>,</div><div class="line">            decoration: BoxDecoration(</div><div class="line">                image: DecorationImage(</div><div class="line">                    image: AssetImage(<span class="string">'assets/images/home/wb_tab_bg.png'</span>),</div><div class="line">                    fit: BoxFit.fill</div><div class="line">                )</div><div class="line">            ),</div><div class="line">            child: Row(</div><div class="line">                crossAxisAlignment: CrossAxisAlignment.stretch,</div><div class="line">                children: children,</div><div class="line">            )</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="首页tab"><a href="#首页tab" class="headerlink" title="首页tab"></a>首页tab</h3><p>实现思路：</p><ol><li>Stack Positioned实现叠层布局，解决tabbar凸起部份覆盖在TabBarView上</li><li>TabBarView Widget实现类似ViewPager效果</li></ol><p>代码如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'home_bottom_navigation_bar.dart'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'package:wubarn_plugin/wuba_rn_view.dart'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> routeName = <span class="string">'/wuba/home'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> HomeDemo(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    _HomeDemoState createState() =&gt; _HomeDemoState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomeDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomeDemo</span>&gt;</span></div><div class="line">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> &#123;</div><div class="line"></div><div class="line">    <span class="built_in">List</span>&lt;NavigationItem&gt; _navigationViews;</div><div class="line">    TabController controller;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line"></div><div class="line">        _navigationViews = &lt;NavigationItem&gt;[</div><div class="line">            NavigationItem(</div><div class="line">                icon: <span class="string">'assets/images/home/wb_home_tap_index_normal.png'</span>,</div><div class="line">                activeIcon: <span class="string">'assets/images/home/wb_home_tap_index_pressed.png'</span>,</div><div class="line">                title: <span class="string">'首页'</span>,</div><div class="line">            ),</div><div class="line">            NavigationItem(</div><div class="line">                icon: <span class="string">'assets/images/home/wb_home_tap_history_normal.png'</span>,</div><div class="line">                activeIcon: <span class="string">'assets/images/home/wb_home_tap_history_pressed.png'</span>,</div><div class="line">                title: <span class="string">'部落'</span>,</div><div class="line">            ),</div><div class="line">            NavigationItem(</div><div class="line">                icon: <span class="string">'assets/images/home/wb_home_tap_message_normal.png'</span>,</div><div class="line">                activeIcon: <span class="string">'assets/images/home/wb_home_tap_message_pressed.png'</span>,</div><div class="line">                title: <span class="string">'消息'</span>,</div><div class="line">            ),</div><div class="line">            NavigationItem(</div><div class="line">                icon: <span class="string">'assets/images/home/wb_home_tap_center_normal.png'</span>,</div><div class="line">                activeIcon: <span class="string">'assets/images/home/wb_home_tap_center_pressed.png'</span>,</div><div class="line">                title: <span class="string">'我的'</span>,</div><div class="line">            )</div><div class="line">        ];</div><div class="line"></div><div class="line">        controller = TabController(</div><div class="line">            initialIndex: <span class="number">2</span>, length: <span class="keyword">this</span>._navigationViews.length, vsync: <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> Scaffold(</div><div class="line">            body: Stack(</div><div class="line">                children: &lt;Widget&gt;[</div><div class="line">                    Positioned(</div><div class="line">                        top: <span class="number">0</span>,</div><div class="line">                        left: <span class="number">0</span>,</div><div class="line">                        right: <span class="number">0</span>,</div><div class="line">                        bottom: <span class="number">50</span>,</div><div class="line">                        child: TabBarView(</div><div class="line">                            controller: controller,</div><div class="line">                            children: &lt;Widget&gt;[</div><div class="line">                                Container(</div><div class="line">                                    color: Colors.red,</div><div class="line">                                    child: Text(<span class="string">'Fragment'</span>),</div><div class="line">                                ),</div><div class="line">                                Container(</div><div class="line">                                    child: WubaRNView(),</div><div class="line">                                ),</div><div class="line">                                Container(</div><div class="line">                                    color: Colors.white,</div><div class="line">                                    child: Text(<span class="string">'Fragment'</span>),</div><div class="line">                                ),</div><div class="line">                                Container(</div><div class="line">                                    color: Colors.yellow,</div><div class="line">                                    child: Text(<span class="string">'Fragment'</span>),</div><div class="line">                                )</div><div class="line">                            ]</div><div class="line">                        ),</div><div class="line">                    ),</div><div class="line">                    Positioned(</div><div class="line">                        left: <span class="number">0</span>,</div><div class="line">                        right: <span class="number">0</span>,</div><div class="line">                        bottom: <span class="number">0</span>,</div><div class="line">                        height: <span class="number">63</span>,</div><div class="line">                        child: HomeBottomNavigationBar(</div><div class="line">                            items: <span class="keyword">this</span>._navigationViews,</div><div class="line">                            controller: <span class="keyword">this</span>.controller,</div><div class="line">                            defaultColor: Colors.black,</div><div class="line">                            selectColor: Colors.red,</div><div class="line">                        ),</div><div class="line">                    )</div><div class="line">                ],</div><div class="line">            ),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="内嵌ReactNative"><a href="#内嵌ReactNative" class="headerlink" title="内嵌ReactNative"></a>内嵌ReactNative</h3><p>实现思路：</p><ol><li>通过独立的Flutter Plugin实现</li><li>ReactNative的ReactRootView可以被嵌入Native中，那同样可以被嵌入Flutter中</li><li>Flutter的AndroidView只有两个状态：create，dispose。在这两个状态里，执行ReactNative相关的生命周期函数</li></ol><p>dart部分：创建对应的Widget<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WubaRNView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    _WubaRNViewState createState() =&gt; _WubaRNViewState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WubaRNViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">WubaRNView</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="comment">// 不同的端，其通信方式不一样</span></div><div class="line">        <span class="keyword">if</span> (defaultTargetPlatform == TargetPlatform.android) &#123;</div><div class="line">            <span class="keyword">return</span> AndroidView(</div><div class="line">                viewType: <span class="string">'plugins.wuba.com/wubarnview'</span>,</div><div class="line">                onPlatformViewCreated: _onPlatformViewCreated,</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Text(</div><div class="line">            <span class="string">'$defaultTargetPlatform is not yet supported by the WubaRNView plugin'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _onPlatformViewCreated(<span class="built_in">int</span> id) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Android的实现：</p><ol><li><p>注册ViewFactory</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WubarnPlugin</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIEW_TYPE = <span class="string">"plugins.wuba.com/wubarnview"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** Plugin registration. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWith</span><span class="params">(Registrar registrar)</span> </span>&#123;</div><div class="line">        registrar.platformViewRegistry().registerViewFactory(VIEW_TYPE, <span class="keyword">new</span> WubarnViewFactory(registrar.messenger()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>通过ViewFactory创建WubarnView</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WubarnViewFactory</span> <span class="keyword">extends</span> <span class="title">PlatformViewFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BinaryMessenger messenger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WubarnViewFactory</span><span class="params">(BinaryMessenger messenger)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(StandardMessageCodec.INSTANCE);</div><div class="line">        <span class="keyword">this</span>.messenger = messenger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformView <span class="title">create</span><span class="params">(Context context, <span class="keyword">int</span> id, Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WubarnView(context, messenger, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>WubarnView的具体实现</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WubarnView</span> <span class="keyword">implements</span> <span class="title">PlatformView</span>, <span class="title">MethodChannel</span>.<span class="title">MethodCallHandler</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WubarnView</span><span class="params">(Context context, BinaryMessenger messenger, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        MethodChannel methodChannel = <span class="keyword">new</span> MethodChannel(messenger, WubarnPlugin.VIEW_TYPE + <span class="string">"_"</span> + id);</div><div class="line">        methodChannel.setMethodCallHandler(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// ReactNative的创建及初始化，设置其默认加载的bundle名称</span></div><div class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(context);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setApplication((Application) context.getApplicationContext())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModulePath(<span class="string">"index"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(<span class="keyword">false</span>)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        <span class="comment">// 这个"App1"名字一定要和我们在index.js中注册的名字保持一致AppRegistry.registerComponent()</span></div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"App1"</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mReactRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// mReactInstanceManager.onHostPause(mActivity);</span></div><div class="line">        <span class="comment">// mReactInstanceManager.onHostResume(mActivity, null);</span></div><div class="line">        <span class="comment">// mReactInstanceManager.onHostDestroy(mActivity);</span></div><div class="line">        mReactRootView.unmountReactApplication();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall methodCall, MethodChannel.Result result)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (methodCall.method)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">""</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                result.notImplemented();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>上面初始化ReactInstanceManager当中的常量，与React代码是一一对应的</p><ol><li><p>“App1”：与在React里注册的组件名称是一样的</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppRegistry &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'App1'</span>, () =&gt; App);</div></pre></td></tr></table></figure></li><li><p>.setJSMainModulePath(“index”)：JS bundle中主入口的文件名，是React工程里的入口文件index.js的名称</p></li><li>.setBundleAssetName(“index.android.bundle”)：这个是内置到assets目录下的bundle名称，与bundle生成命令有关 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform android --dev false --entry-file index.js --bundle-output /Users/ly/liuyang/workspace_flutter/wubarn_plugin/example/android/app/src/main/assets/index.android.bundle --assets-dest /Users/ly/liuyang/workspace_flutter/wubarn_plugin/example/android/app/src/main/res/</div></pre></td></tr></table></figure></li></ol></li></ol><h2 id="发布入口页"><a href="#发布入口页" class="headerlink" title="发布入口页"></a>发布入口页</h2><p><strong>实现效果</strong></p><iframe height="520" width="100%" src="/2019/04/16/Flutter在58App上的深度调研/发布入口页.gif" frameborder="0" allowfullscreen></iframe><h3 id="切换效果"><a href="#切换效果" class="headerlink" title="切换效果"></a>切换效果</h3><p>实现思路：</p><ol><li>通过PageRoute，去掉切换的动画</li><li>通过AnimatedBuilder，实现旋转动画</li><li>通过WillPopScope Widget拦截返回事件</li></ol><p>Flutter的页面切换是由Navigator管理，其中有一个栈，栈帧是路由，通过PageRoute可以自定义切换的动画，如下去掉切换动画的代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Navigator.push(context, PageRouteBuilder(</div><div class="line">    transitionDuration: <span class="built_in">Duration</span>(), <span class="comment">// 去掉了执行动画的时间</span></div><div class="line">    pageBuilder: (BuildContext context, Animation&lt;<span class="built_in">double</span>&gt; animation, Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation)&#123;</div><div class="line">        <span class="keyword">return</span> PublishHome();</div><div class="line">    &#125;</div><div class="line">));</div></pre></td></tr></table></figure></p><p>由于Flutter是MVVM框架，Flutter里的Animation只负责计算，不负责界面布局与渲染，需要手动调用setState()来让界面重绘，不过可以通过AnimatedBuilder简化流程，但Flutter在实现组合动画比较麻烦。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishHome</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    _PublishHomeState createState() =&gt; _PublishHomeState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PublishHomeState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PublishHome</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</div><div class="line"></div><div class="line">    Animation&lt;<span class="built_in">double</span>&gt; animation;</div><div class="line">    AnimationController controller;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line"></div><div class="line">        controller = AnimationController(duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), vsync: <span class="keyword">this</span>);</div><div class="line">        animation = Tween(begin: <span class="number">0.0</span>, end: <span class="number">45.0</span>).animate(controller);</div><div class="line">        animation.addStatusListener((AnimationStatus status)&#123;</div><div class="line">            <span class="keyword">if</span>(status == AnimationStatus.dismissed) &#123;</div><div class="line">                Navigator.pop(context);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        controller.forward();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> WillPopScope(</div><div class="line">            onWillPop: () <span class="keyword">async</span> &#123;</div><div class="line">                controller.reverse();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;,</div><div class="line">            child: Scaffold(</div><div class="line">                backgroundColor: Colors.white,</div><div class="line">                body: SafeArea(</div><div class="line">                    top: <span class="keyword">true</span>,</div><div class="line">                    child: Stack(</div><div class="line">                        children: &lt;Widget&gt;[</div><div class="line">                            ...</div><div class="line">                            Positioned(</div><div class="line">                                left: <span class="number">0</span>,</div><div class="line">                                right: <span class="number">0</span>,</div><div class="line">                                bottom: <span class="number">0</span>,</div><div class="line">                                height: <span class="number">63</span>,</div><div class="line">                                child: GestureDetector(</div><div class="line">                                    child: Column(</div><div class="line">                                        mainAxisAlignment: MainAxisAlignment.center,</div><div class="line">                                        children: &lt;Widget&gt;[</div><div class="line">                                            AnimatedBuilder(</div><div class="line">                                                animation: <span class="keyword">this</span>.animation,</div><div class="line">                                                builder: (BuildContext context, Widget child)&#123;</div><div class="line">                                                    <span class="keyword">return</span> Transform.rotate(</div><div class="line">                                                        angle: animation.value * math.pi / <span class="number">180.0</span>,</div><div class="line">                                                        child: child,</div><div class="line">                                                    );</div><div class="line">                                                &#125;,</div><div class="line">                                                child: Image.asset(</div><div class="line">                                                    <span class="string">'assets/images/home/wb_home_tab_publish_img.png'</span>,</div><div class="line">                                                    width: <span class="number">40</span>,</div><div class="line">                                                    height: <span class="number">40</span>,</div><div class="line">                                                    fit: BoxFit.contain</div><div class="line">                                                ),</div><div class="line">                                            ),</div><div class="line">                                            Text(</div><div class="line">                                                <span class="string">'发布'</span>,</div><div class="line">                                                style: TextStyle(color: Colors.white),</div><div class="line">                                            )</div><div class="line">                                        ],</div><div class="line">                                    ),</div><div class="line">                                    onTap: ()&#123;</div><div class="line">                                        controller.reverse();</div><div class="line">                                    &#125;,</div><div class="line">                                ),</div><div class="line">                            )</div><div class="line">                        ],</div><div class="line"></div><div class="line">                    ),</div><div class="line">                ),</div><div class="line">            )</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="渐变按钮"><a href="#渐变按钮" class="headerlink" title="渐变按钮"></a>渐变按钮</h3><p>要求：</p><ol><li>不使用图片实现</li><li>背景支持渐变</li><li>不要点击效果</li></ol><p>Material Widget里的四种Button无法满足按钮要求，第三方渐变按钮也无法完全满足要求，通过Container Widget的decoration自定义此Widget：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GradientButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">double</span> width;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">double</span> height;</div><div class="line">    <span class="keyword">final</span> Gradient gradient;</div><div class="line">    <span class="keyword">final</span> Widget child;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> onTap;</div><div class="line">    <span class="keyword">final</span> BorderRadius shapeRadius;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> GradientButton(</div><div class="line">        &#123;Key key, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height, <span class="keyword">this</span>.gradient, <span class="keyword">this</span>.onTap, <span class="keyword">this</span>.shapeRadius, <span class="keyword">this</span>.child&#125;)</div><div class="line">        : <span class="keyword">super</span>(key: key);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> GestureDetector(</div><div class="line">            onTap: <span class="keyword">this</span>.onTap,</div><div class="line">            child: Container(</div><div class="line">                width: <span class="keyword">this</span>.width,</div><div class="line">                height: <span class="keyword">this</span>.height,</div><div class="line">                decoration: BoxDecoration(</div><div class="line">                    gradient: <span class="keyword">this</span>.gradient, <span class="comment">// 设置渐变</span></div><div class="line">                    borderRadius: <span class="keyword">this</span>.shapeRadius <span class="comment">// 设置圆角</span></div><div class="line">                ),</div><div class="line">                child: Center(</div><div class="line">                    child: child,</div><div class="line">                )</div><div class="line">            ),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="部落图片选择控件"><a href="#部落图片选择控件" class="headerlink" title="部落图片选择控件"></a>部落图片选择控件</h2><p><strong>实现效果</strong></p><iframe height="520" width="100%" src="/2019/04/16/Flutter在58App上的深度调研/部落图片选择控件.gif" frameborder="0" allowfullscreen></iframe><h3 id="底部抽屉效果"><a href="#底部抽屉效果" class="headerlink" title="底部抽屉效果"></a>底部抽屉效果</h3><p>要求：</p><ol><li>BottomSheet增加中间态</li><li>有回弹效果</li></ol><p>第三方库RubberBottomSheet实现了此效果，其原理如下：</p><ol><li>通过Stack实现叠加布局</li><li>修改AnimationController的原码，依据lowerBound，upperBound的实现思路，实现halfBound，即中间态</li></ol><p>直接使用RubberBottomSheet的代码非常简单：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TribePublish</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    _TribePublishState createState() =&gt; _TribePublishState();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TribePublishState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TribePublish</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</div><div class="line"></div><div class="line">    RubberAnimationController _controller;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line">        _controller = RubberAnimationController(</div><div class="line">            vsync: <span class="keyword">this</span>,</div><div class="line">            lowerBoundValue: AnimationControllerValue(pixel: <span class="number">54</span>),</div><div class="line">            halfBoundValue: AnimationControllerValue(pixel: <span class="number">300</span>),</div><div class="line">            upperBoundValue: AnimationControllerValue(percentage: <span class="number">1.0</span>),</div><div class="line">            duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> Scaffold(</div><div class="line">            backgroundColor: Colors.white,</div><div class="line">            appBar: AppBar(</div><div class="line">                title: Text(<span class="string">'部落发布'</span>),</div><div class="line">            ),</div><div class="line">            body: RubberBottomSheet(</div><div class="line">                header: _getHeader(),</div><div class="line">                lowerLayer: _getLowerLayer(),</div><div class="line">                upperLayer: _getUpperLayer(),</div><div class="line">                animationController: _controller,</div><div class="line">            )</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="加载并显示相册图片"><a href="#加载并显示相册图片" class="headerlink" title="加载并显示相册图片"></a>加载并显示相册图片</h3><p><strong>加载相册图片</strong></p><ol><li>通过MethodChannel，实现与Native通信，加载相册图片</li><li>在Android里，加载相册图片，需要先授权</li><li>防止相册图片过多，需进行分页加载</li></ol><p>Android端的代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumManagerPlugin</span> <span class="keyword">implements</span> <span class="title">MethodChannel</span>.<span class="title">MethodCallHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWith</span><span class="params">(PluginRegistry registry)</span> </span>&#123;</div><div class="line">        registerWith(registry.registrarFor(<span class="string">"com.wuba.plugins.AlbumManagerPlugin"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWith</span><span class="params">(PluginRegistry.Registrar registrar)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> MethodChannel channel = <span class="keyword">new</span> MethodChannel(registrar.messenger(), <span class="string">"plugins.wuba.com/album_manager"</span>);</div><div class="line">        channel.setMethodCallHandler(<span class="keyword">new</span> AlbumManagerPlugin(registrar.context(), registrar));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * the page size of query albums</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PluginRegistry.Registrar mRegistrar;</div><div class="line">    <span class="keyword">private</span> PermissionsUtils mPermissionsUtils;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumManagerPlugin</span><span class="params">(Context context, PluginRegistry.Registrar registrar)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        mRegistrar = registrar;</div><div class="line">        mPermissionsUtils = <span class="keyword">new</span> PermissionsUtils();</div><div class="line"></div><div class="line">        registrar.addRequestPermissionsResultListener(<span class="keyword">new</span> PluginRegistry.RequestPermissionsResultListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> i, String[] strings, <span class="keyword">int</span>[] ints)</span> </span>&#123;</div><div class="line">                mPermissionsUtils.dealResult(i, strings, ints);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall methodCall, MethodChannel.Result result)</span> </span>&#123;</div><div class="line">        <span class="comment">// 先申请权限</span></div><div class="line">        mPermissionsUtils.setPermissionsListener(<span class="keyword">new</span> PermissionsListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDenied</span><span class="params">(String[] deniedPermissions)</span> </span>&#123;</div><div class="line">                Log.i(<span class="string">"permission"</span>, <span class="string">"onDenied call.method = $&#123;call.method&#125;"</span>);</div><div class="line"></div><div class="line">                result.error(<span class="string">"失败"</span>, <span class="string">"权限被拒绝"</span>, <span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGranted</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (methodCall.method)&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"getAllImage"</span>:</div><div class="line">                        getAllImage(methodCall, result);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        result.notImplemented();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mPermissionsUtils.withActivity(mRegistrar.activity());</div><div class="line">        mPermissionsUtils.getPermissions(mRegistrar.activity(), <span class="number">3001</span>, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAllImage</span><span class="params">(MethodCall methodCall, MethodChannel.Result result)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line"><span class="comment">//        int pageIndex = methodCall.argument("pageIndex");</span></div><div class="line">        <span class="keyword">int</span> pageIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"liuyang"</span>, <span class="string">""</span> + methodCall.argument(<span class="string">"pageIndex"</span>));</div><div class="line"></div><div class="line">        String[] projection = &#123;MediaStore.Images.ImageColumns.DATA, MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME&#125;;</div><div class="line">        String sortOrder = MediaStore.Images.Media.DATE_TAKEN + <span class="string">" DESC limit "</span> + PAGE_SIZE + <span class="string">" offset "</span> + pageIndex * PAGE_SIZE;</div><div class="line">        <span class="comment">//执行分页</span></div><div class="line">        String selection = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//        if (!ALL_PHOTO.equals(s)) &#123;</span></div><div class="line"><span class="comment">//            selection = MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME + " = '" + s + "' ";</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"></div><div class="line">        Cursor cursor = mContext.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class="line">                projection, selection, <span class="keyword">null</span>, sortOrder);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                    <span class="comment">// 获取图片的路径</span></div><div class="line">                    String path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA));</div><div class="line">                    list.add(path);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                result.success(list);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">//            LOGGER.e(TAG, e.toString());</span></div><div class="line">            result.error(<span class="string">"AlbumManagerPlugin"</span>, e.getMessage(), <span class="string">""</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">                cursor.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Flutter端的代码实现：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumManagerPlugin</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _channel = MethodChannel(<span class="string">'plugins.wuba.com/album_manager'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Future&lt;<span class="built_in">List</span>&lt;AssetEntity&gt;&gt; getAllAssetList(<span class="built_in">int</span> pageIndex) <span class="keyword">async</span> &#123;</div><div class="line">        <span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt; map = <span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt;();</div><div class="line">        map[<span class="string">'pageIndex'</span>] = pageIndex;</div><div class="line">        <span class="built_in">List</span>&lt;<span class="keyword">dynamic</span>&gt; paths = <span class="keyword">await</span> _channel.invokeMethod(<span class="string">'getAllImage'</span>, map);</div><div class="line">        <span class="keyword">return</span> _castAsset(paths);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Future&lt;<span class="built_in">List</span>&lt;AssetEntity&gt;&gt; _castAsset(<span class="built_in">List</span>&lt;<span class="keyword">dynamic</span>&gt; paths) <span class="keyword">async</span> &#123;</div><div class="line">        <span class="built_in">List</span>&lt;AssetEntity&gt; result = &lt;AssetEntity&gt;[];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paths.length; i++) &#123;</div><div class="line">            result.add(AssetEntity(path: paths[i]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>细节点：</p><ol><li>Native的扩展能力定义为Plugin，Plugin可以独立发布为一个库，里面即有native代码也有dart代码，不用像ReactNative，需要单独合并native的代码，但带的问题是：dependencies库都是直接原码</li><li>通过MethodChannel进行Flutter与Native通信，可以传递参数，如何传递一组参数了，通过源码分析：Map对象</li></ol><p><strong>分页显示图片</strong></p><ol><li>通过GridView显示图片，实现分页加载</li><li>默认的图片加载策略是LRU，体验与内存表现都很不好</li></ol><p>下面的代码没有实现分页与图片加载策略的优化：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumGrid</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    _AlbumGridState createState() =&gt; _AlbumGridState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AlbumGridState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AlbumGrid</span>&gt; </span>&#123;</div><div class="line">    <span class="built_in">List</span>&lt;AssetEntity&gt; list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;AssetEntity&gt;();</div><div class="line">    <span class="built_in">int</span> currentPage = <span class="number">-1</span>;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line"></div><div class="line">        <span class="comment">// 加载第一页数据</span></div><div class="line">        _initData(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> _initData(<span class="built_in">int</span> nextPage) <span class="keyword">async</span> &#123;</div><div class="line">        <span class="built_in">List</span>&lt;AssetEntity&gt; newPage = <span class="keyword">await</span> AlbumManagerPlugin.getAllAssetList(nextPage);</div><div class="line">        <span class="keyword">this</span>.setState(()&#123;</div><div class="line">            list.addAll(newPage);</div><div class="line">            currentPage = nextPage;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> GridView.builder(</div><div class="line">            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</div><div class="line">                crossAxisCount: <span class="number">4</span>,</div><div class="line">                mainAxisSpacing: <span class="number">4.0</span>,</div><div class="line">                crossAxisSpacing: <span class="number">4.0</span></div><div class="line">            ),</div><div class="line">            padding: EdgeInsets.all(<span class="number">4.0</span>),</div><div class="line">            itemBuilder: _itemBuilder,</div><div class="line">            itemCount: list.length,</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    Widget _itemBuilder(BuildContext context, <span class="built_in">int</span> index) &#123;</div><div class="line">        AssetEntity entity = list[index];</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Image.file(</div><div class="line">            File(entity.path),</div><div class="line">            fit: BoxFit.cover,</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Flutter框架在设计上，整体优于其他跨平台框架，实现使用时，也是非常的方便，有如下感受：</p><ol><li>开发调试非常的快，比Android的instant run强很多，也稳定很多</li><li>dependencies依赖管理比ReactNative强，native扩展能力是一个独立的plugin库，便于管理依赖</li><li>基于MVVM框架，在自定义UI组件及动画方面，结构清楚，容易理解</li><li>实现相同的功能，代码量远小于使用java实现</li></ol><p>由于Flutter的社区不太完善，时间太短，生态不完善，相当于2011年开发Android一样，缺少大量成熟的基础库，大量的基础能力都需要从头到尾开发，下面是上述实践过程中发现的一些点：</p><ol><li>渐变Button，图片Button</li><li>GridView或ListView的图片加载策略（Fling时不加载，scrolling或idle时加载）</li><li>崩溃日志收集</li><li>大量的基础Plugin：加载相册，授权，地图，视频等等</li><li>…</li></ol><p>在已经集成ReactNative的58App里，已经基本满足部分业务的动态能力，再花大量的成本完美Flutter的基础，花大量的成本去推动业务线使用，短期来看，投入产出比太低。</p><p>但从长期来看，在跨平台框架上，我更加看好Flutter，在设计与使用体验上，Flutter确实都优于其他框架，但Flutter最终能否成为主流，还是要看Google的推广力度。</p><p>持续关注跨平台框架的动态，ReactNative也在向Flutter学习，改进其性能差的一面，Flutter的基础库也在不断的完善中</p><p>此demo的代码：<a href="https://github.com/handsomeliuyang/wuba_gallery" target="_blank" rel="noopener">wuba_gallery</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.devio.org/2018/08/26/React-Native-Hybrid-Android/" target="_blank" rel="noopener">React Native 混合开发(Android篇)</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;现在跨平台的框架主要有如下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ReactNative，Weex&lt;/li&gt;
&lt;li&gt;kotlin-native&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>百度小程序源码解读</title>
    <link href="https://handsomeliuyang.github.io/2019/02/25/%E7%99%BE%E5%BA%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://handsomeliuyang.github.io/2019/02/25/百度小程序源码解读/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-02-26T02:34:32.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p>百度小程序的开发Api，加构设计与微信小程序基本一致。</p><p>为了提升整体性能，充分利用手机的多CPU性能：</p><ol><li>把逻辑层与渲染层分离，分别位于不同的运行容器</li><li>异步请求都由native来执行</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/百度小程序源码解读/整体框架2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>逻辑层<ol><li>逻辑层就是对开发者所暴露的Api，有App，Page，布局文件，其中的App，Page都是两个函数</li><li>App()函数的处理：直接创建App对象，全局唯一对象</li><li>Page()函数的处理：保存到Map中，不会马上构建Page对象，当导航到页面时，才会真正创建Page对象</li></ol></li><li>渲染层<ol><li>使用MVVM框架san来渲染界面</li><li>在编译期间把小程序标签转化为san框架所支持的标签</li><li>为每个小程序页面，创建对应的san框架下Page组件，PageComponent的template就是swan.xml转译后的内容</li></ol></li><li>渲染层与逻辑层交互<ol><li>渲染层接收用户的交互事件，由统一的函数处理后，通过消息总线传递到逻辑层的Page对象，再调用对应的函数</li><li>逻辑层依据用户操作，执行业务操作，修改data数据，通过消息总线传递到渲染层的组件里，San.Page组件会自动更新界面</li></ol></li></ol><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>一个简单的百度小程序项目：</p><ol><li>目录结构：<br> <img src="/2019/02/25/百度小程序源码解读/目录结构-src.png" alt=""></li><li><p>App.js的源码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">App(&#123;</div><div class="line">    onLaunch(event) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'onLaunch'</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    onShow(event) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'onShow'</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">globalData</span>: &#123;</div><div class="line">        <span class="attr">userInfo</span>: <span class="string">'user'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>index.js的源码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = [];</div><div class="line">Page(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">"这是一段文字."</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        p.push(<span class="string">"其他文字"</span>);</div><div class="line">        <span class="keyword">this</span>.setData(&#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">"这是一段文字."</span> + p.join(<span class="string">","</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">remove</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(p.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            p.pop();</div><div class="line">            <span class="keyword">this</span>.setData(&#123;</div><div class="line">                <span class="attr">text</span>: <span class="string">"这是一段文字."</span> + p.join(<span class="string">","</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>index.swan的源码：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"text-px text-&#123;&#123;text&#125;&#125;"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bind:tap</span>=<span class="string">"add"</span>&gt;</span>add text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bind:tap</span>=<span class="string">"remove"</span>&gt;</span>remove text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><p>以上的小程序代码，经过编译后的情况：</p><ol><li>目录结构：<br> <img src="/2019/02/25/百度小程序源码解读/目录结构-dist.png" alt=""></li><li><p>App.js的源码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.define(<span class="string">"138"</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n, o, a, i, s, c, r, u, d, l, g, w, f, h</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> p = [];</div><div class="line">        Page(&#123;</div><div class="line">            <span class="attr">data</span>: &#123;</div><div class="line">                <span class="attr">text</span>: <span class="string">"这是一段文字."</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                p.push(<span class="string">"其他文字"</span>);</div><div class="line">                <span class="keyword">this</span>.setData(&#123;</div><div class="line">                    <span class="attr">text</span>: <span class="string">"这是一段文字."</span> + p.join(<span class="string">","</span>)</div><div class="line">                &#125;)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">remove</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                p.length &gt; <span class="number">0</span> &amp;&amp; (p.pop(), <span class="keyword">this</span>.setData(&#123;</div><div class="line">                    <span class="attr">text</span>: <span class="string">"这是一段文字."</span> + p.join(<span class="string">","</span>)</div><div class="line">                &#125;))</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.define(<span class="string">"193"</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n, o, a, i, s, c, r, u, d, l, g, w, f, h</span>) </span>&#123;</div><div class="line">        App(&#123;</div><div class="line">            <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"Lifecycle App onLaunch"</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"Lifecycle App onShow"</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">globalData</span>: &#123;</div><div class="line">                <span class="attr">userInfo</span>: <span class="string">'user'</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.__swanRoute = <span class="string">"app"</span>;</div><div class="line"><span class="built_in">window</span>.usingComponents = [];</div><div class="line"><span class="built_in">require</span>(<span class="string">"193"</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.__swanRoute = <span class="string">"pages/text/text"</span>;</div><div class="line"><span class="built_in">window</span>.usingComponents = [];</div><div class="line"><span class="built_in">require</span>(<span class="string">"138"</span>);</div></pre></td></tr></table></figure></li><li><p>index.swan.js的源码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意，做了一些简化</span></div><div class="line">(<span class="function">(<span class="params">global</span>)=&gt;</span>&#123;</div><div class="line">    global.errorMsg = [];</div><div class="line">    <span class="keyword">var</span> templateComponents = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;&#125;);</div><div class="line">    <span class="keyword">var</span> param = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> filterArr = <span class="built_in">JSON</span>.parse(<span class="string">"[]"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        filterArr &amp;&amp; filterArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">            param[item.module] = <span class="built_in">eval</span>(item.module)</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> pageContent = <span class="string">`</span></div><div class="line">            &lt;view&gt;</div><div class="line">                &lt;view&gt;&#123;&#123;text&#125;&#125;&lt;/view&gt;</div><div class="line">                &lt;button class=\"btn\" type=\"primary\" on-bindtap=\"eventHappen('tap', $event, 'add', '', 'bind')\"&gt;</div><div class="line">                    add text</div><div class="line">                &lt;/button&gt;</div><div class="line">                &lt;button class=\"btn\" type=\"primary\" on-bindtap=\"eventHappen('tap', $event, 'remove', '', 'bind')\"&gt;</div><div class="line">                    remove text</div><div class="line">                &lt;/button&gt;</div><div class="line">            &lt;/view&gt;`;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> renderPage = <span class="function"><span class="keyword">function</span> (<span class="params">filters, modules</span>) </span>&#123;</div><div class="line">            <span class="comment">// 路径与该组件映射</span></div><div class="line">            <span class="comment">// var customAbsolutePathMap = (global.componentFactory.getAllComponents(), &#123;&#125;);</span></div><div class="line"></div><div class="line">            <span class="comment">// 当前页面使用的自定义组件</span></div><div class="line">            <span class="comment">// const pageUsingComponentMap = JSON.parse("&#123;&#125;");</span></div><div class="line"></div><div class="line">            <span class="comment">// 生成该页面引用的自定义组件</span></div><div class="line">            <span class="comment">// const customComponents = Object.keys(pageUsingComponentMap).reduce((customComponents, customName) =&gt; &#123;</span></div><div class="line">            <span class="comment">// customComponents[customName] = customAbsolutePathMap[pageUsingComponentMap[customName]];</span></div><div class="line">            <span class="comment">// return customComponents;</span></div><div class="line">            <span class="comment">// &#125;, &#123;&#125;);</span></div><div class="line">            global.pageRender(pageContent, templateComponents)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        renderPage(filterArr, param);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        global.errorMsg[<span class="string">'execError'</span>] = e;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></li></ol><p>编译总结：</p><ol><li>对template进行转换：<ol><li>标签转换：bind:tap ===&gt; on-bindtap</li><li>事件包装：eventHappen(‘tap’, $event, ‘add’, ‘’, ‘bind’)</li></ol></li><li>对App.js进行包装，提升效率，减少逐一加载流程</li><li>通过渲染模板，生成index.swan.js文件，提升渲染效率</li></ol><h2 id="加载，启动，渲染"><a href="#加载，启动，渲染" class="headerlink" title="加载，启动，渲染"></a>加载，启动，渲染</h2><p>用户点击跳转到小程序后：</p><ol><li>Native的任务：<ol><li>下载小程序.zip文件</li><li>启动两个web运行容器：<ol><li>渲染层webview加载slaves.html</li><li>逻辑层jscore加载master.html</li></ol></li><li>解析小程序app.json，发送’AppReady’事件</li></ol></li><li><p>逻辑层master.js：</p><ol><li><p>监听’AppReady’事件，执行小程序的调起逻辑</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 监听客户端的调起逻辑</div><div class="line"> */</div><div class="line">listenAppReady() &#123;</div><div class="line">    <span class="keyword">this</span>.swaninterface.bind(<span class="string">'AppReady'</span>, event =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'master listener AppReady '</span>, event);</div><div class="line">        swanEvents(<span class="string">'masterActiveStart'</span>);</div><div class="line">        <span class="comment">// 给三方用的，并非给框架用，请保留</span></div><div class="line">        <span class="keyword">this</span>.context.appConfig = event.appConfig;</div><div class="line">        <span class="comment">// 初始化master的入口逻辑</span></div><div class="line">        <span class="keyword">this</span>.initRender(event);</div><div class="line">        <span class="comment">// this.preLoadSubPackage();</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>初始化master的入口逻辑，小程序的每个界面，对应一个Slave对象（与渲染层的slave.js不一样），依据用户打开多个页面，构建一个导航栈，保存在navigator对象里</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化渲染</div><div class="line"> *</div><div class="line"> * @param &#123;Object&#125; initEvent - 客户端传递的初始化事件对象</div><div class="line"> * @param &#123;string&#125; initEvent.appConfig - 客户端将app.json的内容（json字符串）给前端用于处理</div><div class="line"> * @param &#123;string&#125; initEvent.appPath - app在手机上的磁盘位置</div><div class="line"> * @param &#123;string&#125; initEvent.wvID - 第一个slave的id</div><div class="line"> * @param &#123;string&#125; initEvent.pageUrl - 第一个slave的url</div><div class="line"> */</div><div class="line">initRender(initEvent) &#123;</div><div class="line">    <span class="comment">// 设置appConfig</span></div><div class="line">    <span class="keyword">this</span>.navigator.setAppConfig(&#123;</div><div class="line">        ...JSON.parse(initEvent.appConfig),</div><div class="line">        ...&#123;</div><div class="line">            <span class="attr">appRootPath</span>: initEvent.appPath</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    swanEvents(<span class="string">'masterActiveInitRender'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 压入initSlave</span></div><div class="line">    <span class="keyword">this</span>.navigator.pushInitSlave(&#123;</div><div class="line">        <span class="attr">pageUrl</span>: initEvent.pageUrl,</div><div class="line">        <span class="attr">slaveId</span>: +initEvent.wvID,</div><div class="line">        <span class="attr">root</span>: initEvent.root,</div><div class="line">        <span class="attr">preventAppLoad</span>: initEvent.preventAppLoad</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.appPath = initEvent.appPath;</div><div class="line">    swanEvents(<span class="string">'masterActivePushInitslave'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>创建初始化页面的slave后，如果没有预加载，就加载小程序里的app.js文件（注意：是编译后的app.js文件），并发送’slaveLoaded’事件，通知渲染层开始渲染</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化第一个slave</div><div class="line"> * @param &#123;Object&#125; [initParams] - 初始化的参数</div><div class="line"> */</div><div class="line">pushInitSlave(initParams) &#123;</div><div class="line">    ....</div><div class="line">    <span class="comment">// 创建初始化slave</span></div><div class="line">    <span class="keyword">this</span>.initSlave = <span class="keyword">this</span>.createInitSlave(initParams.pageUrl, <span class="keyword">this</span>.appConfig);</div><div class="line"></div><div class="line">    <span class="comment">// slave的init调用</span></div><div class="line">    <span class="keyword">this</span>.initSlave</div><div class="line">        .init(initParams)</div><div class="line">        .then(<span class="function"><span class="params">initRes</span> =&gt;</span> &#123;</div><div class="line">            swanEvents(<span class="string">'masterActiveCreateInitslaveEnd'</span>);</div><div class="line">            <span class="comment">// 入栈</span></div><div class="line">            <span class="keyword">this</span>.history.pushHistory(<span class="keyword">this</span>.initSlave);</div><div class="line">            swanEvents(<span class="string">'masterActivePushInitslaveEnd'</span>);</div><div class="line">            <span class="comment">// 调用slave的onEnqueue生命周期函数</span></div><div class="line">            <span class="keyword">this</span>.initSlave.onEnqueue();</div><div class="line">            swanEvents(<span class="string">'masterActiveOnqueueInitslave'</span>);</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化为第一个页面</div><div class="line"> *</div><div class="line"> * @param &#123;Object&#125; initParams 初始化的配置参数</div><div class="line"> * @return &#123;Promise&#125; 返回初始化之后的Promise流</div><div class="line"> */</div><div class="line">Slave.init(initParams) &#123;</div><div class="line">    <span class="keyword">this</span>.isFirstPage = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span></div><div class="line">        .resolve(initParams)</div><div class="line">        .then(<span class="function"><span class="params">initParams</span> =&gt;</span> &#123;</div><div class="line">            swanEvents(<span class="string">'masterActiveInitAction'</span>);</div><div class="line">            <span class="keyword">if</span> (!!initParams.preventAppLoad) &#123;</div><div class="line">                <span class="keyword">return</span> initParams;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// const loadCommonJs = this.appConfig.splitAppJs</span></div><div class="line">            <span class="comment">// &amp;&amp; !this.appConfig.subPackages</span></div><div class="line">            <span class="comment">// ? 'common.js' : 'app.js';</span></div><div class="line">            <span class="keyword">const</span> loadCommonJs = <span class="string">'app.js'</span>;</div><div class="line">            <span class="keyword">return</span> loader</div><div class="line">                .loadjs(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.appRootPath&#125;</span>/<span class="subst">$&#123;loadCommonJs&#125;</span>`</span>, <span class="string">'masterActiveAppJsLoaded'</span>)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.loadJs.call(<span class="keyword">this</span>, initParams);</div><div class="line">                &#125;);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="params">initParams</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.uri = initParams.pageUrl.split(<span class="string">'?'</span>)[<span class="number">0</span>];</div><div class="line">            <span class="keyword">this</span>.accessUri = initParams.pageUrl;</div><div class="line">            <span class="keyword">this</span>.slaveId = initParams.slaveId;</div><div class="line">            <span class="comment">// init的事件为客户端处理，确保是在slave加载完成之后，所以可以直接派发</span></div><div class="line">            <span class="keyword">this</span>.swaninterface.communicator.fireMessage(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">`slaveLoaded<span class="subst">$&#123;<span class="keyword">this</span>.slaveId&#125;</span>`</span>,</div><div class="line">                <span class="attr">message</span>: &#123;<span class="attr">slaveId</span>: <span class="keyword">this</span>.slaveId&#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> initParams;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>执行slave入栈后的生命周期函数this.initSlave.onEnqueue(); 在此函数里，会真正Page Instance，同时监听到渲染层准备好后，发送’initData’事件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈之后的生命周期方法</div><div class="line"> *</div><div class="line"> * @return &#123;Object&#125; 入栈之后，创建的本slave的页面实例对象</div><div class="line"> */</div><div class="line">onEnqueue() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.createPageInstance();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建页面实例，并且，当slave加载完成之后，向slave传递初始化data</div><div class="line"> *</div><div class="line"> * @return &#123;Promise&#125; 创建完成的事件流</div><div class="line"> */</div><div class="line">createPageInstance() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isCreated()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">    &#125;</div><div class="line">    swanEvents(<span class="string">'masterActiveCreatePageFlowStart'</span>, &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="keyword">this</span>.uri</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> userPageInstance = createPageInstance(<span class="keyword">this</span>.accessUri, <span class="keyword">this</span>.slaveId, <span class="keyword">this</span>.appConfig);</div><div class="line">    <span class="keyword">const</span> query = userPageInstance.privateProperties.accessUri.split(<span class="string">'?'</span>)[<span class="number">1</span>];</div><div class="line">    <span class="keyword">this</span>.setUserPageInstance(userPageInstance);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        swanEvents(<span class="string">'masterPageOnLoadHookStart'</span>);</div><div class="line">        userPageInstance._onLoad(getParams(query));</div><div class="line">        swanEvents(<span class="string">'masterPageOnLoadHookEnd'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// avoid empty state</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.status = STATUS_MAP.CREATED;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Master 监听 slaveLoaded 事件，slaveId=<span class="subst">$&#123;<span class="keyword">this</span>.slaveId&#125;</span>`</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.swaninterface.invoke(<span class="string">'loadJs'</span>, &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="keyword">this</span>.uri,</div><div class="line">        <span class="attr">eventObj</span>: &#123;</div><div class="line">            <span class="attr">wvID</span>: <span class="keyword">this</span>.slaveId</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="params">params</span> =&gt;</span> &#123;</div><div class="line">            swanEvents(<span class="string">'masterActiveCreatePageFlowEnd'</span>);</div><div class="line">            swanEvents(<span class="string">'masterActiveSendInitdataStart'</span>);</div><div class="line">            userPageInstance.privateMethod</div><div class="line">                .sendInitData.call(userPageInstance, <span class="keyword">this</span>.appConfig);</div><div class="line">            swanEvents(<span class="string">'masterActiveSendInitdataEnd'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol></li><li><p>渲染层slave.js</p><ol><li><p>监听’PageReady’事件，加载对应页面的文件：app.css，index.css，index.swan.js文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 监听pageReady，触发整个入口的调起</div><div class="line"> * @param &#123;Object&#125; [global] 全局对象</div><div class="line"> */</div><div class="line">listenPageReady(global) &#123;</div><div class="line">    swanEvents(<span class="string">'slavePreloadListened'</span>);</div><div class="line">    <span class="comment">// 控制是否开启预取initData的开关</span></div><div class="line">    <span class="keyword">let</span> advancedInitDataSwitch = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">this</span>.swaninterface.bind(<span class="string">'PageReady'</span>, event =&gt; &#123;</div><div class="line">        swanEvents(<span class="string">'slaveActiveStart'</span>, &#123;</div><div class="line">            <span class="attr">pageInitRenderStart</span>: <span class="built_in">Date</span>.now() + <span class="string">''</span></div><div class="line">        &#125;);</div><div class="line">        ...</div><div class="line">        const appPath = event.appPath;</div><div class="line">        <span class="keyword">const</span> pagePath = event.pagePath.split(<span class="string">'?'</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">const</span> onReachBottomDistance = event.onReachBottomDistance;</div><div class="line">        ...</div><div class="line">        let loadUserRes = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// 设置页面的基础路径为当前页面本应所在的路径</span></div><div class="line">            <span class="comment">// 行内样式等使用相对路径变成此值</span></div><div class="line">            <span class="comment">// setPageBasePath(`$&#123;appPath&#125;/$&#123;pagePath&#125;`);</span></div><div class="line">            swanEvents(<span class="string">'slaveActivePageLoadStart'</span>);</div><div class="line">            <span class="comment">// 加载用户的资源</span></div><div class="line">            <span class="built_in">Promise</span>.all([</div><div class="line">                loader.loadcss(<span class="string">`<span class="subst">$&#123;appPath&#125;</span>/app.css`</span>, <span class="string">'slaveActiveAppCssLoaded'</span>),</div><div class="line">                loader.loadcss(<span class="string">`<span class="subst">$&#123;appPath&#125;</span>/<span class="subst">$&#123;pagePath&#125;</span>.css`</span>, <span class="string">'slaveActivePageCssLoaded'</span>)</div><div class="line">            ])</div><div class="line">                .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.warn(<span class="string">'加载css资源出现问题，请检查css文件'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// todo: 兼容天幕，第一个等天幕同步后，干掉</span></div><div class="line">                    swanEvents(<span class="string">'slaveActiveCssLoaded'</span>);</div><div class="line">                    swanEvents(<span class="string">'slaveActiveSwanJsStart'</span>);</div><div class="line">                    loader.loadjs(<span class="string">`<span class="subst">$&#123;appPath&#125;</span>/<span class="subst">$&#123;pagePath&#125;</span>.swan.js`</span>, <span class="string">'slaveActiveSwanJsLoaded'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// (event.devhook === 'true' ? loadHook().then(loadUserRes).catch(loadUserRes) : loadUserRes());</span></div><div class="line">        loadUserRes();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在每个页面编译后的xxx.swan.js文件里，会执行pageRender()函数，进行界面渲染，如此demo里的index.swan.js文件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">(<span class="function">(<span class="params">global</span>)=&gt;</span>&#123;</div><div class="line">    global.errorMsg = [];</div><div class="line">    <span class="keyword">var</span> templateComponents = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;&#125;);</div><div class="line">    <span class="keyword">var</span> param = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> filterArr = <span class="built_in">JSON</span>.parse(<span class="string">"[]"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        filterArr &amp;&amp; filterArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">            param[item.module] = <span class="built_in">eval</span>(item.module)</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> pageContent = <span class="string">`</span></div><div class="line">            &lt;div class=\"wrap\"&gt;</div><div class="line">                &lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</div><div class="line">                &lt;button class=\"btn\" type=\"primary\" v-on:click=\"eventHappen('tap', $event, 'add', '', 'bind')\"&gt;</div><div class="line">                    add text</div><div class="line">                &lt;/button&gt;</div><div class="line">                &lt;button class=\"btn\" type=\"primary\" v-on:click=\"eventHappen('tap', $event, 'remove', '', 'bind')\"&gt;</div><div class="line">                    remove text</div><div class="line">                &lt;/button&gt;</div><div class="line">            &lt;/div&gt;`;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> renderPage = <span class="function"><span class="keyword">function</span> (<span class="params">filters, modules</span>) </span>&#123;</div><div class="line">            ...</div><div class="line">            global.pageRender(pageContent, templateComponents)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        renderPage(filterArr, param);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        global.errorMsg[<span class="string">'execError'</span>] = e;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></li><li><p>global.pageRender()函数是在slave.js文件里定义的方法，其内部的逻辑就是创建对应的san框架里的Page组件，等待初始化数据过来后，再绑定到界面上</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 注册所有components(也包括顶层components -- page)</div><div class="line"> */</div><div class="line">registerComponents() &#123;</div><div class="line">    ...</div><div class="line">    global.pageRender = <span class="function">(<span class="params">pageTemplate, templateComponents, customComponents, filters, modules</span>) =&gt;</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// 定义当前页面的组件</span></div><div class="line">        componentFactory.componentDefine(</div><div class="line">            <span class="string">'page'</span>,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">template</span>: <span class="string">`&lt;swan-page tabindex="-1"&gt;<span class="subst">$&#123;pageTemplate&#125;</span>&lt;/swan-page&gt;`</span>,</div><div class="line">                <span class="attr">superComponent</span>: <span class="string">'super-page'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">classProperties</span>: &#123;</div><div class="line">                    <span class="attr">components</span>: &#123;...componentFactory.getComponents(), ...templateComponents, ...customComponents&#125;,</div><div class="line">                    <span class="attr">filters</span>: &#123;</div><div class="line">                        ...filtersObj</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">        swanEvents(<span class="string">'slaveActiveDefineComponentPage'</span>);</div><div class="line">        <span class="comment">// 获取page的组件类</span></div><div class="line">        <span class="keyword">const</span> Page = global.componentFactory.getComponents(<span class="string">'page'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 初始化页面对象</span></div><div class="line">        <span class="keyword">const</span> page = <span class="keyword">new</span> Page();</div><div class="line">        swanEvents(<span class="string">'slaveActiveConstructUserPage'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 调用页面对象的加载完成通知</span></div><div class="line">        page.slaveLoaded();</div><div class="line">        swanEvents(<span class="string">'slaveActiveUserPageSlaveloaded'</span>);</div><div class="line">        <span class="comment">// 用于记录用户模板代码在开始执行到监听initData事件之前的耗时</span></div><div class="line">        global.FeSlaveSwanJsInitEnd = <span class="built_in">Date</span>.now();</div><div class="line"></div><div class="line">        <span class="comment">// 监听等待initData，进行渲染</span></div><div class="line">        page.communicator.onMessage(<span class="string">'initData'</span>, params =&gt; &#123;</div><div class="line">            swanEvents(<span class="string">'slaveActiveReceiveInitData'</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 根据master传递的data，设定初始数据，并进行渲染</span></div><div class="line">                page.setInitData(params);</div><div class="line">                swanEvents(<span class="string">'slaveActiveRenderStart'</span>);</div><div class="line"></div><div class="line">                <span class="comment">// 真正的页面渲染，发生在initData之后</span></div><div class="line">                <span class="comment">// 此处让页面真正挂载处于自定义组件成功引用其他自定义组件之后,</span></div><div class="line">                <span class="comment">// 引用其它自定义组件是在同一时序promise.resolve().then里执行, 故此处attach时, 自定义组件已引用完成</span></div><div class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    page.attach(<span class="built_in">document</span>.body);</div><div class="line">                    <span class="comment">// 通知master加载首屏之后的逻辑</span></div><div class="line">                    page.communicator.sendMessage(</div><div class="line">                        <span class="string">'master'</span>, &#123;</div><div class="line">                            <span class="attr">type</span>: <span class="string">'slaveAttached'</span>,</div><div class="line">                            <span class="attr">slaveId</span>: page.slaveId</div><div class="line">                        &#125;</div><div class="line">                    );</div><div class="line">                    swanEvents(<span class="string">'slaveActivePageAttached'</span>);</div><div class="line">                &#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (e) &#123;</div><div class="line">                <span class="built_in">console</span>.log(e);</div><div class="line">                global.errorMsg[<span class="string">'renderError'</span>] = e;</div><div class="line">            &#125;</div><div class="line">        &#125;, &#123;<span class="attr">listenPreviousEvent</span>: <span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>当界面渲染后，发送’slaveAttached’事件，逻辑层执行onShow()生命周期函数</p></li></ol></li></ol><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><ol><li><p>当用户点击界面上的button按钮时，会触发san.Page组件里的eventHappen()函数，发送’event’事件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行用户绑定的事件</div><div class="line"> *</div><div class="line"> * @param &#123;string&#125; eventName 事件名称</div><div class="line"> * @param &#123;Object&#125; $event 事件对象</div><div class="line"> * @param &#123;Function&#125; reflectMethod 用户回调方法</div><div class="line"> * @param &#123;boolean&#125; capture 是否事件捕获</div><div class="line"> * @param &#123;boolean&#125; catchType 是否终止事件执行</div><div class="line"> * @param &#123;Object&#125; customEventParams 用户绑定的事件集合</div><div class="line"> */</div><div class="line">eventHappen: <span class="function"><span class="keyword">function</span>(<span class="params">eventName, $event, reflectMethod, capture, catchType, customEventParams</span>) </span>&#123;</div><div class="line">    swanEvents(<span class="string">'slaveEventHappen'</span>, &#123;</div><div class="line">        <span class="attr">eventName</span>: eventName,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($event &amp;&amp; catchType === <span class="string">'catch'</span>) &#123;</div><div class="line">        $event.stopPropagation &amp;&amp; $event.stopPropagation();</div><div class="line">        (eventName === <span class="string">'touchstart'</span> || eventName === <span class="string">'touchmove'</span>)</div><div class="line">        &amp;&amp; $event.preventDefault &amp;&amp; $event.preventDefault();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.$communicator.sendMessage(</div><div class="line">        <span class="string">'master'</span>,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'event'</span>,</div><div class="line">            <span class="attr">value</span>: &#123;</div><div class="line">                <span class="attr">eventType</span>: eventName,</div><div class="line">                reflectMethod,</div><div class="line">                <span class="attr">e</span>: $event, <span class="comment">//eventProccesser(eventName, $event)</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">slaveId</span>: <span class="keyword">this</span>.slaveId,</div><div class="line">            customEventParams</div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>逻辑层master.js监听’event’事件后，执行对应Page里的对应函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 绑定开发者绑定的events</div><div class="line"> */</div><div class="line">bindDeveloperEvents() &#123;</div><div class="line">    <span class="keyword">this</span>.slaveCommunicator.onMessage(<span class="string">'event'</span>, event =&gt; &#123;</div><div class="line">        swanEvents(<span class="string">'masterListenEvent'</span>, event);</div><div class="line"></div><div class="line">        <span class="keyword">const</span> eventOccurredPageObject = <span class="keyword">this</span>.history.seek(event.slaveId).getUserPageInstance();</div><div class="line">        <span class="comment">// if (event.customEventParams) &#123;</span></div><div class="line">        <span class="comment">//     const nodeId = event.customEventParams.nodeId;</span></div><div class="line">        <span class="comment">//     const reflectComponent = eventOccurredPageObject</span></div><div class="line">        <span class="comment">//         .privateProperties.customComponents[nodeId];</span></div><div class="line">        <span class="comment">//     if (reflectComponent[event.value.reflectMethod]) &#123;</span></div><div class="line">        <span class="comment">//         reflectComponent[event.value.reflectMethod]</span></div><div class="line">        <span class="comment">//             .call(reflectComponent, event.value.e);</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">        <span class="comment">// else</span></div><div class="line">        <span class="keyword">if</span> (eventOccurredPageObject[event.value.reflectMethod]) &#123;</div><div class="line">            eventOccurredPageObject[event.value.reflectMethod]</div><div class="line">                .call(eventOccurredPageObject, event.value.e);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>当逻辑层master，执行this.setData()函数更新界面时，会发送’setData’事件，渲染层slave.js会监听此事件，进行界面更新</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 逻辑层Page对象</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 页面中挂载的setData操作方法，操作后，会传到slave，对视图进行更改</div><div class="line"> *</div><div class="line"> * @param &#123;string|Object&#125; [path] - setData的数据操作路径，或setData的对象&#123;path: value&#125;</div><div class="line"> * @param &#123;*&#125; [value] - setData的操作值</div><div class="line"> * @param &#123;Function&#125; [cb] - setData的回调函数</div><div class="line"> */</div><div class="line">setData(path, value, cb) &#123;</div><div class="line">    <span class="keyword">this</span>.sendDataOperation(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'set'</span>,</div><div class="line">        path,</div><div class="line">        value,</div><div class="line">        cb</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 渲染层</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化事件绑定</div><div class="line"> * @private</div><div class="line"> */</div><div class="line">initMessagebinding: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$communicator.onMessage(</div><div class="line">        [<span class="string">'setData'</span>, <span class="string">'pushData'</span>, <span class="string">'popData'</span>, <span class="string">'unshiftData'</span>, <span class="string">'shiftData'</span>, <span class="string">'removeAtData'</span>, <span class="string">'spliceData'</span>],</div><div class="line">        params =&gt; &#123;</div><div class="line">            swanEvents(<span class="string">'slaveDataEvent'</span>, params);</div><div class="line">            <span class="keyword">const</span> setObject = params.setObject || &#123;&#125;;</div><div class="line">            <span class="keyword">const</span> operationType = params.type.replace(<span class="string">'Data'</span>, <span class="string">''</span>);</div><div class="line">            <span class="keyword">if</span> (operationType === <span class="string">'set'</span>) &#123;</div><div class="line">                <span class="comment">// TODO-ly 此处可以优化，使用Vue效率最高的方案</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> setObject)&#123;</div><div class="line">                    <span class="keyword">this</span>[key] = setObject[key];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;,</div></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/swan-team" target="_blank" rel="noopener">智能小程序</a></li><li><a href="https://github.com/handsomeliuyang/swanvue-core" target="_blank" rel="noopener">swanvue-core</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整体框架&quot;&gt;&lt;a href=&quot;#整体框架&quot; class=&quot;headerlink&quot; title=&quot;整体框架&quot;&gt;&lt;/a&gt;整体框架&lt;/h1&gt;&lt;p&gt;百度小程序的开发Api，加构设计与微信小程序基本一致。&lt;/p&gt;
&lt;p&gt;为了提升整体性能，充分利用手机的多CPU性能：&lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://handsomeliuyang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Merge K Sorted Lists</title>
    <link href="https://handsomeliuyang.github.io/2019/01/23/LeetCodeMergeKSortedLists/"/>
    <id>https://handsomeliuyang.github.io/2019/01/23/LeetCodeMergeKSortedLists/</id>
    <published>2019-01-23T01:34:38.000Z</published>
    <updated>2019-01-25T03:19:07.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given K sorted linked lists of size N each, merge them and print the sorted output.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: k = 3, n =  4</div><div class="line">list1 = 1-&gt;3-&gt;5-&gt;7</div><div class="line">list2 = 2-&gt;4-&gt;6-&gt;8</div><div class="line">list3 = 0-&gt;9-&gt;10-&gt;11</div><div class="line"></div><div class="line">Output: </div><div class="line">0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10-&gt;11</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>此题目还有很多种变种，如不固定每个list的长度。不管如何变化，其算法都是一样，选择固定长度的题目，主要是方便时间复杂度的计算</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="Compare-one-by-one"><a href="#Compare-one-by-one" class="headerlink" title="Compare one by one"></a>Compare one by one</h2><p>步骤：</p><ol><li>创建空链表</li><li>比较每个list的head元素，取出最小元素，并移动此list的head元素</li><li>把取出的最小元素链接到空链表里</li></ol><p>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode[] lists)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> minIndex = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lists.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(lists[i] == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(minIndex == -<span class="number">1</span> || lists[i].val &lt; lists[minIndex].val)&#123;</div><div class="line">                minIndex = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> minIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</div><div class="line">        ListNode output = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode outputEnd = output;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="comment">// 比较head大小</span></div><div class="line">            <span class="keyword">int</span> index = compare(lists);</div><div class="line">            <span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> output.next;</div><div class="line">            &#125;</div><div class="line">            outputEnd.next = lists[index];</div><div class="line">            outputEnd = lists[index];</div><div class="line">            lists[index] = lists[index].next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：<ol><li>第一层while循环的次数为： K*N 次</li><li>compare()里的for循环次数 K 次</li><li>时间复杂度为：O(K*N*K)</li></ol></li><li>空间复杂度：O(1)</li></ol><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><p>通过最小堆优化上面的compare()函数，在写代码之前，我们需要了解最小堆的一些特性：</p><ol><li>堆可以用数组来表示</li><li>下标从0开始编号，位置i的元素有如下特性：<ol><li>其parent(i) = (i-1)/2;</li><li>left_child(i) = 2*i + 1;</li><li>right_child(i) = 2*i + 2;</li></ol></li><li>修改顶点元素后，恢复其堆的特性的时间复杂度为：O(logK)</li></ol><p>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeft</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRight</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">minHeapify</span><span class="params">(ListNode[] minHeap, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> size = minHeap.length;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">int</span> min = i;</div><div class="line">            <span class="keyword">int</span> left = getLeft(i);</div><div class="line">            <span class="keyword">int</span> right = getRight(i);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(left &lt; size &amp;&amp; minHeap[left] != <span class="keyword">null</span> &amp;&amp; </div><div class="line">               (minHeap[min] == <span class="keyword">null</span> || minHeap[min].val &gt; minHeap[left].val)) &#123;</div><div class="line">                min = left;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(right &lt; size &amp;&amp; minHeap[right] != <span class="keyword">null</span> &amp;&amp; </div><div class="line">               (minHeap[min] == <span class="keyword">null</span> || minHeap[min].val &gt; minHeap[right].val))&#123;</div><div class="line">                min = right;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(min == i) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            ListNode temp = minHeap[i];</div><div class="line">            minHeap[i] = minHeap[min];</div><div class="line">            minHeap[min] = temp;</div><div class="line">            i = min;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> ListNode[] initMinHeap(ListNode[] lists)&#123;</div><div class="line">        </div><div class="line">        ListNode[] minHeap = lists;</div><div class="line">    </div><div class="line">        <span class="comment">// 遍历所有非叶子结点，构建最小堆</span></div><div class="line">        <span class="keyword">int</span> size = minHeap.length;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(size-<span class="number">1</span>)/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            minHeapify(lists, i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> minHeap;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getMin</span><span class="params">(ListNode[] minHeap)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> minHeap[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceMin</span><span class="params">(ListNode[] minHeap, ListNode node)</span></span>&#123;</div><div class="line">        </div><div class="line">        minHeap[<span class="number">0</span>] = node;</div><div class="line">        </div><div class="line">        minHeapify(minHeap, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(lists.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode output = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode outputEnd = output;</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化最小堆</span></div><div class="line">        ListNode[] minHeap = initMinHeap(lists);</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="comment">// 比较head大小</span></div><div class="line">            ListNode minNode = getMin(minHeap);</div><div class="line">            <span class="keyword">if</span>(minNode == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> output.next;</div><div class="line">            &#125;</div><div class="line">            outputEnd.next = minNode;</div><div class="line">            outputEnd = minNode;</div><div class="line">            </div><div class="line">            replaceMin(minHeap, minNode.next);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(K*N*logK)</li><li>空间复杂度：O(K)</li></ol><h2 id="Divide-And-Conquer-分治法"><a href="#Divide-And-Conquer-分治法" class="headerlink" title="Divide And Conquer(分治法)"></a>Divide And Conquer(分治法)</h2><p>此算法的思路：</p><ol><li>两两分组合并，形成一个新的数组</li><li>再重复步骤1，直到只剩一个元素</li></ol><p>如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/23/LeetCodeMergeKSortedLists/分治法.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>代码省略…</p><p>关键来思考其时间复杂度的计算方法：</p><ol><li>Merging的次数为：logK</li><li>listi, listj合并的时间复杂度为0(n)</li><li>总时间复杂度为=(K/2)*O(N)+(K/2^2)*O(N)+…+(K/2^logK)*O(N)</li><li>假定(K/2^i)*O(N) 约等于 O(K*N)</li><li>总时间复杂度约等于O(K*N*logK)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given K sorted linked lists of size N each, merge them and print the s
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Longest Common Prefix</title>
    <link href="https://handsomeliuyang.github.io/2019/01/11/LeetCodeLongestCommonPrefix/"/>
    <id>https://handsomeliuyang.github.io/2019/01/11/LeetCodeLongestCommonPrefix/</id>
    <published>2019-01-11T01:56:38.000Z</published>
    <updated>2019-01-14T09:08:13.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</div><div class="line">Output: &quot;fl&quot;</div></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</div><div class="line">Output: &quot;&quot;</div><div class="line">Explanation: There is no common prefix among the input strings.</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>此题目非常好理解，就是求最长前缀</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="Vertical-scanning（垂直扫描）"><a href="#Vertical-scanning（垂直扫描）" class="headerlink" title="Vertical scanning（垂直扫描）"></a>Vertical scanning（垂直扫描）</h2><p>最容易想到的解决方案，就是垂直扫描，注意代码的写法：</p><ol><li>不需要额外的空间来保存Prefix字符串</li><li>注意全匹配情况</li></ol><p>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> len = strs[<span class="number">0</span>].length();</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(index &lt; len)&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">char</span> curChar = strs[<span class="number">0</span>].charAt(index);</div><div class="line">            </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;strs.length; i++)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(index &gt;= strs[i].length() || curChar != strs[i].charAt(index))&#123;</div><div class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, index); <span class="comment">// 不用单独出空间保持prefix字符串</span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]; <span class="comment">// 全匹配情况</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(m*n), 其中m表示字符串的长度，n表示字符串的数量</li><li>空间复杂度：O(1)</li></ol><h2 id="Binary-search-二分搜索"><a href="#Binary-search-二分搜索" class="headerlink" title="Binary search(二分搜索)"></a>Binary search(二分搜索)</h2><p>可以通过二分搜索法来查看index下标，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> len = strs[<span class="number">0</span>].length();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> iMin = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> iMax = len;</div><div class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(iMin &lt;= iMax)&#123;</div><div class="line">            </div><div class="line">            index = (iMin+iMax) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(isCommonPrefix(strs, index))&#123;</div><div class="line">                iMin = index + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                iMax = index - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, (iMin+iMax)/<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">        String str1 = strs[<span class="number">0</span>].substring(<span class="number">0</span>, len);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;strs.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!strs[i].startsWith(str1)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意二分搜索法的写法：</p><ol><li>iMin, iMax, index都从1开始，不要从0开始</li><li>最后确定的位置为(iMin + iMax)/2，而不是直接使用index值</li></ol><p>复杂度：</p><ol><li>时间复杂度：由于isCommonPrefix()函数的时间复杂度为O(m<em>n)，二分搜索法的时间复杂度为O(logm), 时间复杂度为O(m</em>n*logm)</li><li>空间复杂度：O(1)</li></ol><h2 id="Trie-Prefix-tree，-前缀树，字典树"><a href="#Trie-Prefix-tree，-前缀树，字典树" class="headerlink" title="Trie(Prefix tree， 前缀树，字典树)"></a>Trie(Prefix tree， 前缀树，字典树)</h2><blockquote><p>Trie这个术语来自于retrieval。根据词源学，trie的发明者Edward Fredkin把它读作英语发音：/ˈtriː/ “tree”。但是，其他作者把它读作英语发音：/ˈtraɪ/ “try”。</p></blockquote><p>由字符串组：{“a”, “to”, “tea”, “ted”, “ten”, “i”, “in”, “inn”}，构建的Trie的结构为：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/11/LeetCodeLongestCommonPrefix/trie.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>从上图可知，trie树的特点：</p><ol><li>根节点不包含字符，除根节点外的每一个子节点都包含一个字符</li><li>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符互不相同</li></ol><p>Trie利用空间换时间，适合解决下述问题：</p><ol><li>频繁求解字符串组的前缀</li><li>有相似前缀的字符串组，如搜索：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/11/LeetCodeLongestCommonPrefix/google搜索.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>对于此问题，如果提前利用字符串组构建Trie，可以提升频繁求前缀的性能，如下case：</p><ol><li>[“flower”,”flow”,”flight”]构建的Trie，其时间复杂度为O(m*n)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/11/LeetCodeLongestCommonPrefix/trie-demo.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>再通过Trie查找公共前缀，时间复杂度为O(m)</li></ol><p>代码如下所示：— 注意：此代码是从leetcode直接拷贝的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String q, String[] strs)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</div><div class="line">         <span class="keyword">return</span> <span class="string">""</span>;  </div><div class="line">    <span class="keyword">if</span> (strs.length == <span class="number">1</span>)</div><div class="line">         <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">    Trie trie = <span class="keyword">new</span> Trie();      </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length ; i++) &#123;</div><div class="line">        trie.insert(strs[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> trie.searchLongestPrefix(q);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// R links to node children</span></div><div class="line">    <span class="keyword">private</span> TrieNode[] links;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">26</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEnd;</div><div class="line"></div><div class="line">    <span class="comment">// number of children non null links</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> ch, TrieNode node)</span> </span>&#123;</div><div class="line">        links[ch -<span class="string">'a'</span>] = node;</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLinks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//assume methods containsKey, isEnd, get, put are implemented as it is described</span></div><div class="line">   <span class="comment">//in  https://leetcode.com/articles/implement-trie-prefix-tree/)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TrieNode root;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</div><div class="line">        root = <span class="keyword">new</span> TrieNode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//assume methods insert, search, searchPrefix are implemented as it is described</span></div><div class="line"><span class="comment">//in  https://leetcode.com/articles/implement-trie-prefix-tree/)</span></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">searchLongestPrefix</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">        TrieNode node = root;</div><div class="line">        StringBuilder prefix = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</div><div class="line">            <span class="keyword">char</span> curLetter = word.charAt(i);</div><div class="line">            <span class="keyword">if</span> (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == <span class="number">1</span>) &amp;&amp; (!node.isEnd())) &#123;</div><div class="line">                prefix.append(curLetter);</div><div class="line">                node = node.get(curLetter);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> prefix.toString();</div><div class="line"></div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> prefix.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Write a function to find the longest common prefix string amongst an a
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Regular Expression Matching</title>
    <link href="https://handsomeliuyang.github.io/2018/12/29/LeetCode-Regular-Expression-Matching/"/>
    <id>https://handsomeliuyang.github.io/2018/12/29/LeetCode-Regular-Expression-Matching/</id>
    <published>2018-12-29T01:50:48.000Z</published>
    <updated>2019-01-06T04:14:50.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*’.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;.&apos; Matches any single character.</div><div class="line">&apos;*&apos; Matches zero or more of the preceding element.</div></pre></td></tr></table></figure></p><p>The matching should cover the entire input string (not partial).</p><p><strong>Note:</strong></p><ul><li>s could be empty and contains only lowercase letters a-z.</li><li>p could be empty and contains only lowercase letters a-z, and characters like . or *.</li></ul><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a&quot;</div><div class="line">Output: false</div><div class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</div></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a*&quot;</div><div class="line">Output: true</div><div class="line">Explanation: &apos;*&apos; means zero or more of the precedeng element, &apos;a&apos;. Therefore, by repeating &apos;a&apos; once, it becomes &quot;aa&quot;.</div></pre></td></tr></table></figure></p><p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;ab&quot;</div><div class="line">p = &quot;.*&quot;</div><div class="line">Output: true</div><div class="line">Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</div></pre></td></tr></table></figure></p><p><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;aab&quot;</div><div class="line">p = &quot;c*a*b&quot;</div><div class="line">Output: true</div><div class="line">Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.</div></pre></td></tr></table></figure></p><p><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;mississippi&quot;</div><div class="line">p = &quot;mis*is*p*.&quot;</div><div class="line">Output: false</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>正则表达式大家都使用过，’.’和’*’都是最长使用的，主要是注意如下几种特殊情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 特殊情况1：</div><div class="line">Input:</div><div class="line">s = &quot;aaa&quot;</div><div class="line">p = &quot;a*a&quot;</div><div class="line">Output: true</div><div class="line"></div><div class="line">// 特殊情况2：</div><div class="line">Input:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a*&quot;</div><div class="line">Output: true</div><div class="line"></div><div class="line">// 特殊情况3：</div><div class="line">Input:</div><div class="line">s = &quot;&quot;</div><div class="line">p = &quot;c*c*&quot;</div><div class="line">Output: true</div><div class="line"></div><div class="line">// 特殊情况4：</div><div class="line">Input:</div><div class="line">s = &quot;&quot;</div><div class="line">p = &quot;.*&quot;</div><div class="line">Output: true</div></pre></td></tr></table></figure></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>可能性太多，最简单的方案是通过递归来解决，匹配都是从左到右逐一匹配，递归函数的关键是两点：</p><ol><li>临界条件</li><li>递归函数</li></ol><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 递归的临界条件，此临界条件把s为空串也考虑进去了</span></div><div class="line">        <span class="keyword">if</span>(p.length() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> s.length() == <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        // 最早写的临界条件，此临界判断，没有考虑两种临界条件：</div><div class="line">        // 1. s = "" p = "c*c*" 2. s = "aaa" p = "a*a"</div><div class="line">        if(s.length() == 0) &#123;</div><div class="line">            return p.length() == 0 || (p.length() == 2 &amp;&amp; p.charAt(1) == '*');</div><div class="line">        &#125;</div><div class="line">        else if(p.length() == 0)&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        **/</div><div class="line">        </div><div class="line">        <span class="comment">// 递归函数</span></div><div class="line">        </div><div class="line">        <span class="comment">// 第一字符判断，考虑到了s为空串的情况</span></div><div class="line">        <span class="keyword">boolean</span> firstMatch = !(s.length() == <span class="number">0</span>) &amp;&amp; (p.charAt(<span class="number">0</span>) == <span class="string">'.'</span> || s.charAt(<span class="number">0</span>) == p.charAt(<span class="number">0</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(p.length() &gt;= <span class="number">2</span> &amp;&amp; p.charAt(<span class="number">1</span>) == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">            之前我的一种写法：</div><div class="line">            return firstMatch ? isMatch(s.substring(1),p) : isMatch(s, p.substring(2))</div><div class="line">            这种写法没有考虑到特殊情况：s = "aaa" p = "a*a"，按我们的临界条件判断，两种情况都应该去尝试，所以都进行尝试</div><div class="line">            **/</div><div class="line">            <span class="keyword">return</span> (firstMatch &amp;&amp; isMatch(s.substring(<span class="number">1</span>), p)) || isMatch(s, p.substring(<span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> firstMatch &amp;&amp; isMatch(s.substring(<span class="number">1</span>), p.substring(<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><p>使用代入法，我自己理解的时间复杂度为O(2^s.length())或O(2^p.length())，官方的时间复杂度与空间复杂度没有理解：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/29/LeetCode-Regular-Expression-Matching/官方复杂度.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划是一种“大转小”解决问题的思想，上面的函数函数，可以理解为状态转移方程，求解一般是把其中小的问题的答案保存起来，减少重复计算。</p><p>条件：</p><ol><li>字符串S, 模式串P</li><li>S[i] 表示字符串：S0,S1,…,Si</li><li>P[j] 表示字符串：P0,P1,…,Pj</li><li>boolean[][] dp; dp[i][j]表示match(S[i], P[j])的匹配结果</li></ol><p>由上面的递归函数得知dp[i][j]的结果可能如下：</p><ol><li>dp[i][j] = (firstMath &amp;&amp; dp[i+1][j]) || dp[i][j+2]; // 当P.charAt(j+1) == ‘*’</li><li>dp[i][j] = firstMatch &amp;&amp; dp[i+1][j+1];</li></ol><p>从上可知，问题是由小问题转大问题，那就逆序遍历S与P，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String S, String P)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[S.length()+<span class="number">1</span>][P.length()+<span class="number">1</span>];</div><div class="line">        dp[S.length()][P.length()] = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=P.length()-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">boolean</span> firstMatch = i&lt;S.length() &amp;&amp; (P.charAt(j) == <span class="string">'.'</span> || S.charAt(i) == P.charAt(j));</div><div class="line">                <span class="keyword">if</span>(j &lt; P.length()-<span class="number">1</span> &amp;&amp; P.charAt(j+<span class="number">1</span>) == <span class="string">'*'</span>)&#123;</div><div class="line">                    dp[i][j] = (firstMatch &amp;&amp; dp[i+<span class="number">1</span>][j]) || dp[i][j+<span class="number">2</span>];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dp[i][j] = firstMatch &amp;&amp; dp[i+<span class="number">1</span>][j+<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(S.length() * P.length())</li><li>空间复杂度：O(S.length() * P.length())</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given an input string (s) and a pattern (p), implement regular express
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Longest Common Substring</title>
    <link href="https://handsomeliuyang.github.io/2018/12/15/Leetcode-longest-common-substring/"/>
    <id>https://handsomeliuyang.github.io/2018/12/15/Leetcode-longest-common-substring/</id>
    <published>2018-12-15T03:00:06.000Z</published>
    <updated>2018-12-15T06:27:34.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given two strings ‘X’ and ‘Y’, find the length of the longest common substring.</p><p><strong>Examples :</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Input : X = &quot;GeeksforGeeks&quot;, y = &quot;GeeksQuiz&quot;</div><div class="line">Output : 5</div><div class="line">The longest common substring is &quot;Geeks&quot; and is of</div><div class="line">length 5.</div><div class="line"></div><div class="line">Input : X = &quot;abcdxyz&quot;, y = &quot;xyzabcd&quot;</div><div class="line">Output : 4</div><div class="line">The longest common substring is &quot;abcd&quot; and is of</div><div class="line">length 4.</div><div class="line"></div><div class="line">Input : X = &quot;zxabcdezy&quot;, y = &quot;yzabcdezx&quot;</div><div class="line">Output : 6</div><div class="line">The longest common substring is &quot;abcdez&quot; and is of</div><div class="line">length 6.</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>求字符串X，Y的公共最长子串，这些子串要求连续性，类似的问题是求公共最长子序列</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>设 m = X.length(), n = Y.length();</p><h2 id="Brute-Force-暴力法"><a href="#Brute-Force-暴力法" class="headerlink" title="Brute Force(暴力法)"></a>Brute Force(暴力法)</h2><p>思路：</p><ol><li><p>遍历所有X的子串，时间复杂度为O(m^2)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(int i=0; i&lt;X.length(); i++)&#123;</div><div class="line">    for(int j=0; j&lt;X.length(); j++)&#123;</div><div class="line">        String sub = X.substring(i, j+1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>求子串是否也是Y的子串，即子串在Y中的位置，可选择KMP算法，时间复杂为O(n)</p></li><li>满足条件的最大长度的子串就是最长公共子串。最终时间复杂度为：O(n * m^2)</li></ol><h2 id="Dynamic-Programming-动态规划"><a href="#Dynamic-Programming-动态规划" class="headerlink" title="Dynamic Programming(动态规划)"></a>Dynamic Programming(动态规划)</h2><p>思路：</p><ol><li>设 X = “abcdxyz”, Y = “xyzabcd”</li><li><p>先求解如下子符串组的公共后缀：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. X_6=&quot;abcdxyz&quot;, Y_6=&quot;xyzabcd&quot; ===&gt; 公共后缀长度：0</div><div class="line">2. ...</div><div class="line">3. X_3=&quot;abcd&quot;, Y_6=&quot;xyzabcd&quot; ===&gt; 公共后缀长度：4</div><div class="line">4. ...</div><div class="line">5. X_0=&quot;a&quot;, Y_0=&quot;x&quot; ===&gt; 公共后缀长度：0</div></pre></td></tr></table></figure></li><li><p>上面所有子符串组的最长公共后缀，就是最长的公共子串：”abcd“</p></li></ol><p>求X，Y的公共最长子串问题，转换为求所有子串的最长公共后缀的问题，公共后缀问题，有如下状态转移方程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">The longest common suffix has following optimal substructure property</div><div class="line">   LCSuff(X, Y, m-1, n-1) = LCSuff(X, Y, m-2, n-2) + 1 if X[m-1] = Y[n-1]</div><div class="line">                        0  Otherwise (if X[m-1] != Y[n-1])</div><div class="line"></div><div class="line">The maximum length Longest Common Suffix is the longest common substring.</div><div class="line">   LCSubStr(X, Y, m-1, n-1)  = Max(LCSuff(X, Y, i, j)) where 1 &lt;= i &lt; m</div><div class="line">                                                     and 1 &lt;= j &lt; n</div></pre></td></tr></table></figure></p><p>代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestCommonSubSequence</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LCSubStr</span><span class="params">(String X, String Y)</span> </span>&#123; </div><div class="line">        <span class="keyword">if</span>(X == <span class="keyword">null</span> || X.length() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(Y == <span class="keyword">null</span> || Y.length() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m = X.length();</div><div class="line">        <span class="keyword">int</span> n = Y.length();</div><div class="line">    </div><div class="line">        <span class="keyword">int</span> LCStuff[][] = <span class="keyword">new</span> <span class="keyword">int</span>[m][n]; </div><div class="line">        <span class="keyword">int</span> maxLCSLen = <span class="number">0</span>;  <span class="comment">// 最长公共后缀长度</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (X[i] == Y[j]) &#123; </div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)&#123;</div><div class="line">                        LCStuff[i][j] = <span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        LCStuff[i][j] = LCStuff[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; </div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    maxLCSLen = Math.max(maxLCSLen, LCStuff[i][j]); </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    LCStuff[i][j] = <span class="number">0</span>; </div><div class="line">                &#125;</div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">return</span> maxLCSLen; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(m * n)</li><li>空间复杂度：O(m * n)</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.geeksforgeeks.org/longest-common-substring-dp-29/" target="_blank" rel="noopener">Longest Common Substring | DP-29</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given two strings ‘X’ and ‘Y’, find the length of the longest common s
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Longest Palindromic Substring</title>
    <link href="https://handsomeliuyang.github.io/2018/12/06/leetcode-longest-palindromic-substring/"/>
    <id>https://handsomeliuyang.github.io/2018/12/06/leetcode-longest-palindromic-substring/</id>
    <published>2018-12-06T02:12:25.000Z</published>
    <updated>2018-12-15T06:30:18.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;babad&quot;</div><div class="line">Output: &quot;bab&quot;</div><div class="line">Note: &quot;aba&quot; is also a valid answer.</div></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;cbbd&quot;</div><div class="line">Output: &quot;bb&quot;</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>求字符串s中，最大的回文子串，具有对称性的字符串称为回文串。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="Brute-Force-暴力破解"><a href="#Brute-Force-暴力破解" class="headerlink" title="Brute Force(暴力破解)"></a>Brute Force(暴力破解)</h2><p>这个思路非常简单，找到字符串s中，所有可能的子串，一一判断其是否是回文串，同时记录最大的回文子串，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromicString</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;j) &#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) != s.charAt(j)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> longestStart = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> longestEnd = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> longestLen = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+longestLen; j&lt;len; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(isPalindromicString(s, i, j))&#123;</div><div class="line">                    <span class="keyword">if</span>((j-i+<span class="number">1</span>) &gt; longestLen) &#123;</div><div class="line">                        longestLen = j-i+<span class="number">1</span>;</div><div class="line">                        longestStart = i;</div><div class="line">                        longestEnd = j;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s.substring(longestStart, longestEnd+<span class="number">1</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度</p><ol><li>时间复杂度：O(n^3)</li><li>空间复杂度：O(1)</li></ol><h2 id="Dynamic-Programming-动态规划"><a href="#Dynamic-Programming-动态规划" class="headerlink" title="Dynamic Programming(动态规划)"></a>Dynamic Programming(动态规划)</h2><p>利用回文串的对称性的特点，可以得出如下结论：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字符串S，P(i,j)表示子串Si...Sj是否是回文串，其可能值为：</div><div class="line">1. P(i,j) = true; // 表示子串Si...Sj是回文串</div><div class="line">2. P(i,j) = false; // 表示子串Si...Sj不是回文串</div><div class="line"></div><div class="line">结论：P(i,j) = P(i+1, j-1) &amp;&amp; Si == Sj</div></pre></td></tr></table></figure></p><p>上面的结论就是一个动态规则里的状态转移方程，可以使用动态规划的思路来减少重复比较，步骤：</p><ol><li>先计算长度为1和2的回文串，并把结果保存下来</li><li>利用上面的结果，计算长度为3的回文串，保存结果，依次类推</li></ol><p>转换为代码的关键是：</p><ol><li>保存每个子串的回文串结果，长度为n的字符串S，其子串有n^2，使用二维数组来存储</li><li>遍历子串时，要按长度从小到大来遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() &lt;= <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">boolean</span> p[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化结果，设置长度值小于0，1的子串其回文结果为true</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(j &gt; i) &#123;</div><div class="line">                    p[i][j] = <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    p[i][j] = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>; <span class="comment">// 不会遍历长度为1</span></div><div class="line">        <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxRight = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> subLen = <span class="number">2</span>; subLen&lt;=n; subLen++)&#123;<span class="comment">// 子串的长度，长度为1都已经计算过了，从2开始</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; (i+subLen-<span class="number">1</span>)&lt;n; i++)&#123; <span class="comment">// 子串的起点index</span></div><div class="line">                <span class="keyword">int</span> j = i+subLen-<span class="number">1</span>;</div><div class="line">                <span class="comment">// 依据状态转移方程，更新二维数据p</span></div><div class="line">                p[i][j] = p[i+<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; s.charAt(i) == s.charAt(j);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(p[i][j]) &#123;</div><div class="line">                    <span class="keyword">if</span>(subLen &gt;= maxLen) &#123;</div><div class="line">                        maxLen = subLen;</div><div class="line">                        maxLeft = i;</div><div class="line">                        maxRight = j;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s.substring(maxLeft, maxRight+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>复杂度：</p><ol><li>时间复杂度：O(n^2);</li><li>空间复杂度：O(n^2);</li></ol><h2 id="Expand-Around-Center-优化后的动态规划"><a href="#Expand-Around-Center-优化后的动态规划" class="headerlink" title="Expand Around Center(优化后的动态规划)"></a>Expand Around Center(优化后的动态规划)</h2><p>理论上，我们可以实现时间复杂度为O(n^2)，空间复杂度为O(1)的动态规划算法。</p><p>利用回文串的特点，对字符串S的子串进行归类：—- 回文串有可能是偶数，也有可能是奇数</p><ol><li>[Si], [S(i-1),Si,Si+1], … , [S(i-n), … , Si, S(i+n)]</li><li>[Si, S(i+1)], [S(i-1), Si, Si+1, S(i+2)], …, [S(i-n),…, Si, Si+1, …, S(i+n)]</li></ol><p>这样进行归类后，如果先把一类的子串放在一起计算，就只需要两个变量来记录上一个子串的结果，不用记录所有的子串结果，代码实现如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> expandL = l;</div><div class="line">        <span class="keyword">int</span> expandR = r;</div><div class="line">        <span class="keyword">while</span>(expandL&gt;=<span class="number">0</span> &amp;&amp; expandR&lt;s.length() &amp;&amp; s.charAt(expandL) == s.charAt(expandR))&#123;</div><div class="line">            expandL--;</div><div class="line">            expandR++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 注意，此时expandR, expandL是不满足回文串的index，所以是-1</span></div><div class="line">        <span class="keyword">return</span> expandR - expandL - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()&lt;=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxStart = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> len = expandAroundCenter(s, i, i);</div><div class="line">            <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i+<span class="number">1</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(len &gt;= maxLen) &#123;</div><div class="line">                maxLen = len;</div><div class="line">                maxStart = i - len/<span class="number">2</span>;</div><div class="line">                maxEnd = i + len/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(len2 &gt;= maxLen) &#123;</div><div class="line">                maxLen = len2;</div><div class="line">                maxStart = i - len2/<span class="number">2</span> + <span class="number">1</span>;</div><div class="line">                maxEnd = i + len2/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s.substring(maxStart, maxEnd+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ol><h2 id="Manacher’s-Algorithm-最优算法"><a href="#Manacher’s-Algorithm-最优算法" class="headerlink" title="Manacher’s Algorithm(最优算法)"></a>Manacher’s Algorithm(最优算法)</h2><p>时间复杂度为O(n)的算法，其步骤如下：</p><ol><li>字符串转换，S to T，如S = “abaaba”, T = “#a#b#a#a#b#a#”  <ol><li>S的回文子串有可能为偶数，也有可能为奇数；T的回文子串一定是奇数<ol><li>abccba —&gt;  #a#b#c#c#b#a#</li><li>abcdcba —&gt; #a#b#c#d#c#b#a#</li></ol></li><li>T的最长回文串去掉字符串‘#’后，就是S的最长回文子串</li></ol></li><li><p>int[] P = new int[T.length]; P[i]表示以Ti为中心回文串的长度（不包含Ti的长度）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">T = # a # b # a # a # b # a #</div><div class="line">P = 0 1 0 3 0 1 6 1 0 3 0 1 0</div></pre></td></tr></table></figure><p> 如上所示，只要计算出P的值，最长回文子串，就是数组里的最大值</p></li><li><p>利用回文串的对称性，推导快速计算P的数学公式：</p><ol><li>假设字符串S=“babcbabcbaccba”，转换后的T，及已经计算了部分结果的数组P，如下所示：<br><img src="/2018/12/06/leetcode-longest-palindromic-substring/20181211095308958.png" alt=""><ol><li>L，C，R分别表示回文串“#a#b#c#b#a#b#c#b#a#”的最左边临界点，中间值，最右边临界点</li><li>i’是以C为中心i的对称点（mirror）</li></ol></li><li>计算P[i]的值，由于回文串的对称性，可快速得出：P[i]=P[i’]=1</li><li>上面的公式，无法适合计算P[C+1]…P[R]之间的所有值，如下图所示：<br><img src="/2018/12/06/leetcode-longest-palindromic-substring/20181211100718788.png" alt=""><ol><li>P[15] != P[7]，因为P[7] &gt; R - i，即7 &gt; 20-15</li><li>虽然P[15] != P[7], 由于P[7]&gt;R-i，所以P[15]&gt;=R-i</li></ol></li><li><p>最终的计算公式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if P[i&apos;] &lt;= R - i</div><div class="line">then P[i] = P[i&apos;]</div><div class="line">else P[i] &gt;= R - i (通过以Ti为中心，两边扩大比较获取P[i]的值)</div></pre></td></tr></table></figure></li><li><p>为了最大程度使用上面的公式，有更大的右边界时，要更新右边界</p></li></ol></li></ol><p>具体的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">preProcess</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"^"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</div><div class="line">            sb.append(<span class="string">"#"</span>).append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        sb.append(<span class="string">"#$"</span>);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()&lt;=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 预处理</span></div><div class="line">        String T = preProcess(s);</div><div class="line">        <span class="keyword">int</span> n = T.length();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] P = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> R = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> C = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123; <span class="comment">// 逐一求P的值</span></div><div class="line">            </div><div class="line">            <span class="keyword">int</span> mirror_i = <span class="number">2</span>*C-i; <span class="comment">// mirror_i = c-(i-c) = 2c-i</span></div><div class="line">            </div><div class="line">            <span class="comment">// 注意：R&gt;i一定要判断</span></div><div class="line">            P[i] = R &gt; i ? Math.min(P[mirror_i], R-i) : <span class="number">0</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span>(T.charAt(i+P[i]+<span class="number">1</span>) == T.charAt(i-P[i]-<span class="number">1</span>))&#123;</div><div class="line">                P[i]++;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 更新R值</span></div><div class="line">            <span class="keyword">if</span>((i+P[i]) &gt; R)&#123;</div><div class="line">                C = i;</div><div class="line">                R = i+P[i];</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(P[i] &gt;= maxLen) &#123;</div><div class="line">                maxLen = P[i];</div><div class="line">                centerIndex = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// StringBuffer result = new StringBuffer();</span></div><div class="line">        <span class="comment">// if(T.charAt(max_index) != '#') &#123;</span></div><div class="line">        <span class="comment">//     result.append(T.charAt(max_index));</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">        <span class="comment">// int i=1;</span></div><div class="line">        <span class="comment">// do&#123;</span></div><div class="line">        <span class="comment">//     if(T.charAt(max_index+i) != '#') &#123;</span></div><div class="line">        <span class="comment">//         result.insert(0, T.charAt(max_index-i));</span></div><div class="line">        <span class="comment">//         result.append(T.charAt(max_index+i));</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">//     i++;</span></div><div class="line">        <span class="comment">// &#125;while(i&lt;=max);</span></div><div class="line">        <span class="comment">// return result.toString();</span></div><div class="line">        <span class="keyword">return</span> s.substring((centerIndex-maxLen)/<span class="number">2</span>, (centerIndex-maxLen)/<span class="number">2</span> + maxLen);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：看上去有两个循环，for和while，但注意while循环的遍历次数之和为n，所以时间复杂度为O(2n)=O(n)</li><li>空间复杂度：O(n)</li></ol><h2 id="Longest-Common-Substring-最长公共子串"><a href="#Longest-Common-Substring-最长公共子串" class="headerlink" title="Longest Common Substring(最长公共子串)"></a>Longest Common Substring(最长公共子串)</h2><p>利用回文串的特点，求字符串S与逆反字符串S‘的最长公共子串，就是其最长回文子串，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. S=&quot;caba&quot;, S&apos;=&quot;abac&quot;</div><div class="line">2. 最长公共子串 C = “aba”，其最长回文子串 P = “aba”</div></pre></td></tr></table></figure></p><p>有一个特例除外，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. S = &quot;abacdfgdcaba&quot;, S&apos; = &quot;abacdgfdcaba&quot;.</div><div class="line">2. 最长公共子串 C = “abacd”，但其最长回文子串 P = “aba”</div></pre></td></tr></table></figure></p><p>要排除上面的特殊，排除方法：把逆反S’中C再逆反后的下标与S中的C的下标进行比较，不相等则排除掉</p><p>求S与S‘中的最长公共子串C，可以采用动态规划，具体请查看：<a href="https://handsomeliuyang.github.io/2018/12/15/Leetcode-longest-common-substring/">Leetcode-Long-Common-String</a></p><p>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String S)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(S==<span class="keyword">null</span> || S.length()&lt;=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> S;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> n = S.length();</div><div class="line">        </div><div class="line">        StringBuffer SReverseBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            SReverseBuffer.append(S.charAt(i));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String SReverse = SReverseBuffer.toString();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[][] LCStuff = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> LCSLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(S.charAt(i) == SReverse.charAt(j)) &#123;</div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>) &#123;</div><div class="line">                        LCStuff[i][j] = <span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        LCStuff[i][j] = LCStuff[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span>(LCSLen &lt; LCStuff[i][j])&#123;</div><div class="line">                        <span class="comment">// 判断是否是真正的回文</span></div><div class="line">                        <span class="keyword">if</span>((i-LCStuff[i][j]+<span class="number">1</span>) == (n-(j+<span class="number">1</span>))) &#123;</div><div class="line">                            LCSLen = LCStuff[i][j];</div><div class="line">                            endIndex = i;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    LCStuff[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> S.substring(endIndex-LCSLen+<span class="number">1</span>, endIndex+<span class="number">1</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复杂度：</p><ol><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(n^2)</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://leetcode.com/problems/longest-palindromic-substring/solution/" target="_blank" rel="noopener">solution</a></li><li><a href="https://articles.leetcode.com/longest-palindromic-substring-part-ii/" target="_blank" rel="noopener">Longest Palindromic Substring Part II</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given a string s, find the longest palindromic substring in s. You may
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之Median of Two Sorted Arrays</title>
    <link href="https://handsomeliuyang.github.io/2018/12/03/LeetCode%E4%B9%8BMedian%20of%20Two%20Sorted%20Arrays/"/>
    <id>https://handsomeliuyang.github.io/2018/12/03/LeetCode之Median of Two Sorted Arrays/</id>
    <published>2018-12-03T15:22:56.000Z</published>
    <updated>2018-12-04T02:20:40.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line"></div><div class="line">The median is 2.0</div></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line"></div><div class="line">The median is (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure></p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>求两个有序数组合并后，其中位数，如下所例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line">合并后：[1,2,3]</div><div class="line">中位数：2</div><div class="line"></div><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line">合并后：[1,2,3,4]</div><div class="line">中位数：(2+3)/2.0 = 2.5</div></pre></td></tr></table></figure></p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>有序数组A，B，其长度为m，n，把其分为两部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">     left_part               right_part</div><div class="line">A[0],A[1],...A[i-1] | A[i],A[i+1],...A[m-1]</div><div class="line">B[0],B[1],...B[j-1] | B[j],B[j+1],...B[n-1]</div></pre></td></tr></table></figure></p><p>如果满足下面三个条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 当n+m为偶数时，Length(left_part) == Length(right_part)</div><div class="line">2. 当n+m为奇数时，Length(left_part) == Length(right_part) + 1</div><div class="line">3. B[j-1] &lt;= A[i] &amp;&amp; A[i-1] &lt;= B[j]</div></pre></td></tr></table></figure></p><p>相应的中位数结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 当n+m为偶数时，median = (max(left_part) + min(right_part))/2</div><div class="line">2. 当n+m为奇数时，由于Length(left_part) &gt; Length(right_part)，所以median = max(left_part)</div></pre></td></tr></table></figure></p><p>把i，j代入推导：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. if (n+m)%2 == 0, then i+j = m-i + n-j</div><div class="line">2. if (n+m)%2 == 1, then i+j = m-i + n-j + 1 // 假设right_part比left_part多一个元素</div><div class="line">3. 0 &lt;=i&lt;= m, j=(n+m)/2-i 或 j=(n+m+1)/2-i</div><div class="line">4. 当n+m为偶数时，由(n+m)/2 == (n+m+1)/2，得出：0&lt;=i&lt;=m, j=(n+m+1)/2-i</div></pre></td></tr></table></figure></p><p>因此求中位数，即求在满足如下条件下的i值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 0 &lt;= i &lt;= m</div><div class="line">2. j = (n+m+1)/2 - i</div><div class="line">3. A[i-1] &lt;= B[j] &amp;&amp; B[j-1] &lt;= A[i]</div></pre></td></tr></table></figure></p><p>因为0&lt;= j &lt;=n进行推导：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. (n+m+1)/2 - i &gt;= 0, 代入i的最大值m</div><div class="line">2. (n-m+1)/2 &gt;= 0</div><div class="line">3. n &gt;= m</div></pre></td></tr></table></figure></p><p>如果最快的从有序数组A里，找到满足条件的i，最快速的办法：二分搜索法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> m = A.length;</div><div class="line">        <span class="keyword">int</span> n = B.length;</div><div class="line">        </div><div class="line">        <span class="comment">// 保证 n&gt;=m</span></div><div class="line">        <span class="keyword">if</span>(m&gt;n)&#123;</div><div class="line">            <span class="keyword">int</span>[] temp=A; A=B; B=temp;</div><div class="line">            <span class="keyword">int</span> tmp=m; m=n; n=tmp;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 二分搜索法</span></div><div class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> iMax = m;</div><div class="line">        <span class="keyword">while</span>(iMin &lt;= iMax)&#123; <span class="comment">// 二分搜索法的关键，不能是&lt;</span></div><div class="line">            <span class="keyword">int</span> i = (iMin+iMax)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> j = (m+n+<span class="number">1</span>)/<span class="number">2</span> - i;</div><div class="line">            <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; i&lt;m &amp;&amp; B[j-<span class="number">1</span>] &gt; A[i])&#123; </div><div class="line">                iMin = i+<span class="number">1</span>; <span class="comment">// 二分法的关键，需要+1，不然会进入死循环</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&lt;n &amp;&amp; A[i-<span class="number">1</span>]&gt;B[j])&#123;</div><div class="line">                iMax = i-<span class="number">1</span>; <span class="comment">// 二分法的关键，需要-1，不然会进入死循环</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 找到此i值了</span></div><div class="line">                <span class="keyword">int</span> maxLeft=<span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</div><div class="line">                    maxLeft = B[j-<span class="number">1</span>];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) &#123;</div><div class="line">                    maxLeft = A[i-<span class="number">1</span>];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    maxLeft = Math.max(A[i-<span class="number">1</span>], B[j-<span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>((m+n)%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> maxLeft;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(i==m)&#123;</div><div class="line">                    minRight = B[j];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==n) &#123;</div><div class="line">                    minRight = A[i];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    minRight = Math.min(A[i], B[j]);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> (maxLeft + minRight)/<span class="number">2.0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>边界判断优化：i<m ==""> j&gt;0 and i&gt;0 =&gt; j&lt;n，推导过程：</m></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m&lt;=n,i&lt;m ==&gt; j=(n+m+1)/2-i &gt; (n+m+1)/2-m &gt;= (2m+1)/2-m &gt;= 1/2 &gt;= 0</div><div class="line">m&lt;=n,i&gt;0 ==&gt; j=(n+m+1)/2-i &lt; (n+m+1)/2 &lt;= 2n+1/2 &lt;= n</div></pre></td></tr></table></figure><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><ol><li>时间复杂度：O(log(min(m,n)))，推导过程如下：<ol><li>二分搜索遍历过程：m, m/2, m/(2^2), … m/(2^k)</li><li>m/(2^k) = 1 ==&gt; 2^k = m ==&gt; k=log(m)，k即是while循环的次数</li><li>m &lt;= n ==&gt; log(min(m,n) ==&gt; O(log(min(m,n)))</li><li><strong>注意</strong>：在算法里，logX的底数默认为2，而不是数学里的10</li></ol></li><li>空间复杂度：O(1)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respective
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Flutter实现Git权限分配工具之旅</title>
    <link href="https://handsomeliuyang.github.io/2018/10/30/Flutter%E5%AE%9E%E7%8E%B0Git%E6%9D%83%E9%99%90%E5%88%86%E9%85%8D%E5%B7%A5%E5%85%B7%E4%B9%8B%E6%97%85/"/>
    <id>https://handsomeliuyang.github.io/2018/10/30/Flutter实现Git权限分配工具之旅/</id>
    <published>2018-10-30T06:40:35.000Z</published>
    <updated>2018-11-11T10:21:35.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter初见"><a href="#Flutter初见" class="headerlink" title="Flutter初见"></a>Flutter初见</h1><blockquote><p>Flutter is a mobile app SDK for building high-performance, high-fidelity, apps for iOS and Android, from a single codebase. </p></blockquote><p>Flutter 是一款移动应用程序 SDK，致力于使用一套代码来构建高性能、高保真的 iOS 和 Android 应用程序。</p><p><strong>Flutter的优势：</strong></p><ol><li>开发效率高：<ol><li>一套代码开发 iOS 和 Android</li><li>热加载（hot reload）</li></ol></li><li>创建美观，高度定制的用户体验<ol><li>Material Design 和 Cupertino （iOS 风格）Widget</li><li>实现定制，美观，品牌驱动的设计，而不受 OEM Widget 集的限制</li></ol></li></ol><p><strong>框架结构（Architecture）</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/old-architecture.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://flutter.io/images/whatisflutter/diagram-layercake.svg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><strong><a href="https://skia.org/" target="_blank" rel="noopener">Skia</a>：</strong>开源的2d图形库。其已作为Chrome, Chrome OS, Android, Firefox, Firefox OS等其他众多产品的图形引擎，支持平台还包括Windows,macOS,iOS8+,Ubuntu14.04+等。</li><li><strong>Dart：</strong><ol><li>debug：JIT(Just In Time)编译，运行时分析、编译，运行较慢。Hot Reload基于JIT运行</li><li>release：AOT(Ahead Of Time)编译，生成了原生的arm代码，开发期间较慢，但运行期间快</li><li>一切都是对象，甚至数字，函数，和null都是对象</li><li>默认publick，通过加(_)标记为私有</li><li>单线程，没有锁的概念</li></ol></li><li><strong>Text：</strong>文本渲染</li></ol><p><strong>Dart的线程模型</strong></p><p>Flutter与Android一样，通过Main线程和消息循环实现UI绘制操作与UI事件，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/事件循环.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>Dart的不同点：</p><ol><li>Dart是单线程执行，通过Future来实现异步编程，只是把任务暂时放在消息队列里，本质还是单线程执行，与javascript类型</li><li>两个消息队列：event队列和microtask队列</li></ol><p>单线程带来的问题：单某个任务执行时间过长，超过16ms时，会导致丢帧，给用户的感觉就是卡顿，React借助requestIdleCallback Api实现了卡顿优化，<a href="https://handsomeliuyang.github.io/2018/08/07/DiyReact%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/">详情请参考</a></p><p>Dart解决这个问题的方案：通过<a href="https://docs.flutter.io/flutter/dart-isolate/Isolate-class.html" target="_blank" rel="noopener">Isolate</a>真正意义上创建线程，但此线程与java里的线程不一样：isolates之间不会共享内存，更像进程，通过传递message来进行交流，<a href="https://flutter.io/docs/cookbook/networking/background-parsing" target="_blank" rel="noopener">Demo</a></p><p><strong>一切都是Widget</strong></p><p>Widgets是Flutter应用程序用户界面的基础构建模块，Widgets包含了views，view controllers，layouts等等能力。</p><p>Flutter提供了很多基组Widgets，但这些Widgets有一个与Android最大的不同点：每个Widget的能力很单一，如Text Widget，没有width, height, padding,color等等属性，需要借助其他Widget。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/widgets的基础组件.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>更多细节请查看：<a href="https://www.jianshu.com/p/9e6c470ea5bf" target="_blank" rel="noopener">Flutter快速上车之Widget</a></p><p><strong>StatelessWidget &amp; StatefulWidget</strong></p><p>Flutter的widget分为无状态和有状态，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://doc.flutter-dev.cn/images/whatisflutter/diagram-widgetclass.svg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>如何选择？下面是我的一些经验：</p><ol><li>包含TextField的widget — StatefulWidget</li><li>用户交互时，产出的数据，如点击计数<ol><li>局部数据 — StatefulWidget</li><li>全局数据（store存储） — StatelessWidget</li></ol></li><li>默认为StatelessWidget</li></ol><p><strong>Widget，Element，RenderObject</strong></p><p>Flutter里的Widgets，Elements, RenderObject三要素与React中的Element，Instance/Fiber, Dom有点类似</p><ol><li>Widgets：widget tree，只是属性集合，需要被绘制的属性集合，每次build，都是新对象，所以属性都要用final修饰</li><li>Elements：element tree，concrete widget tree，diff操作，每次build，不会重新构建，进行diff和update</li><li>RenderObject：真正负责layout, rendering等等操作，一般是由element创建</li></ol><p><strong>Flutter的性能</strong></p><p>Flutter性能要高的原因：</p><ol><li>debug为字节码，release为机器码</li><li>不依赖OEM widgets</li><li>没有bridge</li></ol><blockquote><p><strong>Native View:</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/native-view.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>Hybrid:</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/hybrid.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>ReactNative:</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/reactnative.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>Flutter</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/flutter.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p></blockquote><font color="#ff0000">注意：以上只是从实现角度分析，在机器性能好的情况下，实际差距不大</font><h1 id="Git权限分配工具简介"><a href="#Git权限分配工具简介" class="headerlink" title="Git权限分配工具简介"></a>Git权限分配工具简介</h1><p>为不同类型的角色批量分配Git权限的工具，整体效果如下：</p><iframe height="520" width="100%" src="/2018/10/30/Flutter实现Git权限分配工具之旅/flutter-igit.gif" frameborder="0" allowfullscreen></iframe><p>源码下载地址：<a href="https://github.com/handsomeliuyang/flutter-igit" target="_blank" rel="noopener">https://github.com/handsomeliuyang/flutter-igit</a></p><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>pubspec.yaml：与package.json/build.grale类似，用于配置程序的信息，如下所示：<br> <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/pubspec.yaml.png" alt=""></li><li>assets：用于存放内置图片与资源，自建目录可修改</li><li><p>lib：src目录，按功能模块分为：</p><ol><li>main.dart/main_dev.dart：程序的入口文件，与c语言类似，dart程序的入口为main()函数，main_dev.dart的区别是使用DevToolsStore，用于查看store与action</li><li><p>App.dart：最外层的配置，如下所示：</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@override</span></div><div class="line">Widget build(BuildContext context) &#123;</div><div class="line">    <span class="keyword">return</span> StoreProvider( <span class="comment">// 使用Redux的要求</span></div><div class="line">        store: widget.store,</div><div class="line">        child: <span class="keyword">new</span> MaterialApp( <span class="comment">// 使用Material要求</span></div><div class="line">            title: <span class="string">'Flutter igit'</span>, </div><div class="line">            theme: <span class="keyword">new</span> ThemeData( <span class="comment">// 全局样式</span></div><div class="line">                primaryColor: <span class="keyword">const</span> Color(<span class="number">0xFF1C306D</span>),</div><div class="line">                accentColor: <span class="keyword">const</span> Color(<span class="number">0xFFFFAD32</span>),</div><div class="line">            ),</div><div class="line">            home: MainPage(</div><div class="line">                devDrawerBuilder: widget.devDrawerBuilder</div><div class="line">            ),</div><div class="line">        ),</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>按功能划分目录：models, networking, redux, ui, utils</p></li></ol></li></ol><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>redux的结构非常简单，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/redux_architecture.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>由于Flutter是一个类似MVVM框架，所以通过StoreConnector实现数据监听，如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@override</span></div><div class="line">Widget build(BuildContext context) &#123;</div><div class="line">    <span class="keyword">return</span> StoreConnector&lt;AppState, DrawListViewModel&gt; (</div><div class="line">        distinct: <span class="keyword">true</span>,</div><div class="line">        converter: (store) =&gt; DrawListViewModel.fromStore(store),</div><div class="line">        builder: (context, viewModel)&#123;</div><div class="line">            <span class="keyword">return</span> DrawListContent(</div><div class="line">                header: <span class="keyword">this</span>.header,</div><div class="line">                viewModel: viewModel,</div><div class="line">            );</div><div class="line">        &#125;,</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在Flutter里，应用了Redux后的实现结构为：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/flutter-redux-apply.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>Redux是全局单例，应用的功能模块很多，所以redux的目录与state按功能模块的划分更加合适，如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> TradelineState tradelineState;</div><div class="line">    <span class="keyword">final</span> PermissionState permissionState;</div><div class="line">    <span class="keyword">final</span> ProjectState projectState;</div><div class="line"></div><div class="line">    AppState(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.tradelineState,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.permissionState,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.projectState</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> initial() &#123;</div><div class="line">        <span class="keyword">return</span> AppState(</div><div class="line">            tradelineState: TradelineState.initial(),</div><div class="line">            permissionState: PermissionState.initial(),</div><div class="line">            projectState: ProjectState.initial()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/redux-catalog.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="network"><a href="#network" class="headerlink" title="network"></a>network</h3><p>flutter的http请求很简单，主要是使用两个Api：http，Uri，如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Future&lt;<span class="built_in">List</span>&lt;GitProject&gt;&gt; getGroups(<span class="built_in">int</span> page, <span class="built_in">String</span> search) <span class="keyword">async</span> &#123;</div><div class="line">    <span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.http(</div><div class="line">        AUTHORITY,</div><div class="line">        <span class="string">'<span class="subst">$&#123;FIXED_PATH&#125;</span>/groups'</span>,</div><div class="line">        &lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&#123;</div><div class="line">            <span class="string">'private_token'</span>: Config.LIUYANG_TOKEN,</div><div class="line">            <span class="string">'per_page'</span>: PER_PAGE.toString(),</div><div class="line">            <span class="string">'all_available'</span>: <span class="string">'true'</span>,</div><div class="line">            <span class="string">'page'</span>:<span class="string">'<span class="subst">$&#123;page&#125;</span>'</span>,</div><div class="line">            <span class="string">'search'</span>:<span class="string">'com.wuba'</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(uri.toString());</div><div class="line">    <span class="keyword">final</span> jsonResponse = json.decode(response.body);</div><div class="line"></div><div class="line">    debugPrint(<span class="string">'liuyang <span class="subst">$&#123;jsonResponse&#125;</span>'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(response.statusCode == <span class="number">200</span>)&#123;</div><div class="line">        <span class="built_in">List</span>&lt;GitProject&gt; groups = <span class="built_in">List</span>&lt;GitProject&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;jsonResponse.length; i++)&#123;</div><div class="line">            groups.add(GitProject.fromJson(jsonResponse[i], ProjectType.group));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> groups;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> Exception(<span class="string">'Failed <span class="subst">$&#123;response.statusCode&#125;</span> <span class="subst">$&#123;response.body&#125;</span>'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><ol><li>上面是通过async,Future实现异步操作，但此异步并不是真正的开异步线程，只是把任务放在队列里，延迟执行而已，应该使用isolate实现真正的异步执行</li><li>面向对象编程，每个Model里，都有两个Api：fromJson()，toJson()</li></ol><h2 id="MainPage"><a href="#MainPage" class="headerlink" title="MainPage"></a>MainPage</h2><p>整体效果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/mainpage.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>关键点：</p><ol><li>此框架页包含：AppBar，Drawer，DevDrawer，PermissionPage</li><li><p>此框架默认应该是StatelessWidget，但由于AppBar的title需要动态拼接，导致只能改为StatefulWidget，如下：</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MainPage</span>&gt; </span>&#123;</div><div class="line">    Widget _buildTitle(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> StoreConnector&lt;AppState, Tradeline&gt;(</div><div class="line">            distinct: <span class="keyword">true</span>,</div><div class="line">            converter: (store) =&gt; store.state.tradelineState.current,</div><div class="line">            builder: (BuildContext context, Tradeline currentTradeline) &#123;</div><div class="line">                <span class="keyword">return</span> Text(</div><div class="line">                    <span class="string">'分配 <span class="subst">$&#123;currentTradeline?.name ?? <span class="string">''</span>&#125;</span> 的igit权限'</span></div><div class="line">                );</div><div class="line">            &#125;,</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</div><div class="line">            appBar: <span class="keyword">new</span> AppBar(title: _buildTitle(context)),</div><div class="line">            drawer: Drawer(</div><div class="line">                child: DrawList(</div><div class="line">                    header: DrawListHeader()</div><div class="line">                ),</div><div class="line">            ),</div><div class="line">            endDrawer: widget.devDrawerBuilder != <span class="keyword">null</span> ? widget.devDrawerBuilder(context) : <span class="keyword">null</span>,</div><div class="line">            body: PermissionPage(),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>dart里创建对象时，new关键字不是必需的，如下：</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape shape = <span class="keyword">new</span> Shape();</div><div class="line">Shape shape1 = Shape();</div></pre></td></tr></table></figure><p> 在build时，个人感觉省略掉new关键字，可读性更强</p></li></ol><h2 id="Drawer"><a href="#Drawer" class="headerlink" title="Drawer"></a>Drawer</h2><p>效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/drawer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>功能比较简单，思路如下：</p><ol><li>通过StoreConnector，获取并监听Store</li><li>构建ListView</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawList</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Widget header;</div><div class="line"></div><div class="line">    DrawList(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.header</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> StoreConnector&lt;AppState, DrawListViewModel&gt; (</div><div class="line">            distinct: <span class="keyword">true</span>,</div><div class="line">            converter: (store) =&gt; DrawListViewModel.fromStore(store),</div><div class="line">            builder: (context, viewModel)&#123;</div><div class="line">                <span class="keyword">return</span> DrawListContent(</div><div class="line">                    header: <span class="keyword">this</span>.header,</div><div class="line">                    viewModel: viewModel,</div><div class="line">                );</div><div class="line">            &#125;,</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawListContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Widget header;</div><div class="line">    <span class="keyword">final</span> DrawListViewModel viewModel;</div><div class="line"></div><div class="line">    DrawListContent(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.header,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.viewModel</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> ListView.builder(</div><div class="line">            itemCount: <span class="keyword">this</span>.viewModel.tradelines.length + <span class="number">1</span>,</div><div class="line">            itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</div><div class="line">                <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.header;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                Tradeline tradeline = <span class="keyword">this</span>.viewModel.tradelines[index - <span class="number">1</span>];</div><div class="line">                <span class="built_in">bool</span> isSelected = <span class="keyword">this</span>.viewModel.currentTradeline.name ==</div><div class="line">                    tradeline.name;</div><div class="line">                <span class="keyword">var</span> backgroundColor = isSelected</div><div class="line">                    ? <span class="keyword">const</span> Color(<span class="number">0xFFEEEEEE</span>)</div><div class="line">                    : Theme</div><div class="line">                    .of(context)</div><div class="line">                    .canvasColor;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Material(</div><div class="line">                    color: backgroundColor,</div><div class="line">                    child: ListTile(</div><div class="line">                        onTap: () &#123;</div><div class="line">                            viewModel.changeCurrentTradeline(tradeline);</div><div class="line">                            Navigator.pop(context);</div><div class="line">                        &#125;,</div><div class="line">                        selected: isSelected,</div><div class="line">                        title: Text(tradeline.name),</div><div class="line">                    ),</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关键点：</p><ol><li>ListTile的属性有限，设置Item的背景通过Material Widget，也可以通过Container Widget</li><li>ListView没有header的概念，都是item</li><li>ListView没有分隔线的Api，分隔线是由Item实现，通过ListTile.divideTiles()实现，其内部是通过DecoratedBox Widget实现</li><li>Navigator栈：Drawer，Dialog，Route都由Navigator栈管理，所以如下操作都是出栈操作Navigator.pop(context)：<ol><li>dismiss drawer</li><li>dismiss dialog</li><li>Back</li></ol></li></ol><h2 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h2><p>Panel效果的源码来自：flutter_gallery里的Expansion panels例子，个人学习新技术的过程：</p><ol><li>看官方的文档</li><li>运行官方demo，思考如何实现，对照源码的实现</li></ol><p>具体的代码，可通过下载源码查看，这里重点讲一下Flutter的生命周期函数，在Flutter里，StatelessWidget和StatefulWidget没有生命周期，因为其是不可变的，只有State才有生命周期，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/state-lifecycle.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>当数据变化时，StatelessWidget与StatefulWidget每次都会创建新的对象，并执行build()函数，State会被复用，造成flutter程序的如下特点：</p><ol><li>StatelessWidget, StatefulWidget里的成员变量都是final的，可以理解为React里的props</li><li>State里的成员变量可以理解为React里的state，即为局部变量（Store里的为全局变量）</li><li>State的initState()只执行一次，如果成员变量需要依据props而修改，可以在didUpdateWidget()里更新</li><li>修改State的成员变量时，如果希望界面需要同步修改，需要在setState()里修改，如下所示：— <font color="#ff0000">大家可以对比下与React的setState()有什么区别？</font> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setState(() &#123;</div><div class="line">    item.isExpanded = <span class="keyword">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><p>如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionContent</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;GitProject&gt; projects;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;GitUser&gt; users;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> addGitProject;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> deleteGitProject;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> getUserIdByName;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> deleteGitUser;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> allocationPermission;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> PermissionContent(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.projects,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.users,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.addGitProject,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.deleteGitProject,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.getUserIdByName,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.deleteGitUser,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.allocationPermission</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    _PermissionContentState createState() =&gt; _PermissionContentState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PermissionContentState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PermissionContent</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; ACCESS_LEVEL = &#123;...&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">List</span>&lt;PanelItem&gt; _panelItems;</div><div class="line">    PanelItem _userPanelItem;</div><div class="line">    PanelItem _rolePanelItem;</div><div class="line">    PanelItem _projectPanelItem;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line">        _userPanelItem = _initUserPanelItem();</div><div class="line">        _rolePanelItem = _initRolePanelItem();</div><div class="line">        _projectPanelItem = _initProjectPanelItem();</div><div class="line">        _panelItems = &lt;PanelItem&gt;[</div><div class="line">            _userPanelItem,</div><div class="line">            _rolePanelItem,</div><div class="line">            _projectPanelItem</div><div class="line">        ];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> didUpdateWidget(PermissionContent oldWidget) &#123;</div><div class="line">        <span class="keyword">super</span>.didUpdateWidget(oldWidget);</div><div class="line">        <span class="comment">// 更新数据</span></div><div class="line">        _projectPanelItem.value = widget.projects;</div><div class="line">        _userPanelItem.value = widget.users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _navigatorProjectPage(BuildContext context) <span class="keyword">async</span> &#123;...&#125;</div><div class="line"></div><div class="line">    PanelItem _initUserPanelItem() &#123;...&#125;</div><div class="line"></div><div class="line">    PanelItem _initRolePanelItem() &#123;...&#125;</div><div class="line"></div><div class="line">    PanelItem _initProjectPanelItem() &#123;...&#125;</div><div class="line">    </div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong> 交互反馈 </strong></p><p>除了通过Widget构建界面外，有时我们还需要给用户交互反馈：</p><ol><li><p>Toasts/Snackbars：仅信息反馈，定时消失，不进Navigator栈</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Scaffold.of(context).showSnackBar(<span class="keyword">new</span> SnackBar(</div><div class="line">    content: <span class="keyword">new</span> Text(<span class="string">"权限分配成功"</span>),</div><div class="line">));</div></pre></td></tr></table></figure></li><li><p>Dialog：信息反馈，有进一步交互，Natvigator栈管理</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// show:</span></div><div class="line">showDialog(</div><div class="line">    context: context,</div><div class="line">    barrierDismissible: <span class="keyword">false</span>,</div><div class="line">    builder: (BuildContext context)&#123;</div><div class="line">        <span class="keyword">return</span> Dialog(</div><div class="line">            child: Row(</div><div class="line">                mainAxisSize: MainAxisSize.min,</div><div class="line">                children: [</div><div class="line">                    CircularProgressIndicator(),</div><div class="line">                    Text(<span class="string">"Loading"</span>),</div><div class="line">                ],</div><div class="line">            ),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="comment">// Dismiss:</span></div><div class="line">Navigator.pop(context);</div></pre></td></tr></table></figure></li></ol><p>Dialog仅仅只是modal，无法通过props来控制显示与消失，只能监听局部变量state或全局变量store来控制show与dismiss，分配权限的过程的代码如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建Completer对象</span></div><div class="line">Completer&lt;<span class="built_in">bool</span>&gt; completer = Completer&lt;<span class="built_in">bool</span>&gt;();</div><div class="line"><span class="comment">// 发送action，通过igit的Api分配权限</span></div><div class="line">widget.allocationPermission(completer, users, level, projects);</div><div class="line"></div><div class="line"><span class="comment">// 同时显示LoadingDialog</span></div><div class="line">showDialog(</div><div class="line">    context: context,</div><div class="line">    barrierDismissible: <span class="keyword">false</span>,</div><div class="line">    builder: (BuildContext context)&#123;</div><div class="line">        <span class="keyword">return</span> Dialog(</div><div class="line">            child: Row(</div><div class="line">                mainAxisSize: MainAxisSize.min,</div><div class="line">                children: [</div><div class="line">                    CircularProgressIndicator(),</div><div class="line">                    Text(<span class="string">"Loading"</span>),</div><div class="line">                ],</div><div class="line">            ),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="comment">// 监听成功与失败，并显示不同Toasts</span></div><div class="line">completer.future.then((user)&#123;</div><div class="line">    Navigator.pop(context);</div><div class="line"></div><div class="line">    Scaffold.of(context).showSnackBar(<span class="keyword">new</span> SnackBar(</div><div class="line">        content: <span class="keyword">new</span> Text(<span class="string">"权限分配成功"</span>),</div><div class="line">    ));</div><div class="line"></div><div class="line">&#125;, onError: (e)&#123;</div><div class="line">    Navigator.pop(context);</div><div class="line"></div><div class="line">    Scaffold.of(context).showSnackBar(<span class="keyword">new</span> SnackBar(</div><div class="line">        content: <span class="keyword">new</span> Text(<span class="string">"权限分配失败 <span class="subst">$&#123;e&#125;</span>"</span>),</div><div class="line">    ));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><p>效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/30/Flutter实现Git权限分配工具之旅/project.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>详细细节请查看代码，重点分享其中几个关键点</p><p><strong>LoadingView</strong><br>除静态页面外，所有的页面都有一个共同的加载流程：加载中…，失败/成功。统一实现LoadingView，如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectListWrap</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> ProjectListViewModel projectListViewModel;</div><div class="line"></div><div class="line">    ProjectListWrap(&#123;</div><div class="line">        <span class="keyword">this</span>.projectListViewModel</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;</div><div class="line">        <span class="keyword">return</span> LoadingView(</div><div class="line">            status: projectListViewModel.status,</div><div class="line">            loadingContent: PlatformAdaptiveProgressIndicator(),</div><div class="line">            errorContent: ErrorView(</div><div class="line">                description: <span class="string">'加载出错'</span>,</div><div class="line">                onRetry: projectListViewModel.refreshProjects,</div><div class="line">            ),</div><div class="line">            successContent: ProjectListContent(</div><div class="line">                projects: projectListViewModel.projects,</div><div class="line">                nextState: projectListViewModel.nextStatus,</div><div class="line">                currentPage: projectListViewModel.currentPage,</div><div class="line">                hasNext: projectListViewModel.hasNext,</div><div class="line">                refreshProjects: projectListViewModel.refreshProjects,</div><div class="line">                fetchNextProjects: projectListViewModel.fetchNextProjects,</div><div class="line">            ),</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>下滑加载下一页</strong><br>列表数据很多，通过滑动动态加载下一页数据，监听的方式与Android的类似，通过监听其滑动位置，同时由于滑动是有状态的，所以要使用StatefulWidget，如下所示：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectListContent</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;GitProject&gt; projects;</div><div class="line">    <span class="keyword">final</span> LoadingStatus nextState;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">int</span> currentPage;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> hasNext;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> refreshProjects;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> fetchNextProjects;</div><div class="line"></div><div class="line">    ProjectListContent(&#123;</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.projects,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.nextState,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.currentPage,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.hasNext,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.refreshProjects,</div><div class="line">        <span class="meta">@required</span> <span class="keyword">this</span>.fetchNextProjects</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    State&lt;StatefulWidget&gt; createState() =&gt; _ProjectListContentState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ProjectListContentState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ProjectListContent</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> ScrollController scrollController = ScrollController();</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> initState() &#123;</div><div class="line">        <span class="keyword">super</span>.initState();</div><div class="line"></div><div class="line">        scrollController.addListener(_scrollListener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="keyword">void</span> dispose() &#123;</div><div class="line">        scrollController.removeListener(_scrollListener);</div><div class="line"></div><div class="line">        scrollController.dispose();</div><div class="line">        <span class="keyword">super</span>.dispose();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _scrollListener() &#123;</div><div class="line">        <span class="keyword">if</span> (scrollController.position.extentAfter &lt; <span class="number">64</span> * <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(widget.nextState == LoadingStatus.success &amp;&amp; widget.hasNext)&#123;</div><div class="line">                widget.fetchNextProjects(widget.currentPage + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    Widget build(BuildContext context) &#123;...&#125;</div><div class="line"></div><div class="line">    Widget _nextStateToText() &#123;</div><div class="line">        <span class="keyword">if</span>(!widget.hasNext) &#123;</div><div class="line">            <span class="keyword">return</span> Text(<span class="string">'加载成功，已无下一页'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(widget.nextState == LoadingStatus.error)&#123;</div><div class="line">            <span class="keyword">return</span> Text(<span class="string">'加载失败，滑动重新加载'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Text(<span class="string">'加载中...'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Flutter是不同于ReactNative的跨端解决方案，是以一套代码实现高开发效率与高性能为目标，没有ReactNative的bridge，同时通过Dart解决javascript开发效率问题。</p><p>现在Flutter比较ReactNative的最大问题是：release下不支持”hot update”，官方的解释如下：</p><blockquote><p>Often people ask if Flutter supports “code push” or “hot update” or other similar names for pushing out-of-store updates to apps.</p><p>Currently we do not offer such a solution out of the box, but the primary blockers are not technological. Flutter supports just in time (JIT) or interpreter based execution on both Android and iOS devices. Currently we remove these libraries during –release builds, however we could easily include them.</p><p>The primary blockers to this feature resolve around current quirks of the iOS ecosystem which may require apps to use JavaScript for this kind of over-the-air-updates functionality. Thankfully Dart supports compiling to JavaScript and so one could imagine several ways in which one compile parts of ones application to JavaScript instead of Dart and thus allows replacement of or augmentation with those parts in deployed binaries.</p><p>This bug tracks adding some supported solution like this. I’ll dupe all the other reports here.</p><p>简单翻译：Flutter不支持release下的hot update，不是由于技术原因，而是iOS系统只支持javaScript实现无线更新功能，由于Dart可以转换为Javasript代码，所以有一种可能性：程序的一部分使用javascript，而不是dart，再通过动态下载这部分javascript代码，实现hot update。</p></blockquote><p>Flutter是否会成为主流的跨端解决方案，主要原因不在于其高的开发效率与高性能，主要是看Fuchsia操作系统的覆盖程序，如果Fuchsia能成为主流的物联网与Android设备的主流系统，Flutter才能真正成为主流。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://flutter.io/technical-overview/" target="_blank" rel="noopener">Technical Overview</a></li><li><a href="https://medium.com/@nhancv/why-i-move-to-flutter-34c4005b96ef" target="_blank" rel="noopener">Why I move to Flutter</a></li><li><a href="https://www.jianshu.com/p/7549b63a72d7" target="_blank" rel="noopener">Dart与消息循环机制[翻译]</a></li><li><a href="https://www.jianshu.com/p/9e6c470ea5bf" target="_blank" rel="noopener">Flutter快速上车之Widget</a></li><li><a href="https://medium.com/flutter-community/flutter-what-are-widgets-renderobjects-and-elements-630a57d05208" target="_blank" rel="noopener">Flutter, what are Widgets, RenderObjects and Elements?</a></li><li><a href="https://blog.novoda.com/introduction-to-redux-in-flutter/" target="_blank" rel="noopener">Introduction to Redux in Flutter</a></li><li><a href="https://flutterbyexample.com/user-feedback-toasts-snackbars/" target="_blank" rel="noopener">User Feedback: Toasts / Snackbars</a></li><li><a href="https://github.com/flutter/flutter/issues/14330" target="_blank" rel="noopener">Code Push / Hot Update / out of band updates</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flutter初见&quot;&gt;&lt;a href=&quot;#Flutter初见&quot; class=&quot;headerlink&quot; title=&quot;Flutter初见&quot;&gt;&lt;/a&gt;Flutter初见&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Flutter is a mobile app SDK f
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
      <category term="Flutter" scheme="https://handsomeliuyang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>DiyReact学习之路</title>
    <link href="https://handsomeliuyang.github.io/2018/08/07/DiyReact%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>https://handsomeliuyang.github.io/2018/08/07/DiyReact学习之路/</id>
    <published>2018-08-07T13:15:35.000Z</published>
    <updated>2018-08-21T02:33:44.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DiyReact的功能"><a href="#DiyReact的功能" class="headerlink" title="DiyReact的功能"></a>DiyReact的功能</h1><p>React的核心点：</p><ol><li>组件（Component）</li><li>Virtual Dom</li><li>JSX</li><li>Props &amp; State</li></ol><p>核心的渲染的Api：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(element, container[, callback])</div></pre></td></tr></table></figure></p><p>在不考虑性能，调试，扩展性的情况下，实现上面React的核心功能，相同Api，仅仅只需要几百行的代码。在此过程中，能真正的去理解其中的关键概念。</p><h1 id="Element-Component-Dom"><a href="#Element-Component-Dom" class="headerlink" title="Element,Component,Dom"></a>Element,Component,Dom</h1><p>下面是React最简单的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最简单的element</span></div><div class="line"><span class="keyword">const</span> element = &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">"div"</span>,</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">"foo"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">diyreact.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure></p><p>在此demo中，就是把element转化为dom显示出来。在React里，我们不直接操作Dom元素，我们操作的是Dom的抽象层即Element。</p><blockquote><p>Elements Describe the Tree</p><blockquote><p>An element is a plain object describing a component instance or DOM node and its desired properties.</p></blockquote></blockquote><p>即通过Element用来表示组件与Dom结点及他们的属性，整体构成一个树型结构，DiyReact.Element的定义非常的简单，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">""</span>, <span class="comment">// 类型，可以为Dom元素，或Component类型，如Button</span></div><div class="line">    props: &#123;</div><div class="line">        <span class="attr">children</span>:[ <span class="comment">// element类型的children</span></div><div class="line">        ],</div><div class="line">        <span class="attr">xxx</span>: xxx  <span class="comment">// 此element的属性列表</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如下面的Element：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"div"</span>,</div><div class="line">  <span class="attr">props</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">"container"</span>,</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"input"</span>, <span class="attr">props</span>: &#123; <span class="attr">value</span>: <span class="string">"foo"</span>, <span class="attr">type</span>: <span class="string">"text"</span> &#125; &#125;,</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"a"</span>, <span class="attr">props</span>: &#123; <span class="attr">href</span>: <span class="string">"/bar"</span> &#125; &#125;,</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"span"</span>, <span class="attr">props</span>: &#123;&#125; &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>其所描述的Dom：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"foo"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/element转dom.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如上所示，render()方法就是利用Dom的Api，把Element树转换为对应的Dom树：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, parentDom</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> &#123;type, props&#125; = element;</div><div class="line"></div><div class="line">    <span class="comment">// 创建Dom的Element</span></div><div class="line">    <span class="keyword">const</span> isTextElement = type === <span class="string">"TEXT ELEMENT"</span>;</div><div class="line">    <span class="keyword">const</span> dom = isTextElement</div><div class="line">        ? <span class="built_in">document</span>.createTextNode(<span class="string">""</span>)</div><div class="line">        : <span class="built_in">document</span>.createElement(type);</div><div class="line"></div><div class="line">    <span class="comment">// 读取element里的onXXX属性，当事件处理</span></div><div class="line">    <span class="keyword">const</span> isListener = <span class="function"><span class="params">name</span> =&gt;</span> name.startsWith(<span class="string">"on"</span>);</div><div class="line">    <span class="built_in">Object</span>.keys(props).filter(isListener).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> eventType = name.toLowerCase().substring(<span class="number">2</span>);</div><div class="line">        dom.addEventListener(eventType, props[name]);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// element里除onXXX与children属性外，都当属性对待</span></div><div class="line">    <span class="keyword">const</span> isAttribute = <span class="function"><span class="params">name</span> =&gt;</span> !isListener(name) &amp;&amp; name != <span class="string">"children"</span>;</div><div class="line">    <span class="built_in">Object</span>.keys(props).filter(isAttribute).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">        dom[name] = props[name];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 递归render children</span></div><div class="line">    <span class="keyword">const</span> childElements = props.children || [];</div><div class="line">    childElements.forEach(<span class="function"><span class="params">childElement</span> =&gt;</span> render(childElement, dom));</div><div class="line"></div><div class="line">    <span class="comment">// 添加到parentDom</span></div><div class="line">    parentDom.appendChild(dom);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="createElement与JSX"><a href="#createElement与JSX" class="headerlink" title="createElement与JSX"></a>createElement与JSX</h1><p>直接使用Element来描述Dom元素，其可读性很差，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"div"</span>,</div><div class="line">  <span class="attr">props</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">"container"</span>,</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"input"</span>, <span class="attr">props</span>: &#123; <span class="attr">value</span>: <span class="string">"foo"</span>, <span class="attr">type</span>: <span class="string">"text"</span> &#125; &#125;,</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"a"</span>, <span class="attr">props</span>: &#123; <span class="attr">href</span>: <span class="string">"/bar"</span> children: [&#123; <span class="attr">type</span>: <span class="string">"TEXT ELEMENT"</span>, <span class="attr">props</span>: &#123; <span class="attr">nodeValue</span>: <span class="string">"bar"</span> &#125; &#125;]&#125; &#125;,</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"span"</span>, <span class="attr">props</span>: &#123;&#125; &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>而使用JSX来表示的话，可读性就能提升很多，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**@jsx diyreact.createElement **/</span></div><div class="line"><span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"foo"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/bar"</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure></p><p>以上的JSX语法，浏览器无法识别，需要通过babel进行预处理，通过babel的插件transform-react-jsx把JSX转换为如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**@jsx diyreact.createElement **/</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> element = diyreact.createElement(</div><div class="line">    <span class="string">"div"</span>,</div><div class="line">    &#123; <span class="attr">id</span>: <span class="string">"container"</span> &#125;,</div><div class="line">    diyreact.createElement(<span class="string">"input"</span>, &#123; <span class="attr">value</span>: <span class="string">"foo"</span>, <span class="attr">type</span>: <span class="string">"text"</span> &#125;),</div><div class="line">    diyreact.createElement(</div><div class="line">        <span class="string">"a"</span>,</div><div class="line">        &#123; <span class="attr">href</span>: <span class="string">"/bar"</span> &#125;,</div><div class="line">        <span class="string">"bar"</span></div><div class="line">    ),</div><div class="line">    diyreact.createElement(<span class="string">"span"</span>, <span class="literal">null</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>增加JSX后的整体流程如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/JSX-element-dom.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>对应的createElement代码，非常简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> TEXT_ELEMENT = <span class="string">"TEXT ELEMENT"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, ...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, config);</div><div class="line">    <span class="keyword">const</span> hasChildren = args.length &gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">const</span> rawChildren = hasChildren ? [].concat(...args) : [];</div><div class="line">    props.children = rawChildren</div><div class="line">        .filter(<span class="function"><span class="params">c</span> =&gt;</span> c != <span class="literal">null</span> &amp;&amp; c !== <span class="literal">false</span>)</div><div class="line">        .map(<span class="function"><span class="params">c</span> =&gt;</span> c <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? c : createTextElement(c));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123; type, props &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextElement</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> createElement(TEXT_ELEMENT, &#123; <span class="attr">nodeValue</span>: value &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>babel的插件transform-react-jsx的做的非常通用，通用注解，可以修改默认的React.createElement函数，可以通过<a href="http://babeljs.io/en/repl" target="_blank" rel="noopener">babel-online</a>测试</p><p>// TODO-ly render()每次都是从root结点开始进行对比，setState()是从哪个当前这个结点开始，但整体逻辑是一样的</p><h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><p>React.render()函数里的element的范围很广，可以是Object，Function，Component，但只有Component才会有相应的lifecycle, states等等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">this</span>.props = props;</div><div class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state || &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setState(partialState) &#123;</div><div class="line">    <span class="comment">// 更新逻辑</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>更多细节大家可以查看：<a href="https://engineering.hexacta.com/didact-components-and-state-53ab4c900e37" target="_blank" rel="noopener">Didact: Components and State</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @jsx diyreact.createElement **/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">diyreact</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>DiyReact的学习过程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">diyreact.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById("root"));</span></div></pre></td></tr></table></figure><p>其把JSX转换后的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @jsx diyreact.createElement **/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">diyreact</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> diyreact.createElement(</div><div class="line">            <span class="string">"div"</span>,</div><div class="line">            <span class="literal">null</span>,</div><div class="line">            diyreact.createElement(</div><div class="line">                <span class="string">"h1"</span>,</div><div class="line">                <span class="literal">null</span>,</div><div class="line">                <span class="string">"DiyReact\u7684\u5B66\u4E60\u8FC7\u7A0B"</span></div><div class="line">            )</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">diyreact.render(diyreact.createElement(App, <span class="literal">null</span>), <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure></p><p>其对应的Element Tree与Virtual Dom Tree:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/component-tree.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="Instance，reconciliation与Virtual-Dom"><a href="#Instance，reconciliation与Virtual-Dom" class="headerlink" title="Instance，reconciliation与Virtual Dom"></a>Instance，reconciliation与Virtual Dom</h1><p>上述的render()函数，把element转为Dom元素，每次调用render()函数时，都会创建全新的dom元素，即使用element完全一致，都不会进行复用。如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div><div class="line">render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure></p><p>在React里，求两个Elements Tree的过程称为”reconciliation“，为了复用与对比，我们需要保存一个与之对应的对象树：A Virtual Dom。</p><p>这个Virtual Dom的”nodes”应该是什么对象？由于如下原因，我们无法复用element对象：</p><ol><li>此node对象，需要关联其对应的dom对象，但elements树应该是不可变的</li><li>无法支持Component，因为每个Component都有自己的state对象</li></ol><p>引入React的新概念：Instances。此Instances就表示这个Virtual Dom Tree，其中instance表示已经render到dom的对象。定义如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instance = &#123;element, dom, childInstances&#125;;</div></pre></td></tr></table></figure></p><p>每个element，每个Dom节点都对应一个instance对象，我们的目标是尽可能的减少此instances的创建与销毁。</p><p>Element，Instances，Dom的关系图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/element-instance-dom.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>Component的setState()更新：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; reconcile &#125; <span class="keyword">from</span> <span class="string">"./reconciler"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">this</span>.props = props;</div><div class="line">        <span class="keyword">this</span>.state = <span class="keyword">this</span>.state || &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setState(partialState) &#123;</div><div class="line">        <span class="keyword">this</span>.state = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.state, partialState);</div><div class="line">        updateInstance(<span class="keyword">this</span>.__internalInstance);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateInstance</span>(<span class="params">internalInstance</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> parentDom = internalInstance.dom.parentNode;</div><div class="line">    <span class="keyword">const</span> element = internalInstance.element;</div><div class="line">    reconcile(parentDom, internalInstance, element);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createPublicInstance</span>(<span class="params">element, internalInstance</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> &#123; type, props &#125; = element;</div><div class="line">    <span class="keyword">const</span> publicInstance = <span class="keyword">new</span> type(props);</div><div class="line">    publicInstance.__internalInstance = internalInstance;</div><div class="line">    <span class="keyword">return</span> publicInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>render的核心代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rootInstance = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> prevInstance = rootInstance;</div><div class="line">    <span class="keyword">const</span> nextInstance = reconcile(container, prevInstance, element);</div><div class="line">    rootInstance = nextInstance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reconcile</span>(<span class="params">parentDom, instance, element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// Create instance</span></div><div class="line">        <span class="keyword">const</span> newInstance = instantiate(element);</div><div class="line">        parentDom.appendChild(newInstance.dom);</div><div class="line">        <span class="keyword">return</span> newInstance;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// Remove instance</span></div><div class="line">        parentDom.removeChild(instance.dom);</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance.element.type !== element.type) &#123;</div><div class="line">        <span class="comment">// Replace instance</span></div><div class="line">        <span class="keyword">const</span> newInstance = instantiate(element);</div><div class="line">        parentDom.replaceChild(newInstance.dom, instance.dom);</div><div class="line">        <span class="keyword">return</span> newInstance;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> element.type === <span class="string">"string"</span>) &#123;</div><div class="line">        <span class="comment">// Update dom instance</span></div><div class="line">        updateDomProperties(instance.dom, instance.element.props, element.props);</div><div class="line">        instance.childInstances = reconcileChildren(instance, element);</div><div class="line">        instance.element = element;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//Update composite instance</span></div><div class="line">        instance.publicInstance.props = element.props;</div><div class="line">        <span class="keyword">const</span> childElement = instance.publicInstance.render();</div><div class="line">        <span class="keyword">const</span> oldChildInstance = instance.childInstance;</div><div class="line">        <span class="keyword">const</span> childInstance = reconcile(parentDom, oldChildInstance, childElement);</div><div class="line">        instance.dom = childInstance.dom;</div><div class="line">        instance.childInstance = childInstance;</div><div class="line">        instance.element = element;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildren</span>(<span class="params">instance, element</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> dom = instance.dom;</div><div class="line">    <span class="keyword">const</span> childInstances = instance.childInstances;</div><div class="line">    <span class="keyword">const</span> nextChildElements = element.props.children || [];</div><div class="line">    <span class="keyword">const</span> newChildInstances = [];</div><div class="line">    <span class="keyword">const</span> count = <span class="built_in">Math</span>.max(childInstances.length, nextChildElements.length);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">const</span> childInstance = childInstances[i];</div><div class="line">        <span class="keyword">const</span> childElement = nextChildElements[i];</div><div class="line">        <span class="keyword">const</span> newChildInstance = reconcile(dom, childInstance, childElement);</div><div class="line">        newChildInstances.push(newChildInstance);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newChildInstances.filter(<span class="function"><span class="params">instance</span> =&gt;</span> instance != <span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">instantiate</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> &#123; type, props &#125; = element;</div><div class="line">    <span class="keyword">const</span> isDomElement = <span class="keyword">typeof</span> type === <span class="string">"string"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isDomElement) &#123;</div><div class="line">        <span class="comment">// Instantiate DOM element</span></div><div class="line">        <span class="keyword">const</span> isTextElement = type === TEXT_ELEMENT;</div><div class="line">        <span class="keyword">const</span> dom = isTextElement</div><div class="line">            ? <span class="built_in">document</span>.createTextNode(<span class="string">""</span>)</div><div class="line">            : <span class="built_in">document</span>.createElement(type);</div><div class="line"></div><div class="line">        updateDomProperties(dom, [], props);</div><div class="line"></div><div class="line">        <span class="keyword">const</span> childElements = props.children || [];</div><div class="line">        <span class="keyword">const</span> childInstances = childElements.map(instantiate);</div><div class="line">        <span class="keyword">const</span> childDoms = childInstances.map(<span class="function"><span class="params">childInstance</span> =&gt;</span> childInstance.dom);</div><div class="line">        childDoms.forEach(<span class="function"><span class="params">childDom</span> =&gt;</span> dom.appendChild(childDom));</div><div class="line"></div><div class="line">        <span class="keyword">const</span> instance = &#123; dom, element, childInstances &#125;;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Instantiate component element</span></div><div class="line">        <span class="keyword">const</span> instance = &#123;&#125;;</div><div class="line">        <span class="keyword">const</span> publicInstance = createPublicInstance(element, instance);</div><div class="line">        <span class="keyword">const</span> childElement = publicInstance.render();</div><div class="line">        <span class="keyword">const</span> childInstance = instantiate(childElement);</div><div class="line">        <span class="keyword">const</span> dom = childInstance.dom;</div><div class="line"></div><div class="line">        <span class="built_in">Object</span>.assign(instance, &#123; dom, element, childInstance, publicInstance &#125;);</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>diyreact的reconciliation算法比较简单，只有当position与type都相同的情况下，才复用此instance，更新其内部的属性</p><h1 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h1><p>上述的reconciliation算法是一个递归算法，当节点数量很大时，整体执行时间比较慢，会一直占用浏览器的main thread，导致动画出现卡顿和用户操作响应不及时。卡顿的理解与Android的卡顿理解是一至的，当一次render()或setState()，触发的reconcile()过程，超过16ms时，就会出现丢帧现象。<a href="https://pomber.github.io/incremental-rendering-demo/react-sync.html" target="_blank" rel="noopener">卡顿demo</a>，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/diyreact-递归过程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>要解决卡顿问题，主要是解决上述的递归调用问题，让递归调用可以被中断，优先去处理animation和UI responsive。</p><p>React在16.x.x的解决方案是：把上述的执行过程拆分为很多的工作单元（UnitOfWork），这些很小的工作单元都能在很短的时间内执行完成，同时每两个执工作单元之间可以被中断，让main thread执行更高优先级的任务，如animation，ui responsive。</p><p>在DiyReact里的UnitOfWork就是包括当前节点的处理工作：</p><ol><li>new_type != cur_type：全新创建instance</li><li>type相等 &amp;&amp; type是string类型：更新属性</li><li>type相等 &amp;&amp; type为对象：执行component.render()，更新属性</li></ol><p>如果知道当前main thread需要执行更高优先级任务了？利用<a href="http://www.zhangyunling.com/702.html" target="_blank" rel="noopener">requestIdleCallback-后台任务调度</a>就可以了解当前main thread是否处于空闲时间，其调用代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    updateQueue.push(...);</div><div class="line">    <span class="built_in">window</span>.requestIdleCallback(performWork);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">performWork</span>(<span class="params">deadline</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">while</span>(nextUnitOfWork &amp;&amp; deadline.timeRemaining() &gt; ENOUGH_TIME)&#123;</div><div class="line">        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/idlecallback.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>该图中的frame#1，frame#2就是两个帧，每个帧的持续时间是(100/60 = 16.66ms)，而在每一帧内部，TASK和redering只花费了一部分时间，并没有占据整个帧，那么这个时候，如图中idle period的部分就是空闲时间，而每一帧中的空闲时间，根据该帧中处理事情的多少，复杂度等，消耗不等，所以空闲时间也不等。</p><p>通过deadline.timeRemaining()函数即可知道当前还剩多少idle时间。</p></blockquote><p>要实现这套新的工作单元调度，instance tree的节点instance的结构会要发生变化，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">tag</span>:HOST_COMPONENT|CLASS_COMPONENT,</div><div class="line">    <span class="attr">type</span>:<span class="string">"div"</span>|Component,</div><div class="line">    <span class="comment">// 构建一个树型链表结构</span></div><div class="line">    parent: parentFiber,</div><div class="line">    <span class="attr">child</span>: childFiber,</div><div class="line">    <span class="attr">sibling</span>:<span class="literal">null</span>,</div><div class="line">    <span class="comment">// 关联第二颗树</span></div><div class="line">    alternate: other fiber tree,</div><div class="line">    <span class="attr">stateNode</span>:dom|component,</div><div class="line">    <span class="attr">props</span>: element.props,</div><div class="line">    <span class="attr">partialState</span>: component changed state,</div><div class="line">    <span class="comment">// 记录真正变动的节点fiber</span></div><div class="line">    effectTag:PLACEMENT,</div><div class="line">    <span class="attr">effects</span>: []</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>这颗新的树的结点有一个新的名称：Fiber。这个颗也被称为Fiber Tree。</p><p>fiber tree的结构：</p><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/fiber-tree.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote><p>每两个工作单元之间，可以被更高优先级的任务中断，那就无法使用一颗Fiber Tree，即对应当前的Dom，又进行更新操作。通过上面的alternate可知，有两颗相互关联的Fiber Tree：</p><ol><li>current tree：与当前的Dom对应，其内容已经渲染到Dom上</li><li>work-in-progress：由render()或setState()触发的构建树</li></ol><p>方法的调用队列：</p><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/08/07/DiyReact学习之路/call-hierarchy.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote><p>更多代码细节，请学习：<a href="https://engineering.hexacta.com/didact-fiber-incremental-reconciliation-b2fe028dcaec" target="_blank" rel="noopener">Didact Fiber: Incremental reconciliation</a></p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>在React的最新版本里，打包工具从webpack，改为rollup。</p><p>webpack与rollup基本相同，记住如下差异点：</p><ol><li>webpack支持code-splitting，同时支持按需加载</li><li>Rollup默认基于ES2015模块，把所有的资源放在一起，一次性加载</li></ol><p>如何选择？结论：</p><blockquote><p>针对app级别的应该使用Webpack，针对js库级别的应用应该使用Rollup。</p><p>更多请参考：<a href="https://www.w3ctech.com/topic/1996" target="_blank" rel="noopener">Webpack、Rollup相爱相杀的那些事</a></p></blockquote><p>rollup由于默认基于ES2015模块与语法，而整体DiyReact也是基于ES6开发的，所以配置很简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"build:main"</span>: <span class="string">"rollup src/diyreact.js -f umd -n diyreact -o dist/diyreact.umd.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>具体参数的含义请参考：<a href="https://rollupjs.org/guide/en#command-line-flags" target="_blank" rel="noopener">Command line flags</a></li><li>Type of output (amd, cjs, esm, iife, umd)的理解：<ol><li>iife: 立即执行函数</li><li>cjs: 遵循CommonJs Module规范的文件输出</li><li>amd: 遵循AMD Module规范的文件输出</li><li>umd: 支持外链/CommonJs Module/AMD Module规范的文件输出</li><li>esm: 将多个遵循ES6 Module的文件编译成1个ES6 Module</li></ol></li><li>在不同场景下的使用情况： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For browsers:</span></div><div class="line">$ rollup main.js --file bundle.js --format iife</div><div class="line"></div><div class="line"><span class="comment">// For Node.js:</span></div><div class="line">$ rollup main.js --file bundle.js --format cjs</div><div class="line"></div><div class="line"><span class="comment">// For both browsers and Node.js:</span></div><div class="line">$ rollup main.js --file bundle.js --format umd --name <span class="string">"myBundle"</span></div></pre></td></tr></table></figure></li></ol><h1 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h1><p>为了方便测试生成后的diyreact.js文件，使用的是babel-standalone@6库，在browser下直接运行ES6语法，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../dist/diyreact.umd.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot; data-plugins=&quot;transform-react-jsx&quot; data-presets=&quot;es2017,stage-3&quot;&gt;</div><div class="line">        /** @jsx diyreact.createElement **/</div><div class="line"></div><div class="line">        const studies = [</div><div class="line">            &#123; name: &quot;DiyReact的功能&quot;, url: &quot;https://handsomeliuyang.github.io/&quot; &#125;,</div><div class="line">            &#123; name: &quot;createElement与JSX&quot;, url: &quot;https://handsomeliuyang.github.io/&quot; &#125;,</div><div class="line">            &#123; name: &quot;Instance，reconciliation与Virtual Dom&quot;, url: &quot;https://handsomeliuyang.github.io/&quot; &#125;,</div><div class="line">            &#123; name: &quot;Component and State&quot;, url: &quot;https://handsomeliuyang.github.io/&quot; &#125;,</div><div class="line">            &#123; name: &quot;Fiber&quot;, url: &quot;https://handsomeliuyang.github.io/&quot; &#125;</div><div class="line">        ];</div><div class="line"></div><div class="line">        class App extends diyreact.Component &#123;</div><div class="line">            render() &#123;</div><div class="line">                return (</div><div class="line">                    &lt;div&gt;</div><div class="line">                        &lt;h1&gt;DiyReact的学习过程&lt;/h1&gt;</div><div class="line">                        &lt;ul&gt;</div><div class="line">                            &#123;</div><div class="line">                                this.props.studies.map(study =&gt; &#123;</div><div class="line">                                    return &lt;Study name=&#123;study.name&#125; url=&#123;study.url&#125;/&gt;;</div><div class="line">                                &#125;)</div><div class="line">                            &#125;</div><div class="line">                        &lt;/ul&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class Study extends diyreact.Component &#123;</div><div class="line">            constructor(props) &#123;</div><div class="line">                super(props);</div><div class="line">                this.state = &#123; likes: Math.ceil(Math.random() * 100) &#125;;</div><div class="line">            &#125;</div><div class="line">            like() &#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    likes: this.state.likes + 1</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            render() &#123;</div><div class="line">                const &#123; name, url &#125; = this.props;</div><div class="line">                const &#123; likes &#125; = this.state;</div><div class="line">                const likesElement = &lt;span /&gt;;</div><div class="line">                return (</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;button onClick=&#123;e =&gt; this.like()&#125;&gt;赞：&#123;likes&#125;️&lt;/button&gt;</div><div class="line">                        &lt;a href=&#123;url&#125;&gt;&#123;name&#125;&lt;/a&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        diyreact.render(&lt;App studies=&#123;studies&#125; /&gt;, document.getElementById(&quot;root&quot;));</div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>注意：</p><ol><li>babel-standalone的配置API很少，可以查看其源码：<a href="https://github.com/babel/babel-standalone/blob/master/src/index.js" target="_blank" rel="noopener">https://github.com/babel/babel-standalone/blob/master/src/index.js</a></li><li>babel-standalone不支持env preset，只有es2015, es2016, es2017等等presets,为了支持new Class语法，需要使用es2017</li></ol><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试必要性这里就不叙述了，选择的是ava单元测试框架，使用过程中的一些问题：</p><ol><li><p>es6语法，jsx语法默认不支持？<br> ava只是一个单元测试框架，需要通过babel来支持es6，jsx等语法的支持，配置如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">"ava"</span>: &#123;</div><div class="line">    <span class="string">"require"</span>: <span class="string">"babel-register"</span>,</div><div class="line">    <span class="string">"babel"</span>: <span class="string">"inherit"</span> <span class="comment">// 继承在package.json里的babel配置</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"babel"</span>: &#123;</div><div class="line">    <span class="string">"plugins"</span>: [</div><div class="line">        [</div><div class="line">            <span class="string">"transform-react-jsx"</span>,</div><div class="line">            &#123;&#125;</div><div class="line">        ]</div><div class="line">    ],</div><div class="line">    <span class="string">"presets"</span>: [</div><div class="line">        [</div><div class="line">            <span class="string">"env"</span>,</div><div class="line">            &#123;</div><div class="line">                <span class="string">"targets"</span>: &#123;</div><div class="line">                    <span class="string">"node"</span>: <span class="string">"current"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>没有browser相关的环境与Api？<br> 通过browser-env库，可以实现能browser的部分Api进行模拟，如下所示：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> browserEnv <span class="keyword">from</span> <span class="string">'browser-env'</span>;</div><div class="line">browserEnv([<span class="string">'document'</span>]);</div><div class="line">test.beforeEach(<span class="function"><span class="params">t</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">let</span> root = <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>);</div><div class="line">    <span class="keyword">if</span>(!root)&#123;</div><div class="line">        root = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">        root.id = <span class="string">"root"</span>;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(root);</div><div class="line">    &#125;</div><div class="line">    t.context.root = root;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>browser-env库没有window.requestIdleCallback等Api？<br> 为了能进行单元测试，手动给window对象注入requestIdleCallback()实现，当然这里是假实现，如下所示：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.requestIdleCallback = <span class="function"><span class="keyword">function</span>(<span class="params">task</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">timeRemaining</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    task(&#123;</div><div class="line">        <span class="attr">timeRemaining</span> : timeRemaining</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>ava单元测试如何debug？<br> 升级IntelliJ IDEA到新版本后，在package.json下添加的script里，添加字符串”$NODE_DEBUG_OPTION”，如下所示：<br> <img src="/2018/08/07/DiyReact学习之路/node-debug.png" alt=""></p></li><li><p>babel的一些概念理解：babel-register？babel-standalone@6？plugin与preset的区别？  </p><ol><li>babel的编译过程：<ol><li>parser：通过 babylon 解析成 AST</li><li>transform[s]：All the plugins/presets ，进一步的做语法等自定义的转译，仍然是 AST。</li><li>generator： 最后通过 babel-generator 生成 output string。</li></ol></li><li>plugins与presets的区别：presets是一个plugin的集合，如babel-preset-env，根据当前的运行环境，确定需要的plugin组合</li><li>babel-register：require(‘babel-register’)后，所以require()其他模块时，就会进行文件编译，这个比较适合开发期间使用</li><li>babel-standalone@6：在browser上，对js代码实现在线转换，要完全支持React，需要配置对应的plugins和presets，如下所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/babel-standalone@6/babel.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span> <span class="attr">data-plugins</span>=<span class="string">"transform-react-jsx"</span> <span class="attr">data-presets</span>=<span class="string">"es2017,stage-3"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">// react代码</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ol></li><li><p>CommonJS与ES6模块的区别？<br>  详细请查看：<a href="https://wmaqingbo.github.io/blog/2017/09/15/ES6%E6%A8%A1%E5%9D%97-%E5%92%8C-CommonJS-%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">ES6模块 和 CommonJS 的区别</a></p></li></ol><p>本篇文章的code：<a href="https://github.com/handsomeliuyang/diyreact" target="_blank" rel="noopener">diyreact</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5" target="_blank" rel="noopener">Didact: a DIY guide to build your own React</a></li><li><a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">React Components, Elements, and Instances</a></li><li><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">React Fiber Architecture</a></li><li><a href="http://www.zhangyunling.com/702.html" target="_blank" rel="noopener">requestIdleCallback-后台任务调度</a></li><li><a href="https://github.com/sunyongjian/blog/issues/30" target="_blank" rel="noopener">babel的关键概念理解</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DiyReact的功能&quot;&gt;&lt;a href=&quot;#DiyReact的功能&quot; class=&quot;headerlink&quot; title=&quot;DiyReact的功能&quot;&gt;&lt;/a&gt;DiyReact的功能&lt;/h1&gt;&lt;p&gt;React的核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;组件（Compone
      
    
    </summary>
    
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MPVue源码分析</title>
    <link href="https://handsomeliuyang.github.io/2018/06/07/MPVue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://handsomeliuyang.github.io/2018/06/07/MPVue源码分析/</id>
    <published>2018-06-07T06:34:35.000Z</published>
    <updated>2018-06-12T12:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>使用Vue实现一个消息逆转的demo：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue.js!'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">reverseMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>You can <a href="https://codepen.io/handsomeliuyang/pen/RJGejj?editors=1010" target="_blank" rel="noopener">try it on CodePen</a>.</p><p>同样的效果，使用小程序实现的代码为：</p><ol><li>小程序的整体结构如下所示：<br> :<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/07/MPVue源码分析/小程序的代码结构.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>App相关的代码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js文件</span></div><div class="line">App(&#123;</div><div class="line">  <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onLaunch..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onShow..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onHide..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onError</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onError..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// app.json</div><div class="line">&#123;</div><div class="line">  "pages":[</div><div class="line">    "pages/index/index"</div><div class="line">  ],</div><div class="line">  "window":&#123;</div><div class="line">    "backgroundTextStyle":"light",</div><div class="line">    "navigationBarBackgroundColor": "#fff",</div><div class="line">    "navigationBarTitleText": "WeChat",</div><div class="line">    "navigationBarTextStyle":"black"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// app.wxss</div><div class="line">.container &#123;</div><div class="line">  height: 100%;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  align-items: center;</div><div class="line">  justify-content: space-between;</div><div class="line">  padding: 200rpx 0;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Page相关的代码：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Wechat!'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//生命周期函数</span></div><div class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Page onLoad..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Page onReady..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  reverseMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// this.data.message = this.data.message.split('').reverse().join('')</span></div><div class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">message</span>: <span class="keyword">this</span>.data.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**index.wxss**/</span></div><div class="line"><span class="selector-class">.usermotto</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h1><p>Vue与小程序都可以看成javascript的高级抽象，类似于java里的各种框架，想让基于Vue开发的代码运行在小程序里，就把Vue的低层映射到小程序的Api，而不是Web端的Dom。</p><p>先来分析小程序的框架体系：</p><ol><li>目录结构：包括App相关的三个文件，每个Page包括三个文件</li><li>代码结构：<ol><li>xxx.wxml布局文件，小程序特定的基础组件，如view，button, text</li><li>xxx.js逻辑文件，类似于Vue对象的Page对象与App对象</li><li>xxx.wxss样式文件，与css一致，但支持样式属性列表不一样</li></ol></li><li>类MVVM的响应式框架：V(wxml)，ViewModel(Page.data，Page.func)<ol><li>Page.data与wxml对应，通过setData()修改data数据，并自动更新View</li></ol></li></ol><h1 id="Vue的实现原理"><a href="#Vue的实现原理" class="headerlink" title="Vue的实现原理"></a>Vue的实现原理</h1><p>Vue运行期间，分为三个阶段：</p><ol><li>初始化，生成Vue对象，让其具备如下属性与方法，如下所示：<br> <img src="/2018/06/07/MPVue源码分析/Vue对象.png" alt=""></li><li>vm.$mount()后，建立整个响应式框架，并首次渲染Dom</li><li>事件响应，即用户交互</li></ol><p>整个响应式框架如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/07/MPVue源码分析/Vue框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="MPVue的实现"><a href="#MPVue的实现" class="headerlink" title="MPVue的实现"></a>MPVue的实现</h1><p>通过上面的小程序框架与Vue的实现原理介绍，基于Vue写的代码，要在小程序上运行，需要做如下工作：</p><ol><li>编译期间生成小程序目录结构与代码结构<ol><li>生成app相关的三个文件：app.js, app.json, app.wxss</li><li>生成Page相关的三个文件：xxx.js, xxx.wxml, xxx.wxss<ol><li>xxx.js的转换成本最低，基本不用变化，因为都是基于javascript语言写的</li><li>xxx.wxml：把Vue的template转换为小程序的基础组件，同时对组件的属性进行映射处理，成本较高</li><li>xxx.wxss：把Vue里的样式，直接转换过来就行，成本较低</li></ol></li></ol></li><li>对Vue运行时做修改，如下图所示：<br> <img src="/2018/06/07/MPVue源码分析/mpvue框架.png" alt=""></li></ol><p>部分核心代码：</p><ol><li>初始化流程：<br> <img src="/2018/06/07/MPVue源码分析/mpvue初始化流程.png" alt=""></li><li>更新流程：<br> <img src="/2018/06/07/MPVue源码分析/mpvue更新流程.png" alt=""></li></ol><h1 id="MPVue源码介绍"><a href="#MPVue源码介绍" class="headerlink" title="MPVue源码介绍"></a>MPVue源码介绍</h1><p>直接对着代码来分享</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html" target="_blank" rel="noopener">小程序框架</a></li><li><a href="https://github.com/numbbbbb/read-vue-source-code" target="_blank" rel="noopener">read-vue-source-code</a></li><li><a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">Vue.js</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h1&gt;&lt;p&gt;使用Vue实现一个消息逆转的demo：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>react-native-wechatmini</title>
    <link href="https://handsomeliuyang.github.io/2018/04/02/react-native-wechatmini/"/>
    <id>https://handsomeliuyang.github.io/2018/04/02/react-native-wechatmini/</id>
    <published>2018-04-02T11:17:05.000Z</published>
    <updated>2018-04-19T06:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>// 实现思路</p><p>React包括两层编程模型：数据模型、UI界面。</p><p>React的核心点：</p><ol><li>VirsualDom</li><li>组件化</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/maichong/labrador" target="_blank" rel="noopener">微信小程序模块化</a></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;// 实现思路&lt;/p&gt;
&lt;p&gt;React包括两层编程模型：数据模型、UI界面。&lt;/p&gt;
&lt;p&gt;React的核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VirsualDom&lt;/li&gt;
&lt;li&gt;组件化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Gatsby搭建博客之旅</title>
    <link href="https://handsomeliuyang.github.io/2018/03/19/Gatsby%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <id>https://handsomeliuyang.github.io/2018/03/19/Gatsby搭建博客之旅/</id>
    <published>2018-03-19T09:25:39.000Z</published>
    <updated>2018-03-26T12:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gatsby简介"><a href="#Gatsby简介" class="headerlink" title="Gatsby简介"></a>Gatsby简介</h2><blockquote><p>Blazing-fast static site generator for React （React的快速静态网站生成器）</p></blockquote><p><strong>几大特点：</strong></p><blockquote><p>1.Modern web tech without the headache（不再为web技术落后而头痛）</p><blockquote><p>Enjoy the power of the latest web technologies – React.js , Webpack , modern JavaScript and CSS and more — all setup and waiting for you to start building. (受最新Web前端技术的强大功能–React.js，Webpack，现代JavaScript和CSS等等，所有这一切都将启动并等待您的开始。)</p></blockquote><p>2.Bring your own data (使用你自定义的数据)</p><blockquote><p>Gatsby’s rich data plugin ecosystem lets you build sites with the data you want — from one or many sources: Pull data from headless CMSs, SaaS services, APIs, databases, your file system &amp; more directly into your pages using GraphQL .(Gatsby丰富的数据插件生态系统允许您使用您想要的数据构建网站 - 来自一个或多个来源：使用GraphQL将数据从无头CMS，SaaS服务，API，数据库，文件系统等更直接地导入您的页面)</p></blockquote><p>3.Scale to the entire internet (轻松发布到互联网)</p><blockquote><p>Gatsby.js is Internet Scale. Forget complicated deploys with databases and servers and their expensive, time-consuming setup costs, maintenance, and scaling fears. Gatsby.js builds your site as “static” files which can be deployed easily on dozens of services.（Gatsby.js是互联网化的。 你可以不用理会数据库和服务器的复杂部署，以及昂贵，耗时的设置成本，维护和缩放恐惧。 Gatsby.js将您的网站构建为“静态”文件，可以轻松部署在数十种服务上）</p></blockquote><p>4.Future-proof your website (使您的网站面向未来)</p><blockquote><p>Don’t build a website with last decade’s tech. The future of the web is mobile, JavaScript and APIs—the JAMstack. Every website is a web app and every web app is a website. Gatsby.js is the universal JavaScript framework you’ve been waiting for.(不要用过去十年的技术建立一个网站。 网络的未来是移动的，JavaScript和API - JAMstack。 每个网站是一个Web应用程序，每个Web应用程序是一个网站。 Gatsby.js是你一直在等待的通用JavaScript框架。)</p></blockquote><p>5.Static Progressive Web Apps (静态PWA)</p><blockquote><p>Gatsby.js is a static PWA (Progressive Web App) generator. You get code and data splitting out-of-the-box. Gatsby loads only the critical HTML, CSS, data, and JavaScript so your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so clicking around the site feels incredibly fast.(Gatsby.js是一个静态PWA（Progressive Web App）生成器。 您可以将代码和数据分开。 Gatsby只加载关键的HTML，CSS，数据和JavaScript，以便您的网站加载尽可能快。 一旦加载，Gatsby预取其他网页的资源，所以点击网站感觉非常快。)</p></blockquote><p>6.Speed past the competition (超越竞争)</p><blockquote><p>Gatsby.js builds the fastest possible website. Instead of waiting to generate pages when requested, pre-build pages and lift them into a global cloud of servers — ready to be delivered instantly to your users wherever they are.(Gatsby.js建立最快的网站。 不需要等待请求时生成页面，而是预先生成页面，并将其提升到全球服务器云端 - 随时随地传送给用户，无论他们身在何处。)</p></blockquote></blockquote><p><strong>工作原理：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby流程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h2><p>按官网教程很容易创建一个简单的HelloWord。<a href="https://www.gatsbyjs.org/docs/" target="_blank" rel="noopener">详见</a></p><p>常用命令：</p><ol><li>gatsby new xxx // 创建一个新的项目</li><li>gatsby develop // 构建开发站点</li><li>gatsby serve // 测试发布构建</li><li>gatsby build // 发布构建</li></ol><p><strong>效果如下：</strong><br><img src="/2018/03/19/Gatsby搭建博客之旅/gatsby-init.gif" alt=""></p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>React，Webpack，ES6这三种技术就不重点介绍了</p><h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><blockquote><p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。</p></blockquote><p><a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="noopener">更多请参考</a></p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><blockquote><p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.(GraphQL是在API能提供的数据范围内，提供查询能力的语言。GraphQL在您的API中提供了对数据的完整和可理解的描述，使客户能够准确地询问他们需要什么，并且更容易随时间发展API，并支持强大的开发人员工具。)</p></blockquote><p><a href="https://graphql.org/" target="_blank" rel="noopener">更多请参考</a></p><p><strong>Rest请求过程：</strong><br><img src="/2018/03/19/Gatsby搭建博客之旅/Rest请求.png" alt=""></p><p><strong>GraphQL请求过程：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/GraphQL请求.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>GraphQL的特点：</p><ol><li><font color="#ff0000">入口统一，合并请求</font>：不管请求什么资源，url都是一样的。这精简了不同场景下形态各异的API数量。</li><li><font color="#ff0000">自定义返回值</font>：在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源，避免让API消费者取到对它来说并没有用的冗余数据。</li><li><font color="#ff0000">数据的关联性</font>：在query里，通过id，可以把多个数据源或Api直接关联起来</li><li><font color="#ff0000">方便的接口调试工具</font>：GraphiQL工具，文档与调试统一，<a href="https://github.com/graphql/graphiql" target="_blank" rel="noopener">GraphiQL</a> / <a href="http://graphql.org/swapi-graphql/" target="_blank" rel="noopener">live demo</a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphiql.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>注意：GraphQL是一种标准，但其具体的实现里，有些标准的特性并没有被实现。如下所描述的一样：</p><blockquote><p>从官方的定义来说，GraphQL 是一种针对 API 的查询语言；在我看来，GraphQL 是一种标准，而与标准相对的便是实现。就像 EcmaScript 与 JavaScript 的关系，从一开始你就需要有这样一种认知：GraphQL 只定义了这种查询语言语法如何、具体的语句如何执行等。但是，你在真正使用某种 GraphQL 的服务端实现时，是有可能发现 GraphQL 标准中所描述的特性尚未被实现；或者这种 GraphQL 的实现扩展了 GraphQL 标准所定义的内容。</p><p>举例来说，就像 ES 2017 标准正式纳入了 async/await，而从实现的角度上说，IE 没有实现这一标准，而 Edge 16 和 Chrome 62 则实现了这一标准（数据来源于 caniuse）说回 GraphQL 标准，与之相对的有相当多的服务器端实现。他们的大多遵循 GraphQL 标准来实现，但也可能稍有差别，这一切需要你自己去探索。</p></blockquote><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p></blockquote><p><a href="https://lavas.baidu.com/pwa" target="_blank" rel="noopener">更多请参考</a></p><h2 id="Gatsby搭建博客"><a href="#Gatsby搭建博客" class="headerlink" title="Gatsby搭建博客"></a>Gatsby搭建博客</h2><p>注意：node需要安装6.x版本，Markdown插件gatsby-transformer-remark，在node 8.x与9.x会运行失败 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node下载</a></p><p>一个博客主要包括下面几部分：</p><ol><li>主页，包括作者介绍，文章列表</li><li>Post页面(文章正文页)</li><li>归档页，Categories页，Tags页，关于页</li></ol><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby工程目录.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ol><li><a href="https://github.com/peterramsing/lost" target="_blank" rel="noopener">lost</a>：Lost Grid是一个强大的网格系统，可以方便实现表格拆分</li><li><a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a>：解析，验证，操作和显示日期</li><li><a href="https://github.com/ReactTraining/react-media" target="_blank" rel="noopener">react-media</a>：适配不同屏幕</li></ol><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/主页.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>在我们这个demo里，首页与Post没有相同的部分，如footer，header，所以Layout里，非常的简单：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">'react-helmet'</span></div><div class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">const</span> &#123;children&#125; = <span class="keyword">this</span>.props;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"layout"</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Helmet</span> <span class="attr">defaultTitle</span>=<span class="string">"Blog by LiuYang"</span>/&gt;</span></div><div class="line">                &#123;children()&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Layout;</div></pre></td></tr></table></figure></p><p>如果有共同的footer与header，则应该在layout里实现</p><h4 id="首页整体布局"><a href="#首页整体布局" class="headerlink" title="首页整体布局"></a>首页整体布局</h4><p>包括左边Sidebar和右边的文章列表，按组件思维考虑，我们应该创建三个组件或者二个组件：<br><img src="/2018/03/19/Gatsby搭建博客之旅/首页组件.png" alt=""></p><p>下面是创建二个组件的首页布局代码：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexRoute</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">const</span> &#123;title, subtitle&#125; = <span class="keyword">this</span>.props.data.site.siteMetadata;</div><div class="line">        <span class="keyword">const</span> &#123;<span class="attr">edges</span>:posts&#125; = <span class="keyword">this</span>.props.data.allMarkdownRemark;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;Helmet&gt;</div><div class="line">                    &lt;title&gt;&#123;title&#125;&lt;/title&gt;</div><div class="line">                    &lt;meta name="description" content=&#123;subtitle&#125;/&gt;</div><div class="line">                &lt;/Helmet&gt;</div><div class="line">                &lt;Sidebar &#123;...this.props&#125;/&gt;</div><div class="line">                &lt;div className="content"&gt;</div><div class="line">                    &lt;div className="content__inner"&gt;</div><div class="line">                        &#123;</div><div class="line">                            posts</div><div class="line">                                .filter((&#123;node:post&#125;) =&gt; post.frontmatter.title.length &gt; 0)</div><div class="line">                                .map((&#123;node:post&#125;)=&gt;&#123;</div><div class="line">                                    return (</div><div class="line">                                        &lt;Post data=&#123;post&#125; key=&#123;post.fields.slug&#125;/&gt;</div><div class="line">                                    );</div><div class="line">                                &#125;)</div><div class="line">                        &#125;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="适应不同尺寸的屏幕"><a href="#适应不同尺寸的屏幕" class="headerlink" title="适应不同尺寸的屏幕"></a>适应不同尺寸的屏幕</h4><p>常见屏幕大小有：</p><ol><li>lg：宽度大于1100px的屏幕</li><li>md：宽度在[960px–1100px]之间的屏幕</li><li>sm：宽度在[685px–960px]之间的屏幕</li><li>xs：宽度在[0px–685px]之间的屏幕</li></ol><p>在不同屏幕下，首页布局也要有相应的变化，利用css的@media实现不同屏幕的适配：<a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp" target="_blank" rel="noopener">CSS @media Rule</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _breakpoints.scss</span></div><div class="line">@mixin breakpoint-sm &#123;</div><div class="line">    @media screen and (min-width: <span class="number">685</span>) &#123;</div><div class="line">        @content</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@mixin breakpoint-md &#123;</div><div class="line">    @media screen and (min-width: <span class="number">960</span>) &#123;</div><div class="line">        @content</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// index.js的scss</span></div><div class="line">.content &#123;</div><div class="line">    &amp;__inner &#123;</div><div class="line">        <span class="attr">padding</span>:<span class="number">25</span>px <span class="number">20</span>px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@include breakpoint-sm &#123;</div><div class="line">    .content &#123;</div><div class="line">        lost-column: <span class="number">7</span>/<span class="number">12</span>;</div><div class="line">        &amp;__inner &#123;</div><div class="line">            <span class="attr">padding</span>: <span class="number">30</span>px <span class="number">20</span>px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@include breakpoint-md &#123;</div><div class="line">    .content &#123;</div><div class="line">        lost-column: <span class="number">2</span>/<span class="number">3</span>;</div><div class="line">        &amp;__inner &#123;</div><div class="line">            <span class="attr">padding</span>: <span class="number">40</span>px <span class="number">35</span>px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意上面的样式是叠加的，下面的会覆写掉面上样式。</p><h4 id="空格实现"><a href="#空格实现" class="headerlink" title="空格实现"></a>空格实现</h4><p>在html页面里，想实现空隔效果，可以有下面几种方案：</p><ol><li>通过空格的特殊字符实现</li><li>全角下的空格</li><li>通过css样式实现，占位div，再设置其margin值</li></ol><h4 id="博客相关的gatsby插件"><a href="#博客相关的gatsby插件" class="headerlink" title="博客相关的gatsby插件"></a>博客相关的gatsby插件</h4><ol><li><a href="https://www.gatsbyjs.org/packages/gatsby-source-filesystem/?=gatsby-source-filesystem" target="_blank" rel="noopener">gatsby-source-filesystem</a>：读取本地文件</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-transformer-remark/?=gatsby-transformer-remark" target="_blank" rel="noopener">gatsby-transformer-remark</a>：使用Remark解析Markdown文件</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-remark-images/?=gatsby-remark-images" target="_blank" rel="noopener">gatsby-remark-images</a>：用于解析图片</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-plugin-postcss-sass/#gatsby-plugin-postcss-sass" target="_blank" rel="noopener">gatsby-plugin-postcss-sass</a>：支持sass</li></ol><p>默认通过GraphQL无法查询到文件相关的数据，当安装了gatsby-source-filesystem插件后，可以查询到File相关的数据：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphql_file.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>安装了gatsby-transformer-remark插件后，就可以查询Markdown相关的数据了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphql_markdown.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>markdown的node结点的parent是file结点，即markdown是基于上一次插件的结果产生的，减少重复制造轮子</p><h3 id="Post页面"><a href="#Post页面" class="headerlink" title="Post页面"></a>Post页面</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/Post页面.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>页面的思路与主页的思路一样，使用组件化的思路设计，唯一的不同点是代码高亮显示</p><p>主页是一个固定页，但Post页面有很多，如果批量生成？使用gatsby的扩展点及Api来实现，整体流程如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby模板.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">exports.createPages = <span class="function">(<span class="params">&#123;graphql, boundActionCreators&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">const</span> &#123;createPage&#125; = boundActionCreators;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">const</span> postTemplate = path.resolve(<span class="string">'./src/templates/post-template.js'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 查询所有的markdown，并创建相应的页面</span></div><div class="line">        resolve(</div><div class="line">            graphql(<span class="string">`&#123;</span></div><div class="line">                allMarkdownRemark(</div><div class="line">                    limit: 1000</div><div class="line">                ) &#123;</div><div class="line">                    edges &#123;</div><div class="line">                        node &#123;</div><div class="line">                            fields &#123;</div><div class="line">                                slug</div><div class="line">                            &#125;</div><div class="line">                            frontmatter &#123;</div><div class="line">                                category</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;`).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">if</span> (result.errors) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(result.errors);</div><div class="line">                    reject(result.errors)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 创建对应的markdown页面</span></div><div class="line">                result.data.allMarkdownRemark.edges.forEach(<span class="function">(<span class="params">edge</span>) =&gt;</span> &#123;</div><div class="line">                    createPage(&#123;</div><div class="line">                        <span class="attr">path</span>: edge.node.fields.slug, <span class="comment">// required</span></div><div class="line">                        component: slash(postTemplate),</div><div class="line">                        <span class="attr">context</span>: &#123;</div><div class="line">                            <span class="attr">slug</span>: edge.node.fields.slug,</div><div class="line">                        &#125;,</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                resolve();</div><div class="line">            &#125;)</div><div class="line">        )</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="Gatsby与Hexo的对比"><a href="#Gatsby与Hexo的对比" class="headerlink" title="Gatsby与Hexo的对比"></a>Gatsby与Hexo的对比</h2><p>调研Gatsby的初衷是想把博客实现由Hexo替换为Gatsby，Hexo与Gatsby都是静态网站生成器，主要差别是使用的技术不一样，Gatsby使用的都是最新技术，但最后还是继续使用了Hexo，主要原因是：Hexo提供了很多的Themes，能快速复用这些Themes。</p><p>此Demo的地址：<a href="https://github.com/handsomeliuyang/handsomeliuyang.github.io/tree/gatsby" target="_blank" rel="noopener">Gatsby-demo</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.fly63.com/article/detial/388" target="_blank" rel="noopener">中文gatsby介绍</a></li><li><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">gatsbyjs</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">约定优于配置</a></li><li><a href="http://jerryzou.com/posts/10-questions-about-graphql/" target="_blank" rel="noopener">阻碍你使用 GraphQL 的十个问题</a></li><li><a href="https://www.howtographql.com/basics/1-graphql-is-the-better-rest/" target="_blank" rel="noopener">GraphQL is the better REST</a></li><li><a href="https://www.jianshu.com/p/2ad286397f7a" target="_blank" rel="noopener">对比GraphQL与REST——两种HTTP API的差异</a></li><li><a href="https://blog.tonyseek.com/post/graphql-vs-restful/" target="_blank" rel="noopener">GraphQL vs RESTful API 的一些想法</a></li><li><a href="https://github.com/alxshelepenok/gatsby-starter-lumen" target="_blank" rel="noopener">gatsby-starter-lumen</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gatsby简介&quot;&gt;&lt;a href=&quot;#Gatsby简介&quot; class=&quot;headerlink&quot; title=&quot;Gatsby简介&quot;&gt;&lt;/a&gt;Gatsby简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Blazing-fast static site generato
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>抽屉效果实现三端化（android，ios，web）的历程</title>
    <link href="https://handsomeliuyang.github.io/2018/03/04/%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%AB%AF%E5%8C%96%E7%9A%84%E5%8E%86%E7%A8%8B/"/>
    <id>https://handsomeliuyang.github.io/2018/03/04/抽屉效果实现三端化的历程/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-26T12:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactNative运行"><a href="#ReactNative运行" class="headerlink" title="ReactNative运行"></a>ReactNative运行</h1><p>通过Native Code的运行命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure><p>具体过程：</p><ol><li>启动js server: 用于生成本地打包服务Metro，地址：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></li><li>编译打包，并安装：cd android &amp;&amp; ./gradlew installDebug</li><li>手机通过<a href="http://localhost:8081访问js" target="_blank" rel="noopener">http://localhost:8081访问js</a> server：adb reverse tcp:8081 tcp:8081</li><li>启动App：adb shell am start -n 包名/activity</li><li>App运行时，默认请求bundle的地址为：<a href="http://ip:8081/xxx" target="_blank" rel="noopener">http://ip:8081/xxx</a></li></ol><p>问题：当电脑切换wifi后，模拟器无法连接js server？<br>原因：电脑的ip地址变了，但App请求bundle地址没有变<br>彻底解决方案：在App里，进入Developer Menu，修改bundle请求地址为：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></p><p><strong>android模拟器快捷键</strong></p><ol><li>Developer Menu： ⌘M</li><li>Reload：two R</li></ol><p>注意：使用x86的模拟器，此模拟器的运行速度与真机一致</p><h1 id="react-native-web部署"><a href="#react-native-web部署" class="headerlink" title="react-native-web部署"></a>react-native-web部署</h1><p>通过ReactNative的Metro编译出的bundle.js文件，只能在对应的App里运行，无法直接在浏览器里运行。</p><p>在不考虑自定义View和Module的情况，要想生成的bundle.js可以直接在浏览器里运行，理论上只需要两步：</p><ol><li>实现一套在浏览器里支持运行的react-native-web库</li><li>不通过Metro打包，通过webpack打包，把react-native-web库替换react-native库，同时打包在一起</li></ol><p>react-native-web已经有实现版本了，详情请查看<a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a></p><p>相应的webpack的配置过程，请参考：<a href="https://github.com/ndbroadbent/react-native-web-webpack" target="_blank" rel="noopener">react-native-web-webpack</a></p><p>配置完后，不用对ReactNative代码做任何改动，就能直接在浏览器上支持运行，主要是使用了webpack的alias功能（整体替换react-native库）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">        <span class="string">'react-native'</span>: <span class="string">'react-native-web'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="三端实现：抽屉效果"><a href="#三端实现：抽屉效果" class="headerlink" title="三端实现：抽屉效果"></a>三端实现：抽屉效果</h1><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><p><strong>方案1：</strong>仿照DrawerLayoutAndroid的Api，实现DrawerLayoutIOS和DrawerLayoutWeb两套View</p><p><strong>方案2：</strong>react-navigation库也实现了DrawerLayoutWeb，在webpack如下配置，就可以使用了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    alias: &#123;</div><div class="line">        &apos;react-navigation&apos;: &apos;react-navigation/lib/react-navigation.js&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：不是所有的react-navigation版本都能测试成功，1.0.0-beta.10测试通过，但beta.50测试失败<br>更详细的信息：<a href="https://medium.com/@locropulenton/navigating-in-all-platforms-with-react-navigation-673e9a6e963" target="_blank" rel="noopener">Navigating in all platforms</a></p><p><strong>方案3：</strong>使用基本组件（View，Animated，TouchableWithoutFeedback等），实现DrawerLayout，即可满足三端运行（<a href="https://github.com/react-native-community/react-native-drawer-layout" target="_blank" rel="noopener">react-native-drawer-layout</a>）</p><p>此方案有一定的适配的问题，可能在android4.x系统里，运行会有一些问题</p><h2 id="抽屉效果实现（方案3）"><a href="#抽屉效果实现（方案3）" class="headerlink" title="抽屉效果实现（方案3）"></a>抽屉效果实现（方案3）</h2><h3 id="实现弹窗效果"><a href="#实现弹窗效果" class="headerlink" title="实现弹窗效果"></a>实现弹窗效果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/04/抽屉效果实现三端化的历程/drawer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实现分析：</p><ol><li>整体有三层View，最底层是首页，中间是遮罩层，最上层是抽屉</li><li>正常Flexbox布局相当于Android里的LinearLayout布局，但通过position=absolute，与zindex可实现叠加效果，更多请参考<a href="https://www.w3schools.com/cssref/pr_class_position.asp" target="_blank" rel="noopener">CSS position Property</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">    style=&#123;&#123; flex: 1, backgroundColor: &apos;transparent&apos;&#125;&#125;&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            flex: 1,</div><div class="line">            zIndex: 0,</div><div class="line">        &#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125; // 子布局</div><div class="line">    &lt;/View&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            backgroundColor: &apos;#000000&apos;,</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            left: 0,</div><div class="line">            bottom: 0,</div><div class="line">            right: 0,</div><div class="line">            zIndex: 1000,</div><div class="line">        &#125;&#125;&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            bottom: 0,</div><div class="line">            zIndex: 1001</div><div class="line">        &#125;&#125;&gt;</div><div class="line">        &#123;this.props.renderNavigationView()&#125; // 抽屉布局</div><div class="line">    &lt;/View&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure><h3 id="实现抽屉展开与收起动画"><a href="#实现抽屉展开与收起动画" class="headerlink" title="实现抽屉展开与收起动画"></a>实现抽屉展开与收起动画</h3><iframe height="300" width="100%" src="drawer.mp4" frameborder="0" allowfullscreen></iframe><p>两个动画：</p><ol><li>遮罩层渐隐和渐现动画</li><li>抽屉水平移动动画</li></ol><p>2维动画实现的思路比较简单，以遮罩层的渐隐动画为例：</p><ol><li><p>假设当前的透明度为变量x，例用Animated.View的opacity样式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">..........</div><div class="line">    &lt;Animated.View</div><div class="line">        style=&#123;&#123;</div><div class="line">            backgroundColor: &apos;#000000&apos;,</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            left: 0,</div><div class="line">            bottom: 0,</div><div class="line">            right: 0,</div><div class="line">            zIndex: 1000,</div><div class="line">            opacity: x  // 设置透明度</div><div class="line">        &#125;&#125;&gt;</div><div class="line">    &lt;/Animated.View&gt;</div><div class="line">   ..........</div></pre></td></tr></table></figure></li><li><p>定时修改变量x，并重新渲染，动画就行成了</p></li></ol><p><strong>真正的实现：</strong></p><ol><li><p>通过变量设置透明度与水平移动理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    const &#123;drawerWidth, drawerBackgroundColor&#125; = this.props;</div><div class="line"></div><div class="line">    const &#123;openValue, drawerShown&#125; = this.state;</div><div class="line"></div><div class="line">    const dynamicDrawerStyles = &#123;</div><div class="line">        backgroundColor: drawerBackgroundColor,</div><div class="line">        width: drawerWidth,</div><div class="line">        left: 0,</div><div class="line">    &#125;;</div><div class="line">    let drawerTranslateX = openValue.interpolate(&#123;</div><div class="line">        inputRange: [0, 1],</div><div class="line">        outputRange: [-drawerWidth, 0],</div><div class="line">    &#125;);</div><div class="line">    const animatedDrawerStyles = &#123;</div><div class="line">        transform: [&#123; translateX: drawerTranslateX&#125;],</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    const overlayOpacity = openValue.interpolate(&#123;</div><div class="line">        inputRange: [0, 1],</div><div class="line">        outputRange: [0, 0.7],</div><div class="line">    &#125;);</div><div class="line">    const animatedOverlayStyles = &#123;opacity: overlayOpacity&#125;;</div><div class="line"></div><div class="line"></div><div class="line">    const pointerEvents = drawerShown ? &quot;auto&quot; : &quot;none&quot;;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;View</div><div class="line">            style=&#123;&#123; flex: 1, backgroundColor: &apos;transparent&apos;&#125;&#125;&gt;</div><div class="line">            &lt;Animated.View</div><div class="line">                style=&#123;styles.main&#125;&gt;</div><div class="line">                &#123;this.props.children&#125;</div><div class="line">            &lt;/Animated.View&gt;</div><div class="line">            &lt;TouchableWithoutFeedback</div><div class="line">                pointerEvents=&#123;pointerEvents&#125;</div><div class="line">                onPress=&#123;this._onOverlayClick&#125;&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    pointerEvents=&#123;pointerEvents&#125;</div><div class="line">                    style=&#123;[styles.overlay, animatedOverlayStyles]&#125;&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/TouchableWithoutFeedback&gt;</div><div class="line">            &lt;Animated.View</div><div class="line">                style=&#123;[styles.drawer, dynamicDrawerStyles, animatedDrawerStyles]&#125;&gt;</div><div class="line">                &#123;this.props.renderNavigationView()&#125;</div><div class="line">            &lt;/Animated.View&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>定时修改变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Animated.spring(this.state.openValue, &#123;</div><div class="line">       toValue: 1,</div><div class="line">       bounciness: 0,</div><div class="line">       // restSpeedThreshold: 0.1,</div><div class="line">       useNativeDriver: true</div><div class="line">   &#125;).start();</div></pre></td></tr></table></figure></li></ol><p>重点知识点：</p><ol><li>css3也有一个transform属性，但这个是ReactNative的transform属性，有区别，其分别对应的文档：<ol><li><a href="https://facebook.github.io/react-native/docs/0.43/transforms.html#transform" target="_blank" rel="noopener">ReactNative的transform</a></li><li><a href="http://css.cuishifeng.cn/" target="_blank" rel="noopener">css3的transform</a></li></ol></li><li>translateX属性的范围不是0–1，而实际抽屉的宽度</li><li>渐隐取值范围：[0–0.7]，水平移动画的取值范围：[0–抽屉的宽广]，变量openValue的取值范围：[0–1]。Animated.Value()的interpolate()方法进行转换，使其在同一个维度</li></ol><p><strong>特别注意：</strong>使用Animated.Value变量时，只能在Animated.View里使用，不能直接在View里使用，会出现各种想像不到的问题</p><h3 id="遮罩层的事件处理"><a href="#遮罩层的事件处理" class="headerlink" title="遮罩层的事件处理"></a>遮罩层的事件处理</h3><p>这个比较简单，通过TouchableWithoutFeedback就可以实现</p><p><strong>注意：</strong>overlay设置为全透明后，还是一样可以拦截或透传事件，通过View的pointerEvents属性配制事件传递</p><h3 id="触发抽屉显示动画"><a href="#触发抽屉显示动画" class="headerlink" title="触发抽屉显示动画"></a>触发抽屉显示动画</h3><p>下面是真正的使用DrawerLayout的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    const navigationView = React.createElement(NavigationScreen); // 抽屉View</div><div class="line">    return (</div><div class="line">        &lt;DrawerLayout</div><div class="line">            drawerWidth=&#123;300&#125;</div><div class="line">            drawerBackgroundColor=&apos;#DAE8FC&apos;</div><div class="line">            renderNavigationView=&#123;()=&gt;navigationView&#125;</div><div class="line">            ref=&#123;(drawer)=&gt;&#123;this.drawerLayout = drawer;&#125;&#125;&gt;</div><div class="line">            &lt;HomeScreen navigate=&#123;this.navigate&#125;/&gt; // 首页</div><div class="line">        &lt;/DrawerLayout&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>真正触发抽屉显示动画的是HomeScreen(首页)，并不是DrawerLayout自已，所以需要使用React的ref属性，把DrawLayout的引用传递给其他View，才能调用其对外提供的Api。</p><h1 id="学习到的技术点（记住）"><a href="#学习到的技术点（记住）" class="headerlink" title="学习到的技术点（记住）"></a>学习到的技术点（记住）</h1><h2 id="端口映射-USB连接"><a href="#端口映射-USB连接" class="headerlink" title="端口映射(USB连接)"></a>端口映射(USB连接)</h2><ol><li><p>在手机设备里通过<a href="http://localhost:port/访问pc上的服务时，使用如下命令：" target="_blank" rel="noopener">http://localhost:port/访问pc上的服务时，使用如下命令：</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb reverse (remote) (local)</div><div class="line">例子：adb -s 设备 reverse tcp:8081 tcp:8081</div></pre></td></tr></table></figure></li><li><p>在pc上通过<a href="http://localhost:port/，访问手机设备上的服务时，使用如下命令：" target="_blank" rel="noopener">http://localhost:port/，访问手机设备上的服务时，使用如下命令：</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward (local) (remote)</div><div class="line">例子：adb forward tcp:8081 tcp:8081</div></pre></td></tr></table></figure></li></ol><h2 id="函数里的this的理解"><a href="#函数里的this的理解" class="headerlink" title="函数里的this的理解"></a>函数里的this的理解</h2><ol><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象。<a href="http://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">更多信息</a></li><li>通过.bind()可以修改this的指向</li><li>箭头函数的this，是由定义时的上下文决定，而不是由运行时决定。</li></ol><p>在ES6里，定义类时，其函数的写法有下面两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">constructor()&#123;</div><div class="line">this.name = &quot;Li&quot;;</div><div class="line">this.age = &quot;18&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getName()&#123;</div><div class="line">console.log(&quot;Person.name=&quot; + this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getAge = ()=&gt;&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>getName()方法，在下面的场景下会执行有问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const person = new Person(xxx);</div><div class="line">const tempGetName = person.getName;</div><div class="line">tempGetName(); // this为window</div></pre></td></tr></table></figure><p>要解决这个问题，需要在构造函数里添加：this.getName = this.getName.bind(this)</p><p>getName()与getAge()方法的其他不同点：</p><ol><li><p>getName()定义在原型上，getAge()定义在对象上，当类的对象很多时，比较占内存</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// getAge()方法相当于在构造函数里创建</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line"></div><div class="line">this.name = &quot;Li&quot;;</div><div class="line">this.age = &quot;18&quot;;</div><div class="line">this.getAge = ()=&gt;&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// getName()相当于在原型上定义</div><div class="line">Person.prototype.getName = function()&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>箭头函数的继承的三种情况：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// 继承1</div><div class="line">class Student extends Person&#123;</div><div class="line">getAge = ()=&gt;&#123;</div><div class="line">super.getAge();</div><div class="line">console.log(&quot;Student.age&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Uncaught TypeError: (intermediate value).getAge is not a function</div><div class="line"></div><div class="line">// 继承2</div><div class="line">class Student extends Person&#123;</div><div class="line">getAge()&#123;</div><div class="line">super.getAge();</div><div class="line">console.log(&quot;Student.age&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Person.age=18</div><div class="line"></div><div class="line">// 继承3</div><div class="line">class Student extends Person&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Person.age=18</div><div class="line"></div><div class="line">// 继承4</div><div class="line">class Student extends Person&#123;</div><div class="line">getName()&#123;</div><div class="line">   super.getName();</div><div class="line">  console.log(&quot;Student.name&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">new Student().getName();</div><div class="line">// Person.name=Li</div><div class="line">// Student.name</div><div class="line"></div><div class="line">// 继承5</div><div class="line">class Student extends Person&#123;</div><div class="line">getName=()=&gt;&#123;</div><div class="line">   super.getName();</div><div class="line">  console.log(&quot;Student.name&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">new Student().getName();</div><div class="line">// Person.name=Li</div><div class="line">// Student.name</div></pre></td></tr></table></figure><p> 结论就是：<font color="#ff0000">箭头函数可以继承，但无法被重写</font></p></li></ol><h2 id="flexbox布局理解"><a href="#flexbox布局理解" class="headerlink" title="flexbox布局理解"></a>flexbox布局理解</h2><ol><li>Flex布局类似于Android里的LinearLayout布局，flexDirection，justifyContent，alignItems，alignSelf</li><li>width，height的值尖似于dip，会依据手机的屏幕进行转换，<a href="https://facebook.github.io/react-native/docs/pixelratio.html" target="_blank" rel="noopener">PixelRatio更多信息</a></li><li>Flex的布局，默认是一层布局，通过position=absolute，与zindex可实现Android里的RelativeLayout效果。<a href="https://www.w3schools.com/cssref/pr_class_position.asp" target="_blank" rel="noopener">CSS position Property</a></li></ol><h2 id="webpack的resolve-alias"><a href="#webpack的resolve-alias" class="headerlink" title="webpack的resolve.alias"></a>webpack的resolve.alias</h2><p>可以给import或require设置别名，利用此特性，可以把引入库修改掉，但同时又不用修改源码，<a href="https://doc.webpack-china.org/configuration/resolve/" target="_blank" rel="noopener">更多信息</a></p><h2 id="React的组件之间的交互方式"><a href="#React的组件之间的交互方式" class="headerlink" title="React的组件之间的交互方式"></a>React的组件之间的交互方式</h2><p>默认情况下，props是父组件与子组件交互的唯一方式，父组件要修改子组件，通过新的props去重新渲染子组件。这种方案可以起到很好的解耦，但在少数情况下，无法满足需求，如抽屉的展开与收起动画。</p><p>这种情况下，可以使用Refs，比较适合使用refs的场景：</p><ol><li>处理focus、文本选择或者媒体播放</li><li>触发强制动画</li><li>集成第三方DOM库</li></ol><p><a href="http://www.css88.com/react/docs/refs-and-the-dom.html" target="_blank" rel="noopener">更多请参考</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://babeljs.io/repl/" target="_blank" rel="noopener">BABEL在线转换工具</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactNative运行&quot;&gt;&lt;a href=&quot;#ReactNative运行&quot; class=&quot;headerlink&quot; title=&quot;ReactNative运行&quot;&gt;&lt;/a&gt;ReactNative运行&lt;/h1&gt;&lt;p&gt;通过Native Code的运行命令是：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactNative" scheme="https://handsomeliuyang.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>微信聊天数据定时清理</title>
    <link href="https://handsomeliuyang.github.io/2017/12/12/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86/"/>
    <id>https://handsomeliuyang.github.io/2017/12/12/微信聊天数据定时清理/</id>
    <published>2017-12-12T02:42:49.000Z</published>
    <updated>2017-12-14T06:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术方案选择"><a href="#技术方案选择" class="headerlink" title="技术方案选择"></a>技术方案选择</h1><p>Android测试支持库有：</p><ol><li>Junit3, Junit4：用于方法级别的单元测试，不通过手机运行，在测试一些正则表达式时，非常方便<br> <img src="/2017/12/12/微信聊天数据定时清理/1.png" alt=""></li><li>AndroidJUnitRunner：在手机上运行Junit测试，如一些需要获取Context的方法</li><li>Espresso：UI 测试框架；适合应用中的功能性 UI 测试。</li><li>UI Automator：UI 测试框架；适合跨系统和已安装应用的跨应用功能性 UI 测试</li><li>无障碍Api：可用于模拟用户点击，适合跨系统和已安装应用的跨应用功能性UI测试</li></ol><p>选择结果：无障碍Api，因为UI Automator只能通过adb shell运行。</p><p>注意：Root后的手机，应该可以在App内直接执行UI Automator — 没有经过测试</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="定时机制"><a href="#定时机制" class="headerlink" title="定时机制"></a>定时机制</h2><p>定时机制很容易，使用AlarmManager就行，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击，设置重复闹钟。</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRepeatingAlarm</span><span class="params">()</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ClearWeixinActivity.class);</div><div class="line">    intent.putExtra(<span class="string">"msg"</span>, <span class="string">"重复的事情多次提醒！！！"</span>);</div><div class="line">    intent.putExtra(<span class="string">"type"</span>, <span class="string">"repeat"</span>);</div><div class="line">    PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">101</span>, intent, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//假设当前时间15s之后，就开始第一次触发；然后每隔20s再次触发。</span></div><div class="line">    Calendar c = Calendar.getInstance();</div><div class="line">    c.set(Calendar.SECOND,  c.get(Calendar.SECOND) + <span class="number">60</span>*<span class="number">60</span>*<span class="number">1</span>);</div><div class="line"></div><div class="line">    AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE);</div><div class="line">    alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,</div><div class="line">            c.getTimeInMillis(),</div><div class="line">            <span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>, <span class="comment">// 1个小时</span></div><div class="line">            pendingIntent);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><font color="#ff0000">注意：</font> 当进程被杀后，闹钟无法调起应用，需要开启自启动服务</p><h2 id="自动开启无障碍模式"><a href="#自动开启无障碍模式" class="headerlink" title="自动开启无障碍模式"></a>自动开启无障碍模式</h2><p>由于无障碍模式的开启后，当应用程序进程被杀后，无障碍模式会被关掉，所以需要自动打开无障碍模式。</p><p>通过命令打开障碍模式的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 打开无障碍模式</div><div class="line">adb shell settings put secure enabled_accessibility_services com.ly.robottool/com.ly.robottool.weixin.ClearWeixinService</div><div class="line">adb shell settings put secure accessibility_enabled 1</div><div class="line"></div><div class="line">// 查看无障碍的配置情况</div><div class="line">adb shell content query --uri content://settings/secure</div></pre></td></tr></table></figure><p>App里，通过获取Root权限后，可执行以上命令，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Process p = Runtime.getRuntime().exec(<span class="string">"su"</span>);</div><div class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(p.getOutputStream());</div><div class="line">    dos.writeBytes(<span class="string">"settings put secure enabled_accessibility_services com.ly.robottool/com.ly.robottool.weixin.ClearWeixinService\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"settings put secure accessibility_enabled 1\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"mkdir /sdcard/333\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"exit\n"</span>);</div><div class="line">    dos.flush();</div><div class="line">    dos.close();</div><div class="line">    p.waitFor();</div><div class="line"></div><div class="line">    mHander.sendEmptyMessageDelayed(MESSAGE_ACCESSIBILITY_SUCCESS, <span class="number">1000</span>*<span class="number">1</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><font color="#ff0000">注意：</font> 上面的代码，需要在子线程里执行</p><h2 id="无障碍服务"><a href="#无障碍服务" class="headerlink" title="无障碍服务"></a>无障碍服务</h2><h3 id="无障碍的整体机制"><a href="#无障碍的整体机制" class="headerlink" title="无障碍的整体机制"></a>无障碍的整体机制</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/无障碍服务框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="无障碍Api"><a href="#无障碍Api" class="headerlink" title="无障碍Api"></a>无障碍Api</h3><p>更加详细的文档，请查看<a href="http://informationaccessibilityassociation.github.io/androidAccessibility/services.htm#act-for-users" target="_blank" rel="noopener">Android开发无障碍指南</a></p><p>总结一些关键点：</p><ol><li>默认情况下，只能看到TextView及其ParentView，基他ImageView等等都看不到，但通过设置flags |= FLAG_INCLUDE_NOT_IMPORTANT_VIEWS后，可以看到其他没有包含TextView的View</li><li>只能看到标准View，即自定View的父类，无法看到自定View的类名</li><li>只能获取View的Parent，children，Text，ClassName，屏幕坐标，大小，viewId，一些状态（checkable，checked，focusable，focused，selected，clickable，longClickable）</li></ol><p>注意：微信由于使用了资源id混淆技术，不同版本的微信apk，其viewid会变化</p><h3 id="UIAutomatorViewer查看ID"><a href="#UIAutomatorViewer查看ID" class="headerlink" title="UIAutomatorViewer查看ID"></a>UIAutomatorViewer查看ID</h3><p>uiautomatorviewer工具所在目录：Android SDK/tools/bin/uiautomatorviewer</p><p>与dumpsys比较：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/uiautomatorviewer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/dumpsys.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结论：uiautomator，uiautomatorviewer，无障碍Api都只能看到TextView及其ParentView，但dumpsys可以看到全部View</p><h2 id="微信自动清理聊天记录"><a href="#微信自动清理聊天记录" class="headerlink" title="微信自动清理聊天记录"></a>微信自动清理聊天记录</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/清理流程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccessibilityEvent</span><span class="params">(AccessibilityEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!WECHAT_PACKAGENAME.equals(event.getPackageName())) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String beginUUID = SharedPreferenceUtils.getBeginUUID(<span class="keyword">this</span>);</div><div class="line">    String endUUID = SharedPreferenceUtils.getEndUUID(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(beginUUID == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!beginUUID.equals(endUUID)) &#123;</div><div class="line">        SharedPreferenceUtils.updateEndUUID(<span class="keyword">this</span>, beginUUID);</div><div class="line">        hasClickMe = <span class="keyword">false</span>;</div><div class="line">        hasClickSetting = <span class="keyword">false</span>;</div><div class="line">        hasClickChat = <span class="keyword">false</span>;</div><div class="line">        hasEnterClearDialog = <span class="keyword">false</span>;</div><div class="line">        hasClickClear = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    log(<span class="string">"0000:"</span> + event);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickMe) &#123;</div><div class="line">        enterPerson(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickSetting)&#123;</div><div class="line">        enterSetting(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickChat)&#123;</div><div class="line">        enterChat(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasEnterClearDialog)&#123;</div><div class="line">        enterClearDialog(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickClear)&#123;</div><div class="line">        clickClear(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enterPerson</span><span class="params">(AccessibilityEvent event)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="string">"com.tencent.mm.ui.LauncherUI"</span>.equals(event.getClassName()))&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED == event.getEventType())&#123;</div><div class="line">        <span class="comment">// 查找当前窗口中包含“安装”文字的按钮</span></div><div class="line">        List&lt;AccessibilityNodeInfo&gt; nodes = getRootInActiveWindow().findAccessibilityNodeInfosByViewId(<span class="string">"com.tencent.mm:id/c3f"</span>);</div><div class="line">        AccessibilityNodeInfo myNode = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(AccessibilityNodeInfo node : nodes)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"我"</span>.equals(node.getText())) &#123;</div><div class="line">                myNode = node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(myNode == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        myNode.getParent().performAction(AccessibilityNodeInfo.ACTION_CLICK);</div><div class="line">        hasClickMe = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://informationaccessibilityassociation.github.io/androidAccessibility/services.htm#act-for-users" target="_blank" rel="noopener">Android开发无障碍指南</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术方案选择&quot;&gt;&lt;a href=&quot;#技术方案选择&quot; class=&quot;headerlink&quot; title=&quot;技术方案选择&quot;&gt;&lt;/a&gt;技术方案选择&lt;/h1&gt;&lt;p&gt;Android测试支持库有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Junit3, Junit4：用于方法级别的单元测试
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="自动化测试" scheme="https://handsomeliuyang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>异或总结</title>
    <link href="https://handsomeliuyang.github.io/2017/08/18/%E5%BC%82%E6%88%96%E6%80%BB%E7%BB%93/"/>
    <id>https://handsomeliuyang.github.io/2017/08/18/异或总结/</id>
    <published>2017-08-18T07:28:51.000Z</published>
    <updated>2017-09-19T09:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异或（exclusive-or）的定义"><a href="#异或（exclusive-or）的定义" class="headerlink" title="异或（exclusive or）的定义"></a>异或（exclusive or）的定义</h1><p>符号：</p><blockquote><p>XOR 或 EOR 或 ⊕（编程语言中常用^）</p></blockquote><p>定义：逻辑运算里，仅当两个运算元中恰有一个的值为真，而另外一个的值为非真时，其值为真</p><blockquote><p>1 ⊕ 1 = 0<br>0 ⊕ 0 = 0<br>1 ⊕ 0 = 1<br>0 ⊕ 1 = 1</p></blockquote><h1 id="异或的特性"><a href="#异或的特性" class="headerlink" title="异或的特性"></a>异或的特性</h1><blockquote><p>恒等律：X ⊕ 0 = X （X为任意整数）<br>归零律：X ⊕ X = 0 （X为任意整数）<br>交换律：A ⊕ B = B ⊕ A<br>结合律：(A ⊕ B) ⊕ C = A ⊕ (B ⊕ C)  </p></blockquote><h1 id="通过异或解决具体问题"><a href="#通过异或解决具体问题" class="headerlink" title="通过异或解决具体问题"></a>通过异或解决具体问题</h1><h2 id="判断两个数是否相等"><a href="#判断两个数是否相等" class="headerlink" title="判断两个数是否相等"></a>判断两个数是否相等</h2><p>技算机底层判断整数是否相等的方案：通过先将相应的位进行异或操作，然后将所有异或操作的结果进行或操作。因为执行异或操作没有进位，因此，这种方法比用ALU将两个数相减，然后再判断输出是否为0要快得多。</p><p>Linux中最初的ipv6_addr_equal()函数的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">static inline int ipv6_addr_equal(const struct in6_addr *a1, const struct in6_addr *a2)</div><div class="line">&#123;</div><div class="line">    return (a1-&gt;s6_addr32[0] == a2-&gt;s6_addr32[0] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[1] == a2-&gt;s6_addr32[1] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[2] == a2-&gt;s6_addr32[2] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[3] == a2-&gt;s6_addr32[3]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static inline int ipv6_addr_equal(const struct in6_addr *a1, const struct in6_addr *a2)</div><div class="line">&#123;</div><div class="line">    return (((a1-&gt;s6_addr32[0] ^ a2-&gt;s6_addr32[0]) |</div><div class="line">        (a1-&gt;s6_addr32[1] ^ a2-&gt;s6_addr32[1]) |</div><div class="line">        (a1-&gt;s6_addr32[2] ^ a2-&gt;s6_addr32[2]) |</div><div class="line">        (a1-&gt;s6_addr32[3] ^ a2-&gt;s6_addr32[3])) == 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>利用异或的特性：<font color="#ff0000">IF a ^ b = c THEN a ^ c = b, b ^ c = a</font></p><p><a href="http://zhilight.blog.51cto.com/9880628/1616966" target="_blank" rel="noopener">RAID</a>5，大概原理为：使用3块磁盘（A、B、C）组成RAID5阵列，当用户写数据时，将数据分成两部分，分别写到磁盘A和磁盘B，A ^ B的结果写到磁盘C；当读取A的数据时，通过B ^ C可以对A的数据做校验，当A盘出错时，通过B ^ C也可以恢复A盘的数据。</p><h2 id="bit位的一些操作"><a href="#bit位的一些操作" class="headerlink" title="bit位的一些操作"></a>bit位的一些操作</h2><h3 id="判断一个二进制数中1的数量是奇数还是偶数"><a href="#判断一个二进制数中1的数量是奇数还是偶数" class="headerlink" title="判断一个二进制数中1的数量是奇数还是偶数"></a>判断一个二进制数中1的数量是奇数还是偶数</h3><p>如100010111中1的数量是奇数还是偶数？</p><p>解答：1^0^0^0^1^0^1^1^1 = 1</p><h3 id="特定位进行翻转"><a href="#特定位进行翻转" class="headerlink" title="特定位进行翻转"></a>特定位进行翻转</h3><p>利用异或的特性：1^1=0，0^1=1。</p><p>如翻转100010111里的第5位？</p><p>解答：100010111 ^ 000010000 = 100000111</p><h2 id="不使用其他空间，交换两个值"><a href="#不使用其他空间，交换两个值" class="headerlink" title="不使用其他空间，交换两个值"></a>不使用其他空间，交换两个值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a,b;</div><div class="line">a = a ^ b;</div><div class="line">b = a ^ b; <span class="comment">// a^b^b=a</span></div><div class="line">a = a ^ b; <span class="comment">// a^b^a=b</span></div></pre></td></tr></table></figure><h2 id="一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">1</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[3, 2, 3, 2, 4, 5, 5, 6, 6]中找出只出现一次的数字：4</p><p>利用异或的三个定律：归零律，交换律，结合律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">4</span> ^ <span class="number">5</span> ^ <span class="number">5</span> ^ <span class="number">6</span> ^ <span class="number">6</span></div><div class="line">= <span class="number">3</span> ^ <span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">2</span> ^ <span class="number">5</span> ^ <span class="number">5</span> ^ <span class="number">6</span> ^ <span class="number">6</span> ^ <span class="number">4</span></div><div class="line">= <span class="number">4</span></div></pre></td></tr></table></figure><h2 id="一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">2</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[a, b, a, b, c, d, e, f, e, f]中找出只出现一次的数字：c, d</p><p><strong>思路</strong>：</p><ol><li>整体异或的结果为c与d的异或值：cXORd，因c != d，则 cXORd != 0；</li><li>利用cXORd的第一位值为1（比如从右向左第一位），来区分c与d，如下图所示：<br> <img src="/2017/08/18/异或总结/2.png" alt=""></li><li>从数组里，找到所有第二位都为1的数字，假设有：[ a, a, c, e, f, e, f]，再对这些数进行异或：a ^ a ^ c ^ e ^ f ^ e ^ f = c</li><li>再利用异或的特性：cXORd ^ c = d</li></ol><p>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFirstOneBit</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a | (~a + <span class="number">1</span>); <span class="comment">// 由a | -a即可以获取</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findTwo</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cXORd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        cXORd = cXORd ^ item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> firstOneBit = getFirstOneBit(cXORd);</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        <span class="keyword">if</span>(getFirstOneBit(item) == firstOneBit)&#123;</div><div class="line">            c = c ^ item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> d = cXORd ^ c;</div><div class="line"></div><div class="line">    System.out.printf(<span class="string">"findTwo num is %d, %d\n"</span>, c, d);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>时间复杂度为O(n)，空间复杂度O(1)</p><h2 id="一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">3</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[a, b, a, b, c, d, e, f, f]中找出只出现一次的数字：c, d，e</p><p><strong>思路</strong>：</p><ol><li>整体异或的结果为c,d,e的异或值：cXORdXORe。同时(cXORdXORe ^ c) ^ (cXORdXORe ^ d) ^ (cXORdXORe ^ e) = 0</li><li>IF A ^ B ^ C = 0, 则可以得出如下结论：<br> <img src="/2017/08/18/异或总结/3.png" alt=""></li><li>把查找3个数字，转换为2个数字的问题</li></ol><p>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findThree</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cXORdXORe = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        cXORdXORe = cXORdXORe ^ item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> firstBit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        firstBit = firstBit ^ getFirstOneBit(cXORdXORe ^ item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        <span class="keyword">if</span>(getFirstOneBit(cXORdXORe ^ item) == firstBit)&#123;</div><div class="line">            c = c ^ item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.printf(<span class="string">"findThree num is %d "</span>, c);</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] findtwoArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length + <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</div><div class="line">        findtwoArray[i] = array[i];</div><div class="line">    &#125;</div><div class="line">    findtwoArray[findtwoArray.length - <span class="number">1</span>] = c;</div><div class="line">    findTwo(findtwoArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>时间复杂度O(n)，空间复杂度O(1)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.lijinma.com/blog/2014/05/29/amazing-xor/" target="_blank" rel="noopener">感受异或的神奇</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异或（exclusive-or）的定义&quot;&gt;&lt;a href=&quot;#异或（exclusive-or）的定义&quot; class=&quot;headerlink&quot; title=&quot;异或（exclusive or）的定义&quot;&gt;&lt;/a&gt;异或（exclusive or）的定义&lt;/h1&gt;&lt;p&gt;符号
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Jenkins服务搭建</title>
    <link href="https://handsomeliuyang.github.io/2017/07/14/Docker-Jenkins%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>https://handsomeliuyang.github.io/2017/07/14/Docker-Jenkins服务搭建/</id>
    <published>2017-07-14T05:28:44.000Z</published>
    <updated>2017-07-25T02:55:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="Docker理解"><a href="#Docker理解" class="headerlink" title="Docker理解"></a>Docker理解</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/docker理解.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>Dockerfile面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维</li><li>Docker类似于一个虚拟机，实现资源和系统环境的隔离</li><li>Docker镜像类似于Ghost系统，为了方便快速使用，已经完成了服务的所有配置。</li><li>DockerFile是一个脚本，用于生成Docker镜像的脚本</li><li>Docker镜像不仅可以从DockerFile生成，也可以从Docker容器生成，但最好是通过DockerFile来生成，方便后期维护。</li><li>我们创建新的镜像都是从系统镜像开始创建的，如centos:7，centos：6</li></ol><h1 id="通过Docker部署Jenkins的好处"><a href="#通过Docker部署Jenkins的好处" class="headerlink" title="通过Docker部署Jenkins的好处"></a>通过Docker部署Jenkins的好处</h1><p>Docker解决现在的迁移服务(如Android的Jenkins)存在的问题：</p><ol><li>服务器的系统版本不一致，容易出现新问题，如缺少一些库，或软件版本过底<br> Docker：容器里的操作系统版本与主机的系统版本没有关系，不受主机的系统版本影响</li><li>多个服务部署在同一台机器上，关联的软件出现相互影响<br> Docker：每个容器之间相互不影响，完全透明，类似虚拟机</li><li>需要写服务部署文档，软件版本之间的关系，但新系统有可能不支持这些老版本的软件<br> Docker：DockerFile就是整个部署文档，安装的软件与主机的系统没有关系</li><li>服务卸载的成本很高，很容易出现卸载不完全的问题<br> Docker：只需要删除容器，其安装的软件都可以清除</li><li>服务升级很不方便，需要一台新机器或搭建虚拟机来实现<br> Docker：容器升级操作系统版本非常简单，成本非常低，修改From的关联版本就行</li><li>本地文件管理比较乱，容易相互影响<br> Docker：容器之间的文件相互不影响</li></ol><h1 id="Docker入门介绍"><a href="#Docker入门介绍" class="headerlink" title="Docker入门介绍"></a>Docker入门介绍</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>在centos上安装Docker的注意点：</p><ol><li>最低支持centos7.0系统才能安装docker</li><li>centos6.5以上也可以安装，但安装方法与centos7.0以上的安装方法不一样</li><li>具体教程可以网上查找</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="DockerFile生成Docker镜像"><a href="#DockerFile生成Docker镜像" class="headerlink" title="DockerFile生成Docker镜像"></a>DockerFile生成Docker镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker build -t 镜像名称 DockerFile所在的目录</div><div class="line"></div><div class="line">// 例子</div><div class="line">docker build -t btown-jenkins .</div></pre></td></tr></table></figure><h3 id="从Docker镜像创建Docker容器"><a href="#从Docker镜像创建Docker容器" class="headerlink" title="从Docker镜像创建Docker容器"></a>从Docker镜像创建Docker容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run [-d|-it] -p 主机端口:容器里的端口 -v 主机目录:容器里的目录 -v 主机目录:容器里的目录 镜像名称 bash</div><div class="line"></div><div class="line">// 例子</div><div class="line">docker run -it --name btown-jenkins -p 7000:8080 -v /data0/btown_jenkins_home/jobs:/var/lib/jenkins/jobs -v /data0/btown_jenkins_home/logs:/var/lib/jenkins/logs -v /data0/btown_jenkins_home/nodes:/var/lib/jenkins/nodes -v /data0/btown_jenkins_home/secrets:/var/lib/jenkins/secrets -v /data0/btown_jenkins_home/users:/var/lib/jenkins/users -v /data0/btown_jenkins_home/workspace:/var/lib/jenkins/workspace btown-jenkins bash</div></pre></td></tr></table></figure><ol><li>-d：此容器在后台运行</li><li>-it：当前控制台与容器交互</li><li>–name：创建的容器的名称</li><li>-p：端口映射，把主机的端口映射到容器里的端口</li><li>-v：目录映射，把容器里的目录映射到主机里的目录</li><li>bash：进入容器后的命令，bash表示直接进入shell状态</li></ol><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>默认情况下，容器运行期间产生的文件，都处于沙箱当中，当容器删除后，也会自动删除，这会造成一些问题：</p><ol><li>服务生成的数据很不方便备份</li><li>容器挂了后，就无法恢复数据了</li><li>容器会变的非常的大</li><li>无法共享容器间的数据</li></ol><h4 id="Docker-容器文件系统"><a href="#Docker-容器文件系统" class="headerlink" title="Docker 容器文件系统"></a>Docker 容器文件系统</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/Docker容器文件系统.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>Dockerfile  中的每一条命令，都在 Docker 镜像中以一个独立镜像层的形式存在</li><li>Docker 镜像是由 Dockerfile 构建而成，但并不是每一层 Docker 镜像中都含有相应的文件系统文件</li><li>Docker 容器的文件系统中不仅包含 Docker 镜像，还包含初始层（Init Layer）与可读写层（Read-Write Layer）。<ol><li>初始化层（Init Layer）：初始层中大多是初始化容器环境时，与容器相关的环境信息，如容器主机名，主机 host 信息以及域名服务文件等。</li><li>可读写层（Read-Write Layer）：这一层的作用非常大，Docker 的镜像层以及顶上的两层加起来，Docker 容器内的进程只对可读写层拥有写权限，其他层对进程而言都是只读的（Read-Only）</li></ol></li><li>Docker 容器有能力在可读写层看到VOLUME文件等内容，但那都仅仅是挂载点，真实内容位于宿主机上</li></ol><h4 id="Volume-命令"><a href="#Volume-命令" class="headerlink" title="Volume 命令"></a>Volume 命令</h4><p>为了能够保存（持久化）数据以及共享容器间的数据，Docker提出了Volume的概念。简单来说，Volume就是目录或者文件，它可以绕过默认的联合文件系统，而以正常的文件或者目录的形式存在于宿主机上。</p><p>有两种方式初始化Volume：</p><ol><li><p>不指定主机上的目录</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span> -it --name btown-jenkins -v /data btown-jenkins bash</div></pre></td></tr></table></figure><p> 此命令会将/data挂载到容器中，并绕过联合文件系统，我们可以在主机上直接操作该目录，通过docker inspect命令找到Volume在主机上的存储位置：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect -f &#123;&#123;.Volumes&#125;&#125; btown-jenkins</div></pre></td></tr></table></figure><p> 类似的输出为：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map[/data:/var/lib/docker/vfs/dir/cde167197ccc3e138a14f1a4f...b32cec92e79059437a9]</div></pre></td></tr></table></figure></li><li><p>指定主机上的目录：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span> -it --name btown-jenkins -v /home/data:/data btown-jenkins bash</div></pre></td></tr></table></figure><p> 命令将挂载主机的/home/data目录到容器内的/data目录上</p></li></ol><p>通过Volume挂载关键数据目录后，就可以解决上面出现的问题了</p><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><ol><li>查看所有镜像：docker images</li><li>删除镜像：docker rmi xxx</li><li>查看所有容器：docker ps -a</li><li>删除容器：docker rm xxx</li><li>退出容器：exit，CTRL+D</li><li>重新连接容器：<ol><li>docker attach xxx</li><li>docker exec -it xxx bash</li><li>差别：使用docker exec连接容器后，现执行exit退出容器，容器不会停止</li></ol></li><li>启动|停止容器：docker start|stop</li></ol><h2 id="DockerFile脚本语言"><a href="#DockerFile脚本语言" class="headerlink" title="DockerFile脚本语言"></a>DockerFile脚本语言</h2><p>Dockerfile 是一个类似 Makefile 的工具，主要用来自动化构建镜像。</p><p>先看一个例子：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 系统版本 由于需要glibc-2.14版本以上，所以要使用centos:7</span></div><div class="line"><span class="keyword">FROM</span> centos:<span class="number">7.3</span>.<span class="number">1611</span></div><div class="line"><span class="comment"># 作者信息</span></div><div class="line"><span class="keyword">MAINTAINER</span> liuyang@<span class="number">58</span>ganji.com</div><div class="line"></div><div class="line"><span class="comment"># 安装基础库</span></div><div class="line"><span class="keyword">RUN</span> yum -y update</div><div class="line"><span class="keyword">RUN</span> yum -y install wget</div><div class="line"></div><div class="line"><span class="comment"># 安装 Oracle Java 7 JDK，安装成功的目录：/usr/java/jdk1.7</span></div><div class="line"><span class="keyword">RUN</span> mkdir -p /data0/soft</div><div class="line"><span class="keyword">ADD</span> ./jdk-7u80-linux-x64.rpm /data0/soft/jdk-7u80-linux-x64.rpm</div><div class="line"><span class="keyword">RUN</span> rpm -ivh /data0/soft/jdk-7u80-linux-x64.rpm</div><div class="line"></div><div class="line"><span class="comment"># 设置jdk的环境变量</span></div><div class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/java/jdk1.<span class="number">7.0</span>_80</div><div class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/jre/bin:$JAVA_HOME/bin</div><div class="line"></div><div class="line"><span class="comment"># 复制ssh key</span></div><div class="line"><span class="keyword">COPY</span> ./ssh.tar /data0/soft/ssh.tar</div><div class="line"><span class="keyword">RUN</span> cd /data0/soft &amp;&amp; tar xvf ssh.tar</div><div class="line"><span class="keyword">RUN</span> cp -r -f /data0/soft/.ssh /var/lib/jenkins/</div><div class="line"><span class="keyword">RUN</span> chmod -R 777 /var/lib/jenkins/.ssh</div><div class="line"></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></div><div class="line"></div><div class="line"><span class="keyword">ENTRYPOINT</span> service jenkins start</div></pre></td></tr></table></figure></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>Dockerfile 中所有的命令都是以下格式：<font color="#ff0000">INSTRUCTION argument</font></p><p>指令(INSTRUCTION)不分大小写，但是推荐大写。</p><h3 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h3><font color="#ff0000">FROM &lt;image name&gt;</font>，例如 <font color="#ff0000">FROM ubuntu</font><p>所有的 Dockerfile 都用该以 FROM 开头，FROM 命令指明 Dockerfile 所创建的镜像文件以什么镜像为基础，FROM 以后的所有指令都会在 FROM 的基础上进行创建镜像；可以在同一个 Dockerfile 中多次使用 FROM 命令用于创建多个镜像。</p><h3 id="MAINTAINER-命令"><a href="#MAINTAINER-命令" class="headerlink" title="MAINTAINER 命令"></a>MAINTAINER 命令</h3><p><font color="#ff0000">MAINTAINER &lt;author name&gt;</font> 用于指定镜像创建者和联系方式。</p><h3 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h3><p><font color="#ff0000">RUN &lt;command&gt;</font> 用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化。</p><h3 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h3><p><font color="#ff0000">ADD &lt;src&gt; &lt;dst&gt;</font> 用于从将 &lt;src&gt; 文件复制到 &lt;dst&gt;<br>文件：&lt;src&gt; 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件 url，&lt;dst&gt; 是容器中的绝对路径。</p><p><strong><em>注意</em></strong>：如果源文件是压缩文件（如.tar,.zip等等），会自动解压，如果不想自动解压，可以使用copy命令</p><h3 id="COPY指令"><a href="#COPY指令" class="headerlink" title="COPY指令"></a>COPY指令</h3><p>COPY指令和ADD指令功能和使用方式类似。只是COPY指令不会做自动解压工作。</p><h3 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h3><p>设置环境变量，参考 export 的用法咧：<br>ENV LC_ALL en_US.UTF-8</p><h3 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h3><p><font color="#ff0000">EXPOSE &lt;port&gt; [&lt;port&gt;…]</font> 命令用来指定对外开放的端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></div><div class="line"><span class="comment"># 不推荐这样写，会固定死映射端口，最好通过创建容器时来指定</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span>:<span class="number">8080</span></div></pre></td></tr></table></figure><p>注意：除EXPOSE 8000:8080是提前指定了映射端口外，其他的相当于一个声明而已，具体端口映射还是在创建容器时指定的。</p><h3 id="ENTRYPOINT-命令"><a href="#ENTRYPOINT-命令" class="headerlink" title="ENTRYPOINT 命令"></a>ENTRYPOINT 命令</h3><p><font color="#ff0000">ENTRYPOINT command param1 param2</font> 用来指定启动容器时，执行的命令</p><h1 id="生成DockerFile的流程"><a href="#生成DockerFile的流程" class="headerlink" title="生成DockerFile的流程"></a>生成DockerFile的流程</h1><p>由于每个重新执行一次DockerFile文件的时间很长，所以写DockerFile的最佳方案：</p><ol><li>创建一个最初的容器，再执行成功一个命令后，就添加到DockerFile文件里，等全部OK后，DockerFile也就创建完了</li><li>再整体执行DockerFile文件，查看创建镜像是否成功</li></ol><h1 id="Docker的容器的性能"><a href="#Docker的容器的性能" class="headerlink" title="Docker的容器的性能"></a>Docker的容器的性能</h1><p>具体内容请查看：<a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="noopener">docker与虚拟机性能比较</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/docker与虚拟机比较.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>docker比虚拟机的优势：<ol><li>docker有着比虚拟机更少的抽象层</li><li>docker利用的是宿主机的内核，而不需要Guest OS</li><li>docker计算效率与主机一样，没有损耗，但虚拟机的计算能力损耗在50%左右<br> <img src="/2017/07/14/Docker-Jenkins服务搭建/计算效率.png" alt=""></li><li>docker与虚拟机内存访问效率要高<br> <img src="/2017/07/14/Docker-Jenkins服务搭建/虚拟内存.png" alt=""></li><li>docker与虚拟机启动时间及资源耗费要高</li></ol></li><li>docker的劣势：<ol><li>资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源</li><li>安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。 </li><li>docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">Docker 教程</a></li><li><a href="http://guide.daocloud.io/dcs/docker-9153976.html" target="_blank" rel="noopener">一图看尽 docker 容器文件系统</a></li><li><a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="noopener">docker与虚拟机性能比较</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker介绍&quot;&gt;&lt;a href=&quot;#Docker介绍&quot; class=&quot;headerlink&quot; title=&quot;Docker介绍&quot;&gt;&lt;/a&gt;Docker介绍&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。
      
    
    </summary>
    
      <category term="Server" scheme="https://handsomeliuyang.github.io/categories/Server/"/>
    
    
      <category term="jenkins" scheme="https://handsomeliuyang.github.io/tags/jenkins/"/>
    
      <category term="docker" scheme="https://handsomeliuyang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>如何设计高保真原型图</title>
    <link href="https://handsomeliuyang.github.io/2017/03/14/Axure%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%9E%8B%E5%9B%BE/"/>
    <id>https://handsomeliuyang.github.io/2017/03/14/Axure设计原型图/</id>
    <published>2017-03-14T08:00:00.000Z</published>
    <updated>2017-03-20T05:27:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在设计“专项测试平台项目”的需求文档时，按传统的word设计需求文档带来的问题：</p><ol><li>文档不够详细，没有交互，没有各种出错的处理情况</li><li>没有一个平台的功能流程全貌，无法提前给上级审核</li><li>需求评审的效率很低</li></ol><p>通过分析，发现主要原因是出在需求文档上，现在的静态word文档，能表达的信息很有限，那有没有更好的方式。这就是今天要分享的：高保真原型图。</p><blockquote><p>注意：实现高保真原型图的软件有很多，完全不限于Axure</p></blockquote><h1 id="高保真原型图Axure"><a href="#高保真原型图Axure" class="headerlink" title="高保真原型图Axure"></a>高保真原型图Axure</h1><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>我们可以通过房屋装修来理解，在房屋真正开始装修之前，我们要做很多的工作，如看建材，看家电，看家具，看设计师做的效果图。这些都是为了在开始真正装修之前，尽最大可能去了解最终效果是什么样子，是不是我们想要的，因为一旦开始装修，就很难去更改。</p><p>这时如果能把想要装修的房子变成一个真实的样板间，我们看提前看到所有的效果，家电，家具等等，而且还能进行体验，提出改进意见，满意后，才真正开始装修。</p><p>高保真原型图Axure就是制作这个真实样板间的工具。总结几点好处：</p><ol><li>实现功能与视觉上的统一，通过实际演示，减少口头沟通</li><li>领导与用户可以提前体验最终效果，可以提前收到他们的反馈意见</li><li>开发者终于可以了解你想要什么。以前用文档与图片无法解释清楚的需求，现在可以很容易的让开发者理解</li></ol><h2 id="Axure版本"><a href="#Axure版本" class="headerlink" title="Axure版本"></a>Axure版本</h2><ol><li>使用的是AxureRP Pro 7.0版本，同时下载注册机</li><li>下载对应版本的汉化包</li></ol><h2 id="Axure的主要功能"><a href="#Axure的主要功能" class="headerlink" title="Axure的主要功能"></a>Axure的主要功能</h2><h3 id="线框图-设计"><a href="#线框图-设计" class="headerlink" title="线框图+设计"></a>线框图+设计</h3><p>仅仅使用方块，占位符，形状和文本设计的，称之为线框图，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/线框图.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>对线框图进行视觉美化设计后，称之为高保真原型图，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/高保真原型图.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>线框图与高保真原型图的差别，仅仅是真实程序不一样而已</p><h3 id="母版"><a href="#母版" class="headerlink" title="母版"></a>母版</h3><p>母版可以理解为PPT里的母版，是可以复用部分。设计网站时，网站的导航栏，Footer等等都是通用的组件，每个页面都有，这时可以创建一个母版，实现复用，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/母版.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="元件库"><a href="#元件库" class="headerlink" title="元件库"></a>元件库</h3><p>原生自带的元件库只适合做线框图，要做手机app的原型图设计的话，工作量会比较大，这时可以导入其他的元件库，如下导入了ios8组合元件库：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/元件库.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="动态面板"><a href="#动态面板" class="headerlink" title="动态面板"></a>动态面板</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/动态图1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面的功能模块，在原型图里实现，就可以使用动态面板，动态面板是指在同一个区域里，有多种展示形态：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/动态面板.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="控件连线"><a href="#控件连线" class="headerlink" title="控件连线"></a>控件连线</h3><p>通过如下可以把两个控件进行连接：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/连线.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>给控件添加交互，就是给此控件添加：事件(event)，用例(case)，动作(action)。</p><ol><li>事件，如鼠标点击事件，鼠标移入时，鼠标移出时等等</li><li>用例，发生事件后，做什么样的业务逻辑判断</li><li>动作，即这个用例下，执行什么下的动作</li></ol><p>如下创建的交互：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/交互1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>事件的种类：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/所有的事件.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>用例与其条件：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/用例.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>常用的动作有：</p><ol><li>打开新的链接</li><li>动态面板切换</li><li>设置显示/隐藏</li></ol><h3 id="浏览器展示"><a href="#浏览器展示" class="headerlink" title="浏览器展示"></a>浏览器展示</h3><p>直接可以在预览，但为了不出现显示问题，建议使用chrome浏览器进行预览</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>每个控件可以添加文档<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/控件文档.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>当前页面也可以添加文档<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/页面说明文档.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="合作"><a href="#合作" class="headerlink" title="合作"></a>合作</h3><ol><li>通过AxShare可以实现合作编辑 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/合并编辑.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>通过版本管理来保存原文件，进行合作编辑</li></ol><h1 id="工具对比"><a href="#工具对比" class="headerlink" title="工具对比"></a>工具对比</h1><ul><li>Axure PR<ol><li>学习成本也非常高</li><li>专业的原型设计工具</li><li>可以实现很复杂的交互</li><li><a href="https://www.axure.com/" target="_blank" rel="noopener">官网</a></li></ol></li><li>Mockplus<ol><li>有免费版本，简洁高效，关注设计，而非工具</li><li><a href="https://www.mockplus.cn/" target="_blank" rel="noopener">官网</a></li></ol></li><li><a href="http://www.shejidaren.com/wireframe-tools-you-must-try-in-2016.html" target="_blank" rel="noopener">更多请点击</a></li></ul><h1 id="谁来制作高保真原型"><a href="#谁来制作高保真原型" class="headerlink" title="谁来制作高保真原型"></a>谁来制作高保真原型</h1><p>产品经理与设计师是高保真原型的制作者。（技术做支持）</p><ul><li>产品经理负责收集各方面的需求，在平衡各种资源后，确定最值得开发的产品的功能</li><li>设计师按照这个功能的规划制作视觉体现，然后产品经理和设计师一起，将功能点、设计图和交互流程一起合并为高保真原型。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>Axure RP高保真网页原型制作</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在设计“专项测试平台项目”的需求文档时，按传统的word设计需求文档带来的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文档不够详细，没有交互，没有各种
      
    
    </summary>
    
      <category term="设计" scheme="https://handsomeliuyang.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="axure" scheme="https://handsomeliuyang.github.io/tags/axure/"/>
    
  </entry>
  
</feed>
